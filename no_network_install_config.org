#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+OPTIONS: toc:1          (only include two levels in TOC)
#+PROPERTY: header-args:emacs-lisp    :tangle (concat user-emacs-directory "init.el")
#+OPTIONS: ^:nil
#+OPTIONS: _:nil

* starting headers
#+begin_src emacs-lisp
;;; package --- Summary
;;; Commentary:
;;; Code:

;;(package-initialize)

(let ((file-name-handler-alist nil))
  (require 'package)

#+end_src


* mostly related to initialization process
** earlyinits

#+begin_src emacs-lisp

  (when (version< emacs-version "27.0")
	(load-file (concat user-emacs-directory "early-init.el")))

#+end_src

** deferred compilation

#+begin_src emacs-lisp

(if (not (version< emacs-version "27.0"))
    (progn
      (if (fboundp 'native-comp-available-p) (setq comp-deferred-compilation t))
      (setq warning-suppress-types '((flycheck syntax-checker) (comp))))
  )

#+end_src

** other init settings for speed

#+begin_src emacs-lisp

(setq inhibit-default-init 1)
(setq initial-major-mode 'fundamental-mode)
;; (kill-buffer "*scratch*")

#+end_src

** suppress some ad-handle-definition warnings

#+begin_src emacs-lisp

(setq ad-redefinition-action 'accept)

#+end_src

** more garbage collection related settings

#+begin_src emacs-lisp

(defun yae-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun yae-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold yae-gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'yae-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'yae-restore-garbage-collection-h)

#+end_src


* some constants and settings that need to be configured initially
** constants

#+begin_src emacs-lisp

(defconst EMACS24+   (> emacs-major-version 23))
(defconst EMACS25+   (> emacs-major-version 24))
(defconst EMACS26+   (> emacs-major-version 25))
(defconst EMACS27+   (> emacs-major-version 26))
(defconst EMACS28+   (> emacs-major-version 27))
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
(defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix)))

#+end_src

** gnutls and security

#+begin_src emacs-lisp

;;; Security

;; Emacs is essentially one huge security vulnerability, what with all the
;; dependencies it pulls in from all corners of the globe. Let's try to be at
;; least a little more discerning.
(setq gnutls-verify-error (not (getenv-internal "INSECURE"))
      gnutls-algorithm-priority
      (when (boundp 'libgnutls-version)
        (concat "SECURE128:+SECURE192:-VERS-ALL"
                (if (and (not IS-WINDOWS)
                         (not (version< emacs-version "26.3"))
                         (>= libgnutls-version 30605))
                    ":+VERS-TLS1.3")
                ":+VERS-TLS1.2"))
      ;; `gnutls-min-prime-bits' is set based on recommendations from
      ;; https://www.keylength.com/en/4/
      gnutls-min-prime-bits 3072
      tls-checktrust gnutls-verify-error
      ;; Emacs is built with `gnutls' by default, so `tls-program' would not be
      ;; used in that case. Otherwise, people have reasons to not go with
      ;; `gnutls', we use `openssl' instead. For more details, see
      ;; https://redd.it/8sykl1
      tls-program '("openssl s_client -connect %h:%p -CAfile %t -nbio -no_ssl3 -no_tls1 -no_tls1_1 -ign_eof"
                    "gnutls-cli -p %p --dh-bits=3072 --ocsp --x509cafile=%t \
--strict-tofu --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' %h"
                    ;; compatibility fallbacks
                    "gnutls-cli -p %p %h"))

;; Emacs stores `authinfo' in $HOME and in plain-text. Let's not do that, mkay?
;; This file stores usernames, passwords, and other such treasures for the
;; aspiring malicious third party.
(setq auth-sources (list (concat user-emacs-directory "authinfo.gpg")
                         "~/.authinfo.gpg"))

;;gnutls
(add-hook 'after-init-time-hook (setq gnutls-min-prime-bits 4096))

#+end_src

** encryption related additional

#+begin_src emacs-lisp

(setq epg-gpg-program "gpg2")
(setq auth-sources '("~/.authinfo.gpg"))

#+end_src

** lexical binding

#+begin_src emacs-lisp

(setq-default lexical-binding t)

#+end_src



* window(frame) look and feel setting

#+begin_src emacs-lisp

(set-window-margins nil 2)
(setq inhibit-startup-message t)
;; (global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(setq initial-scratch-message nil)
;; (setq battery-mode-line-format " [%b%p%% } ")
;; (display-battery-mode t)
;; (display-time-mode t)
(setq frame-resize-pixelwise t)
(setq redisplay-skip-fontification-on-input t)
(setq idle-update-delay 1.0)
(setq compilation-scroll-output t)

;; (set-default-font "JetBrains Mono-9") ;;; set default font
;; (setq default-frame-alist '((font . "Jetbrains Mono 9"))) ;;; set default font for emacs --daemon / emacsclient
(setq default-frame-alist '((font . "JetBrainsMono Nerd Font 9"))) ;;; set default font for emacs --daemon / emacsclient
(set-fontset-font t nil "Dejavu Sans Mono" nil 'append)
(set-fontset-font t 'ethiopic "Noto Sans Ethiopic")
;; (set-fontset-font t 'thai "Leelawadee UI" nil 'append)

;; (setq w32-enable-synthesized-fonts t) ;;The w32-enable-synthesized-fonts variable is obsolete starting from Emacs 24.4, as Emacs no longer has this limitation.
;; (set-face-font 'italic "-*-Courier New-normal-i-*-*-11-*-*-*-c-*-iso8859-1")
;; (set-face-font 'bold-italic "-*-Courier New-bold-i-*-*-11-*-*-*-c-*-iso8859-1")

#+end_src


* basic emacs editor preferences
** set utf-8 as default coding system

#+begin_src emacs-lisp

(set-language-environment "UTF-8")

#+end_src

** autorevert

#+begin_src emacs-lisp

  (add-hook 'after-init-hook  #'global-auto-revert-mode)

#+end_src

** backup and auto-save-list

#+begin_src emacs-lisp

;;backups

(setq ;; backup-directory-alist '(((concat user-emacs-directory "backups")))
 backup-by-copying t    ; Don't delink hardlinks
 version-control t      ; Use version numbers on backups
 delete-old-versions t  ; Automatically delete excess backups
 kept-new-versions 20   ; how many of the newest versions to keep
 kept-old-versions 5    ; and how many of the old
 ;;auto-save-file-name-transforms `((concat user-emacs-directory "backups") t)
 auto-save-file-name-transforms
 `((".*" ,(concat user-emacs-directory "auto-save-list/") t))
 backup-directory-alist
 `((".*" . ,(concat user-emacs-directory "backups")))
 )

#+end_src

** clipboard

#+begin_src emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+end_src

** yes,no

#+begin_src emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+end_src

** enable some disabled commands

#+begin_src emacs-lisp

;; enable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;; enabled change region case commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

#+end_src

** input method

#+begin_src emacs-lisp

;;input-method

(defun myinput-settings ()
  "Settings based on input method."
  (cond ((string= current-input-method "ethiopic")
         (progn (setq ethio-primary-language 'amharic)
                (ethio-select-a-translation)))
        (t nil)))

(add-hook 'input-method-activate-hook #'myinput-settings)

#+end_src

** indentation stuff

#+begin_src emacs-lisp

;; ;; to setup tabs
;; (setq c-basic-indent 2)
;; (setq tab-width 4)
;; (setq indent-tabs-mode nil)

(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'c-basic-indent 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq indent-tabs-mode nil)
(setq-default tab-width 4)

;; make tab key do indent first then completion.
(setq-default tab-always-indent 'complete)

#+end_src

** Sentences end with a single space

#+begin_src emacs-lisp

(setq sentence-end-double-space nil)

#+end_src

** line-spacing

#+begin_src emacs-lisp

;; (setq-default line-spacing 0.2)
;; (add-hook 'minibuffer-setup-hook (lambda () (setq line-spacing nil)))

#+end_src

** line-number

#+begin_src emacs-lisp

;;line-numbers

  (setq display-line-numbers-type 'relative
        display-line-numbers-grow-only t
        display-line-numbers-width-start t
        ;; display-line-numbers-width 3
        )

  (global-display-line-numbers-mode t)

#+end_src

** show-parens

#+begin_src emacs-lisp

(show-paren-mode t)

#+end_src

** scrolling
*** horizontal scrolling

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'html-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'web-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'org-mode (lambda () (setq truncate-lines nil)))
;; (add-hook 'eww-after-render-hook (lambda () (setq truncate-lines t)))

(setq hscroll-margin 0)

(global-set-key (kbd "<mouse-7>") #'(lambda ()
                                      (interactive)
                                      (scroll-left 4)))

(global-set-key (kbd "<mouse-6>") #'(lambda ()
                                      (interactive)
                                      (scroll-right 4)))

#+end_src

*** smooth-scrolling

#+begin_src emacs-lisp

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
      mouse-wheel-progressive-speed t ;; accelerate scrolling
      mouse-wheel-follow-mouse 't ;; scroll window under mouse
      scroll-step 1) ;; keyboard scroll one line at a time
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)

(setq-default scroll-up-aggressively 0.01
              scroll-down-aggressively 0.01)

;; ;; ;; nice scrolling
;; (setq scroll-margin 0
;;       scroll-conservatively 100000
;;       ;; scroll-preserve-screen-position 1
;;       )

(setq fast-but-imprecise-scrolling t)

#+end_src

** marking

#+begin_src emacs-lisp

(transient-mark-mode 1)

(delete-selection-mode 1)

(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
 Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))

(defun jump-to-mark ()
  "Jumps to the local mark, respecting the `mark-ring' order.
This is the same as using \\[set-mark-command] with the prefix argument."
  (interactive)
  (set-mark-command 1))

(defun exchange-point-and-mark-no-activate ()
  "Identical to \\[exchange-point-and-mark] but will not activate the region."
  (interactive)
  (exchange-point-and-mark)
  (deactivate-mark nil))

#+end_src

** isearch

#+begin_src emacs-lisp

(setq-default
 ;; Match count next to the minibuffer prompt
 isearch-lazy-count t
 ;; Don't be stingy with history; default is to keep just 16 entries
 search-ring-max 200
 regexp-search-ring-max 200)

;; swiper like fuzzy search
;; (setq-default
;;  isearch-regexp-lax-whitespace t
;;  search-whitespace-regexp ".*?")

;; (defun move-end-of-line-maybe-ending-isearch (arg)
;; "End search and move to end of line, but only if already at the end of the minibuffer."
;;   (interactive "p")
;;   (if (eobp)
;;       (isearch-mb--after-exit
;;        (lambda ()
;;          (move-end-of-line arg)
;;          (isearch-done)))
;;     (move-end-of-line arg)))

;; (define-key isearch-mb-minibuffer-map (kbd "C-e") 'move-end-of-line-maybe-ending-isearch)

#+end_src

** explicitly set shell

#+begin_src emacs-lisp

(setq explicit-shell-file-name "/bin/bash")

#+end_src


 
* theming
#+begin_src emacs-lisp

  (add-hook 'after-init-time-hook
			(progn
			  (defadvice load-theme (after custom-faces-after-load-theme())
				"Insert an empty line when moving up from the top line."
				(let ((dafile (concat user-emacs-directory "custom_faces.el")))
				  (if (file-exists-p dafile) (load-file dafile))
				  ;; (save-excursion
				  ;;  (if (and solaire-mode (fboundp 'dashboard-refresh-buffer)) (dashboard-refresh-buffer)))
				  ))


			  (ad-activate 'load-theme)

			  (defadvice disable-theme (after custom-faces-after-disable-theme())
				"Insert an empty line when moving up from the top line."
				(let ((dafile (concat user-emacs-directory "custom_faces.el")))
				  (if (file-exists-p dafile) (load-file dafile))
				  ;; (save-excursion
				  ;;  (if (and solaire-mode (fboundp 'dashboard-refresh-buffer)) (dashboard-refresh-buffer)))
				  ))


			  (ad-activate 'disable-theme)

			  )
			)

  (add-hook 'after-init-time-hook
			(progn
			  (load-theme 'deeper-blue t)
			  ))

  (add-hook 'after-init-time-hook
			(load-file (concat user-emacs-directory "custom_faces.el")))

#+end_src


* completion
#+begin_src emacs-lisp

  (when (not EMACS26+) (ido-mode))
  (when EMACS26+ (icomplete-mode))
  (when EMACS27+ (fido-mode))
  (when EMACS27+ (fido-vertical-mode))
  
#+end_src


* scratch-page settings

#+begin_src emacs-lisp

  (add-hook 'after-init-time-hook (progn
				 (switch-to-buffer "*scratch*")
				 (lisp-interaction-mode)))
#+end_src


* set custom variables

#+begin_src emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(indicate-empty-lines t)
 ;; '(safe-local-variable-values
 ;;   ((eval add-hook 'after-save-hook
 ;;       (lambda nil
 ;;         (org-babel-tangle)
 ;;         (message "tangled-document")))))
 )

#+end_src


* provide init and finish

#+begin_src emacs-lisp

(provide 'init))

;;; init.el ends here

#+end_src
