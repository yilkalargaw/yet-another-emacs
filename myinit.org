#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+OPTIONS: toc:2          (only include two levels in TOC)
#+PROPERTY: header-args:emacs-lisp    :tangle "~/.emacs.d/init.el"
#+OPTIONS: ^:nil
#+OPTIONS: _:nil

* table of contents                                          :noexport:TOC_1:
- [[#earlyinits][earlyinits]]
- [[#initial-setup][initial setup]]
- [[#windowframe-look-and-feel-setting][window(frame) look and feel setting]]
- [[#font-settings][font-settings]]
- [[#gnutls][gnutls]]
- [[#themes][themes]]
- [[#backup][backup]]
- [[#clipboard][clipboard]]
- [[#yesno][yes,no]]
- [[#exec-path-form-shell][exec path form shell]]
- [[#libraries][libraries]]
- [[#indentation-stuff][indentation stuff]]
- [[#sentences-end-with-a-single-space][Sentences end with a single space]]
- [[#autorevert][autorevert]]
- [[#line-spacing][line-spacing]]
- [[#scrolling][scrolling]]
- [[#input-method][input method]]
- [[#imenu][imenu]]
- [[#symbol-overlay][symbol-overlay]]
- [[#hydra][hydra]]
- [[#major-mode-hydrapretty-hydra][major-mode-hydra/pretty-hydra]]
- [[#ibuffer][ibuffer]]
- [[#ediff][ediff]]
- [[#ivyconsel-and-swiper][ivy,consel and swiper]]
- [[#line-number][line-number]]
- [[#nlinum-mode][nlinum-mode]]
- [[#line-highlight][line-highlight]]
- [[#show-parens][show-parens]]
- [[#mode-line][mode-line]]
- [[#key-chords][key-chords]]
- [[#use-package-chords][use-package-chords]]
- [[#trailing-white-spaces][trailing white spaces]]
- [[#beacon][beacon]]
- [[#undo-tree][undo-tree]]
- [[#which-key][which-key]]
- [[#git][git]]
- [[#monky][monky]]
- [[#yasnippet][yasnippet]]
- [[#flycheck][flycheck]]
- [[#flyspell][flyspell]]
- [[#expand-region][expand-region]]
- [[#avy][avy]]
- [[#ace-window][ace-window]]
- [[#ag][ag]]
- [[#rg][rg]]
- [[#smart-hungry-delete][smart-hungry delete]]
- [[#ws-butler][ws-butler]]
- [[#multiple-cursors][multiple-cursors]]
- [[#smartparens][smartparens]]
- [[#rainbow-delimiters][rainbow-delimiters]]
- [[#company][company]]
- [[#eshell][eshell]]
- [[#shell-mode][shell-mode]]
- [[#term-mode][term-mode]]
- [[#comint-mode][comint-mode]]
- [[#all-the-icons][all-the-icons]]
- [[#lsp-mode][lsp-mode]]
- [[#cc][C/C++]]
- [[#rust][rust]]
- [[#go][go]]
- [[#ruby][ruby]]
- [[#python][python]]
- [[#lua][lua]]
- [[#scheme][scheme]]
- [[#common-lisp][common-lisp]]
- [[#web][web]]
- [[#javascript][javascript]]
- [[#skewer][skewer]]
- [[#ocaml][ocaml]]
- [[#crystal][crystal]]
- [[#php][php]]
- [[#csv][csv]]
- [[#yamltoml-and-json][yaml,toml and json]]
- [[#markdown][markdown]]
- [[#latexauctex][latex/auctex]]
- [[#eww][eww]]
- [[#novel][nov.el]]
- [[#restclient][restclient]]
- [[#realgud][realgud]]
- [[#projectile][projectile]]
- [[#ecb][ecb]]
- [[#org][org]]
- [[#org-beautify][org-beautify]]
- [[#god-mode][god mode]]
- [[#dired][dired]]
- [[#try][try]]
- [[#emojify][emojify]]
- [[#writeroom-mode][writeroom-mode]]
- [[#spray][spray]]
- [[#whitespace][whitespace]]
- [[#pdf][pdf]]
- [[#outline-and-outshine][outline and outshine]]
- [[#origami][origami]]
- [[#dashboard][dashboard]]
- [[#custom_faces][custom_faces]]

* earlyinits

#+BEGIN_SRC emacs-lisp
;;; package --- Summary
;;; Commentary:
;;; Code:

;;(package-initialize)

(let ((file-name-handler-alist nil))
  (require 'package)

  (when (version< emacs-version "27.0")

      ;; increase garbage collection threshold foor startup only
      ;; (setq gc-cons-threshold 8000000)
    (setq gc-cons-threshold (if (display-graphic-p) (* 400 1024 1024 ) (* 128 1024 1024)))
    (setq gc-cons-percentage 0.7))

  (add-hook 'after-init-hook #'(lambda ()
				 ;; restore after startup
				 ;; (setq gc-cons-threshold 800000) ;; default
				 (setq gc-cons-threshold (* 32 1024 1024))
				 (setq gc-cons-percentage 0.5)))


  (setq package-archives '( ;; ("marmalade" . "https://marmalade-repo.org/packages/")
			   ("ORG"       . "https://orgmode.org/elpa/")
			   ("MELPA"     . "https://melpa.org/packages/")
			   ("MELPA Stable" . "https://stable.melpa.org/packages/")
			   ("GNU"       . "https://elpa.gnu.org/packages/"))
	package-archive-priorities '(("ORG" . 15)
				     ("MELPA" . 10)
				     ("MELPA Stable" . 5)
				     ("GNU" . 0)))



  ;; Set custom settings to load in own file
  (setq custom-file (make-temp-file "emacs-custom"))


  ;; directories for custom themes and elsip-scripts
  (add-to-list 'load-path (concat user-emacs-directory "lisp"))
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))

  (setq inhibit-default-init 1)
  (setq initial-major-mode 'fundamental-mode)
  (kill-buffer "*scratch*")


#+END_SRC

* initial setup

#+BEGIN_SRC emacs-lisp

(if (version< emacs-version "27.0")
    (package-initialize))


(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

;; fetch the list of packages available 
;; (unless package-archive-contents
;; (package-refresh-contents))

;; (unless (package-installed-p 'use-package)
;; (package-install 'use-package)
;; )

#+END_SRC

* window(frame) look and feel setting

#+BEGIN_SRC emacs-lisp
(if (version< emacs-version "27.0")
    (load-file (concat user-emacs-directory "early-init.el")))


;; (if (display-graphic-p)
;; 	  (progn
;; 	    (setq initial-frame-alist
;; 		  '(
;; 		    (width . 93) ; chars
;; 		    (height . 50) ; lines
;; 		    (left . 0)
;; 		    (top . 16)
;; 		    ))
;; 	    (setq default-frame-alist
;; 		  '(
;; 		    (width . 93)
;; 		    (height . 50)
;; 		    (left . 0)
;; 		    (top . 16)))))


(set-window-margins nil 2)
(setq inhibit-startup-message t)
(global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
;; (toggle-indicate-empty-lines t)
(setq initial-scratch-message nil)
(display-battery-mode t)
(display-time-mode t)



#+END_SRC

* font-settings

#+BEGIN_SRC emacs-lisp

;; (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-11"))
;; ;; (add-to-list 'default-frame-alist '(:height . 133))
(defvar my-default-face-height 105  "height attribute to default face")
(defvar my-default-face-height-increament 5  "by how much to increase or decrease default :height")

(eval '(set-face-attribute 'default nil :height my-default-face-height
                           ;; :family "DejaVu Sans Mono"
                           ;; :family "Monospace"
                           ;; :family "Fira Mono"
                           :family "Droid Sans Mono"
                           :width 'condensed :weight 'normal
                           ))

(defun my-default-font-height-increase ()
  "Increase the value of the height parameter for the default font."
  (interactive)
  (let* ((default-face-height (face-attribute 'default :height)))
    (eval `(set-face-attribute 'default nil :height ,(+ default-face-height my-default-face-height-increament)))
    (message "default font height is now %d" (face-attribute 'default :height))))


(defun my-default-font-height-decrease ()
  "Decrease the value of the height parameter for the default font."
  (interactive)
  (let* ((default-face-height (face-attribute 'default :height)))
    (eval `(set-face-attribute 'default nil :height ,(- default-face-height my-default-face-height-increament)))
    (message "default font height is now %d" (face-attribute 'default :height))))


(defun my-default-font-height-reset ()
  "Reset the height value of default face back to my-default-face-height"
  (interactive)
  (eval `(set-face-attribute 'default nil :height my-default-face-height))
  (message "default font height is now %d" (face-attribute 'default :height)))

(define-key global-map (kbd "C-M-=")  'my-default-font-height-increase)
(define-key global-map (kbd "C-M--")  'my-default-font-height-decrease)
(define-key global-map (kbd "C-M-0")  'my-default-font-height-reset)

#+END_SRC

* gnutls

#+BEGIN_SRC emacs-lisp

;;gnutls

(add-hook 'after-init-time-hook (setq gnutls-min-prime-bits 4096))

#+END_SRC

* themes

#+BEGIN_SRC emacs-lisp

;;themes (use-package doom-themes :ensure t :defer t)

(use-package ample-theme
  :ensure t
  :defer t)

(use-package dracula-theme
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :ensure t
  :defer t)

(use-package soothe-theme
  :ensure t
  :defer t)

(use-package seti-theme
  :ensure t
  :defer t)

(use-package spacemacs-theme
  :ensure t
  :defer t)

(use-package solarized-theme
  :ensure t
  :defer t)

(use-package zenburn-theme
  :ensure t
  :defer t)

(use-package cyberpunk-theme
  :ensure t
  :defer t)

(use-package sublime-themes
  :ensure t
  :defer t)

(use-package flatland-theme
  :ensure t
  :defer t)

(use-package flatui-dark-theme
  :ensure t
  :defer t)

(use-package blackboard-theme
  :ensure t
  :defer t)

(use-package material-theme
  :ensure t
  :defer t)

(use-package moe-theme
  :ensure t
  :defer t)

(use-package darktooth-theme
  :ensure t
  :defer t)

(use-package danneskjold-theme
  :ensure t
  :defer t)

(use-package base16-theme
  :ensure t
  :defer t
  )

;; (use-package abyss-theme
;;   :ensure t
;;   :defer t)


;; (defun disable-all-themes ()
;;   "disable all active themes."
;;   (dolist (i custom-enabled-themes)
;;     (disable-theme i)))

;; (defadvice load-theme (before disable-themes-first activate)
;;   (disable-all-themes))

;; (add-hook 'after-make-frame-functions
;;           (lambda (frame)
;;               (select-frame frame)
;;               (if (display-graphic-p)
;;                (load-theme 'sanityinc-solarized-dark t) 
;;              (load-theme 'danneskjold t))))

;; (add-hook 'after-init-hook
;;        (if (display-graphic-p) 
;;            (load-theme 'sanityinc-solarized-dark t) 
;;          (load-theme 'danneskjold t)))

;; (add-hook 'after-init-hook 
;;        (progn
;;          (setq base16-theme-256-color-source 'colors)
;;          (setq base16-distinct-fringe-background nil)
;;          ;; (setq base16-highlight-mode-line 'box)
;;          (load-theme 'doom-solarized-dark t)))


(add-hook 'after-init-time-hook
          (progn
            (defadvice load-theme (after custom-faces-after-load-theme())
              "Insert an empty line when moving up from the top line."
              (let ((dafile "~/.emacs.d/custom_faces.el"))                   
                (if (file-exists-p dafile) (load-file dafile))))


            (ad-activate 'load-theme)

            (defadvice disable-theme (after custom-faces-after-disable-theme())
              "Insert an empty line when moving up from the top line."
              (let ((dafile "~/.emacs.d/custom_faces.el"))                   
                (if (file-exists-p dafile) (load-file dafile))))


            (ad-activate 'disable-theme)

            ))

(add-hook 'after-init-time-hook 
          (progn
            (setq base16-theme-256-color-source 'colors)
            (setq base16-distinct-fringe-background nil)
            (setq base16-highlight-mode-line 'box)
            (load-theme 'base16-embers t)
            ;; (load-file "~/.emacs.d/custom_faces.el")
            ))

(add-hook 'after-init-time-hook
          (load-file (concat user-emacs-directory "custom_faces.el")))

;; (load-theme 'manoj-dark t)

#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp

;;backups

(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backups" t))
      )
;; (setq auto-save-file-name-transforms
;;       `((".*" ,"~/.emacs.d/backups" t)))

#+END_SRC

* clipboard

#+BEGIN_SRC emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+END_SRC

* yes,no

#+BEGIN_SRC emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

* exec path form shell
#+BEGIN_SRC emacs-lisp

;;exec-path-from-shell
  (use-package exec-path-from-shell
    :ensure t
    ;; :defer 2
    ;; :after init
    :hook (after-init . (lambda () (require 'exec-path-from-shell)
                          (exec-path-from-shell-initialize)))
    ;; :config
    ;; (exec-path-from-shell-initialize)
    )

#+END_SRC

* libraries

#+BEGIN_SRC emacs-lisp

(use-package dash
  :ensure t)

(use-package f
  :ensure t)

(require 's)

(require 'color)

(require 'cl-lib)

#+END_SRC

* indentation stuff

#+BEGIN_SRC emacs-lisp

;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

#+END_SRC

* Sentences end with a single space

#+BEGIN_SRC emacs-lisp 

(setq sentence-end-double-space nil)

#+END_SRC

* autorevert

#+BEGIN_SRC emacs-lisp
  
;; Automatically reload files was modified by external program
(use-package autorevert
  :ensure nil
  :diminish
  :hook (after-init . global-auto-revert-mode))

#+END_SRC

* line-spacing

#+BEGIN_SRC emacs-lisp

;; (setq-default line-spacing 1)
;; (setq-default line-spacing 1)
(add-hook 'minibuffer-setup-hook (lambda () (setq line-spacing nil)))

#+END_SRC

* scrolling

** horizontal scrolling

#+BEGIN_SRC emacs-lisp

(add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'html-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'web-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'org-mode (lambda () (setq truncate-lines nil)))
;; (add-hook 'eww-after-render-hook (lambda () (setq truncate-lines t)))

(setq hscroll-margin 0)

(global-set-key (kbd "<mouse-7>") '(lambda ()
                                     (interactive)
                                     (scroll-left 4)))

(global-set-key (kbd "<mouse-6>") '(lambda ()
                                     (interactive)
                                     (scroll-right 4)))

#+END_SRC

** smooth-scrolling

#+BEGIN_SRC emacs-lisp

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

;; ;; nice scrolling
;; (setq scroll-margin 0
;;       scroll-conservatively 100000
;;       scroll-preserve-screen-position 1)


#+END_SRC

* input method

#+BEGIN_SRC emacs-lisp

;;input-method

(defun myinput-settings ()
  "Settings based on input method."
  (cond ((string= current-input-method "ethiopic")
         (progn (setq ethio-primary-language 'amharic)
                (ethio-select-a-translation)))
        (t nil)))

(add-hook 'input-method-activate-hook #'myinput-settings)

#+END_SRC

* imenu
#+BEGIN_SRC emacs-lisp

(define-key global-map (kbd "M-ι") 'imenu)
  
#+END_SRC

* symbol-overlay

#+BEGIN_SRC emacs-lisp

;; symbol overlay
(use-package symbol-overlay
  :ensure t
  :defer t
  :hook (prog-mode . symbol-overlay-mode)
        (html-mode . symbol-overlay-mode)
        (web-mode . symbol-overlay-mode)
        (css-mode . symbol-overlay-mode)
        (yaml-mode . symbol-overlay-mode)
        (toml-mode . symbol-overlay-mode)
        (json-mode . symbol-overlay-mode)
  ;; :config
        ;; (progn (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")
        ;;        (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange))))
t    ;; (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    ;; (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    ;; (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)
)

;; (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")

;; (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange)))

#+END_SRC

* hydra

#+BEGIN_SRC emacs-lisp

;;hydra
(use-package hydra
  :defer 0.4
  ;; :hook (after-init . (lambda () (require 'hydra)))
  :ensure t
  :defines (ibuffer-mode-map dired-mode-map projectile-mode-map smartparens-mode-map)
  :config
  (load-file (concat user-emacs-directory "hydras.el"))
  (add-hook 'origami-mode-hook (lambda () (define-key prog-mode-map (kbd "η o") 'hydra-folding/body)))
  (add-hook 'ibuffer-mode-hook (lambda () (define-key ibuffer-mode-map (kbd "η .") 'hydra-ibuffer-main/body)))
  (add-hook 'dired-mode-hook (lambda () (define-key dired-mode-map (kbd "η .") 'hydra-dired/body)))
  ;; (add-hook 'projectile-mode-hook (lambda () (define-key projectile-mode-map (kbd "η p") 'hydra-projectile/body)))
)

#+END_SRC

* major-mode-hydra/pretty-hydra

#+BEGIN_SRC emacs-lisp

(use-package major-mode-hydra
  :ensure t
  :after hydra
  :bind
  ("M-SPC" . major-mode-hydra)
)

(use-package pretty-hydra
  :ensure t
  :defer t
  :after hydra)

#+END_SRC

* ibuffer
  
#+BEGIN_SRC emacs-lisp

;; ibuffer
(use-package ibuffer
 :ensure nil
 :defer t
  :bind (("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ("η-." . hydra-ibuffer-main/body)
         ("C-." . hydra-ibuffer-main/body)
         )
  :hook (ibuffer-mode . hydra-ibuffer-main/body)

)

#+END_SRC

* ediff

#+BEGIN_SRC emacs-lisp

  (use-package ediff
  :ensure nil
  :hook(;; show org ediffs unfolded
        (ediff-prepare-buffer . outline-show-all)
        ;; restore window layout when done
        (ediff-quit . winner-undo))
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-merge-split-window-function 'split-window-horizontally))


#+END_SRC

* ivy,consel and swiper

#+BEGIN_SRC emacs-lisp

  ;;ivy,console and swiper

  (use-package flx
  :ensure t
  :defer t)

;; ivy for everything
(use-package ivy
  :ensure t
  :after init
  :diminish ivy-mode
  :demand t
  :init
  (require 'flx)
  ;; set ivy height
  (setq ivy-height 10)
  ;; make sure it always stays that high
  (setq ivy-fixed-height-minibuffer t)
  ;; virtual buffers - combines many good things into one command
  (setq ivy-use-virtual-buffers t)
  ;; full file names - useful when multiple files have same names
  (setq ivy-virtual-abbreviate 'full)
  ;; fuzzy everywhere except when searching for something
  (setq ivy-re-builders-alist
    '((swiper . ivy--regex-plus)
      (swiper-isearch . ivy--regex-plus)
      (counsel-ag . ivy--regex-plus)
      (counsel-grep . ivy--regex-plus)
      (counsel-rg . ivy--regex-plus)
      (counsel-grep-or-swiper . ivy--regex-plus)
      (t . ivy--regex-fuzzy)))

  :bind ("C-x b" . ivy-switch-buffer)
  ;;              ("C-x C-b" . ivy-switch-buffer)
  ("C-c C-r" . ivy-resume)
  :config (ivy-mode 1)

)


  ;; (use-package ivy :demand
  ;;   :ensure t
  ;;   :after (init)
  ;;   :defer t
  ;;   :config (
  ;; 	   ;; (require 'flx)

  ;; 	   (setq ivy-re-builders-alist
  ;; 		 '((swiper . ivy--regex-plus)
  ;; 		   (swiper-isearch . ivy--regex)
  ;; 		   (counsel-grep  . ivy--regex-plus)
  ;; 		   (counsel-git-grep . ivy--regex-plus)
  ;; 		   (t . ivy--regex-fuzzy)))

  ;; 	   (setq ivy-initial-inputs-alist nil)
  ;; 	   (setq ivy-format-function 'ivy-format-function-line)
  ;; 	   )

  ;; 	   (setq ivy-use-virtual-buffers t
  ;; 		 ivy-count-format "%d/%d ")
  ;; 	   ;; (setq ivy-use-virtual-buffers t)
  ;; 	   (setq ivy-display-style 'fancy)


  ;; 	   ;; (ivy-mode 1)

  ;; 	   :bind ("C-x b" . ivy-switch-buffer)
  ;; 	   ;;              ("C-x C-b" . ivy-switch-buffer)
  ;; 	   ("C-c C-r" . ivy-resume))

  (use-package counsel
    :ensure t
    :defer t
    :bind(
	  ("C-x C-f" . counsel-find-file)
	  ("M-x" . counsel-M-x)
	  ("M-y" . counsel-yank-pop)
	  ;; :map ivy-minibuffer-map
	  ;; ("M-y" . ivy-next-line)
	  :map ivy-minibuffer-map
	  ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure t
    :defer t
    :bind (("M-s s" . swiper-isearch)
	   ;; ("C-s" . swiper-isearch)
	   ;; ("C-r" . swiper-backward)
	   ))

  (use-package ivy-hydra
    :ensure t
    :after (ivy hydra))

#+END_SRC

* line-number

#+BEGIN_SRC emacs-lisp

;;line-number

;; ;; use customized linum-format: add a addition space after the line number                                                                      
;; (setq linum-format (lambda (line) (propertize (format (let ((w (length (number-to-string (count-lines (point-min) (point-max)))))) (concat "%" 
;;                                                                                                                                         (number-to-string w) "d  ")) line) 'face 'linum)))


(add-hook 'after-init-hook (lambda ()
                             (if (version< emacs-version "26.0")
                                 (linum-relative-global-mode)
                               (progn  (setq display-line-numbers-type (quote relative))
                                       (setq display-line-numbers-grow-only t)
                                       (setq display-line-numbers-width-start t)
                                       ;; (setq display-line-numbers-width 2)
                                       (global-display-line-numbers-mode)))))

#+END_SRC

* nlinum-mode

#+BEGIN_SRC emacs-lisp

;;nlinum mode

(use-package nlinum
  :ensure t
  :defer t
  :config  (setq nlinum-highlight-current-line t)
           (setq nlinum-use-right-margin t)
  ;; :hook (after-init . global-nlinum-mode)
  )

#+END_SRC

* line-highlight
 
#+BEGIN_SRC emacs-lisp

;;line-highlight

;;(add-hook 'after-init-hook 'global-hl-line-mode t)
(use-package hl-line
  ;; Highlights the current line
  :hook ((prog-mode text-mode conf-mode special-mode org-mode lisp-interaction) . (lambda () (hl-line-mode t)))
  :after (init)
  :defer t
  :config
  ;; Not having to render the hl-line overlay in multiple buffers offers a tiny
  ;; performance boost. I also don't need to see it in other buffers.
  (setq hl-line-sticky-flag nil
        global-hl-line-sticky-flag nil))

#+END_SRC

* show-parens

#+BEGIN_SRC emacs-lisp

;; (add-hook 'after-init-hook (lambda () (show-paren-mode t)))
;; (add-hook 'after-change-major-mode-hook (lambda () (show-paren-mode 1)))
;; (add-hook 'after-init-mode-hook (lambda () (show-paren-mode 1)))

;; (show-paren-mode 1)

#+END_SRC

* mode-line

#+BEGIN_SRC emacs-lisp

(use-package doom-modeline
  :ensure t
  :defer t
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Mode-line
  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 15)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 2)

  ;; How to detect the project root.
  ;; The default priority of detection is `ffip' > `projectile' > `project'.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'project)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Whether display icons in mode-line. Respects `all-the-icons-color-icons'.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  ;; Whether display the icon for `major-mode'. Respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; Respects `doom-modeline-major-mode-icon'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; Respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  ;; (setq doom-modeline-unicode-fallback nil)

  ;; Whether display the minor modes in mode-line.
  (setq doom-modeline-minor-modes (featurep 'minions))

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the perspective name. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; Whether display the `lsp' state. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e t)

  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to dispaly as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
)

#+END_SRC

* key-chords

#+BEGIN_SRC emacs-lisp

;;keychords
(use-package key-chord
  :ensure t)

#+END_SRC

* use-package-chords

#+BEGIN_SRC emacs-lisp

;;use-package-chords
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

#+END_SRC

* trailing white spaces

#+BEGIN_SRC emacs-lisp
;;settings for trailng whitespaces
;;(setq show-trailing-whitespace t)
;;(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'html-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'css-mode-hook (lambda () (setq show-trailing-whitespace t)))
;;(add-hook 'org-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'markdown-mode-hook (lambda () (setq show-trailing-whitespace t)))

#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp

;;beacon
(use-package beacon
  :ensure t
  :defer 3
  :config (beacon-mode 1))

#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp

;;undo-tree

(use-package undo-tree
  :diminish undo-tree-mode
  :hook (after-init . global-undo-tree-mode)
  :config (setq undo-tree-visualizer-timestamps t)
          (setq undo-tree-visualizer-diff t))

#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp

;;which mode

(use-package which-key
  :ensure t
  :hook (after-init . which-key-mode)
  :config (which-key-enable-god-mode-support)
)

#+END_SRC

* git

** git-gutter

#+BEGIN_SRC emacs-lisp

(use-package git-gutter
  :ensure t
  :defer t)

#+END_SRC

** git-timemachine

#+BEGIN_SRC emacs-lisp

(use-package git-timemachine
  :ensure t
  :defer t)

#+END_SRC

** magit & forge

#+BEGIN_SRC emacs-lisp

;;magit

(use-package magit
  :ensure t
  :config (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  :defer t)

(global-set-key (kbd "C-C g m") 'magit-status)
(global-set-key (kbd "H-g") 'magit-status)


(use-package forge
  :ensure t
  :defer t
  :after magit)

;; (use-package magithub
;;   :after magit
;;   :ensure t
;;   :config (magithub-feature-autoinject t))

#+END_SRC

* monky

#+BEGIN_SRC emacs-lisp

;;monky

(use-package monky
  :ensure t
  :defer t)

#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp

;;yasnippet

(use-package yasnippet
  :ensure t
  :defer 1.5
  ;; :hook (after-init . (lambda () yas-global-mode 1))
  :diminish yas-minor-mode
  :config (use-package yasnippet-snippets
          :ensure t
          :defer t)
  (yas-global-mode 1))

;;(add-hook 'prog-mode-hook 'yas-minor-mode)

#+END_SRC

* flycheck

#+BEGIN_SRC emacs-lisp

;;flycheck

(use-package flycheck
:ensure t
:defer t
:hook (prog-mode . flycheck-mode)
:config (progn
	  (setq flycheck-standard-error-navigation nil)
        (global-flycheck-mode t)))

;; (add-hook 'prog-mode-hook
;;           (lambda () (flyspell-prog-mode)))
;(add-hook 'prog-mode-hook 'flycheck-mode)

#+END_SRC

* flyspell

#+BEGIN_SRC emacs-lisp

(use-package flyspell
;;  :ensure t
  :defer t
  :hook ((prog-mode . flyspell-prog-mode)
	 (text-mode . flyspell-mode))
  :config
  (cond
           ((executable-find "hunspell")
            (setq ispell-program-name "hunspell")
            (setq ispell-extra-args '("-d en_US")))
           ((executable-find "aspell")
            (setq ispell-program-name "aspell")
            (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))

  ;; Sets flyspell correction to use two-finger mouse click
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  )

#+END_SRC

* expand-region

#+BEGIN_SRC emacs-lisp

;;expand-region

(use-package expand-region
  :ensure t
  :defer t
  :bind (("C-=". er/expand-region)))

#+END_SRC

* avy

#+BEGIN_SRC emacs-lisp

;;avy

(use-package avy
  :ensure t
  :defer t
  :bind (("C-c v c" . avy-goto-char)
  ("C-c v 2" . avy-goto-char-2)
  ("C-c v w" . avy-goto-word-1)
  ("C-c v l" . avy-goto-line)
  :map isearch-mode-map
       ("C-'" . avy-isearch))
 )

#+END_SRC


#+BEGIN_SRC emacs-lisp

(use-package ace-link
  :demand t
  :after (:any elbank helpful info eww)
  :config
  (progn
(ace-link-setup-default)))

#+END_SRC

* ace-window

#+BEGIN_SRC emacs-lisp

;;ace-window

(use-package ace-window
  :ensure t
  :bind ("H-<f12>" . ace-window)
        ("C-c <f12>" . ace-window))

#+END_SRC

* ag

#+BEGIN_SRC emacs-lisp

;;ag

(use-package ag
  :ensure t
  :defer t)

#+END_SRC

* rg

#+BEGIN_SRC emacs-lisp

(use-package rg
  :ensure t
  :defer t)

#+END_SRC

* smart-hungry delete

#+BEGIN_SRC emacs-lisp

(use-package smart-hungry-delete
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :defer t
;;  :config (smart-hungry-delete-add-default-hooks)
)

#+END_SRC

* ws-butler

#+BEGIN_SRC emacs-lisp

(use-package ws-butler
  :ensure t
  :defer t
  :hook (prog-mode . ws-butler-mode))

#+END_SRC

* multiple-cursors

#+BEGIN_SRC emacs-lisp

;;multiple-cursors

(use-package multiple-cursors
  :ensure t
  :defer t
  :config (define-key mc/keymap (kbd "<return>") nil)
  :bind ;;("H-\\" . mc/mark-all-like-this)
        ("C-S-<mouse-1>" . mc/add-cursor-on-click))

#+END_SRC

* smartparens

#+BEGIN_SRC emacs-lisp

;;smartparens

(use-package smartparens-config
    :ensure smartparens
    :defer t
    :hook ((prog-mode . smartparens-mode)
	   (markdown-mode . smartparens-mode)
	   (smartparens-mode-hook . (lambda () (sp-local-pair 'web-mode  "<%" "%>" :wrap "C-%"))))
    :config
    (progn
      (show-smartparens-global-mode t)
))



;; (add-hook 'prog-mode-hook #'smartparens-mode)
;; (add-hook 'markdown-mode-hook #'smartparens-mode)
;; (add-hook 'smartparens-mode-hook (lambda () (sp-local-pair 'web-mode  "<%" "%>" :wrap "C-%")))

#+END_SRC

* rainbow-delimiters

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

* company

#+BEGIN_SRC emacs-lisp

;;company

(use-package company
  :ensure t
  :defer t
  :config (require 'company)
;;  (global-set-key (kbd "<backtab>") 'company-complete-common)
  (global-set-key (kbd "H-<SPC>") 'company-complete-common)
  (global-set-key (kbd "C-`") 'company-yasnippet)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))

(add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

* eshell

#+BEGIN_SRC emacs-lisp

;;eshell

(add-hook 'eshell-mode-hook '(lambda ()
                               (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)))
(add-hook 'eshell-mode-hook '(lambda ()
                               (define-key eshell-mode-map (kbd "<backtab>") 'completion-at-point)))


(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
(add-hook 'eshell-mode-hook
          '(lambda()
             (local-set-key (kbd "H-l") 'eshell-clear-buffer)))


(add-hook 'eshell-mode-hook
          (defun my-eshell-mode-setup ()
            (remove-hook 'eshell-output-filter-functions
                         'eshell-postoutput-scroll-to-bottom)))

(add-hook 'eshell-mode-hook '(lambda ()
                               (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
                                 "ncftp" "pine" "tin" "trn" "elm" "vim"
                                 "htop")
                                 )
                               ;;(add-to-list 'eshell-visual-commands "vim")
))
(add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'eshell-mode-hook (lambda () (nlinum-mode -1)))
(add-hook 'eshell-mode-hook (lambda () (setq show-trailing-whitespace nil)))

#+END_SRC

* shell-mode

#+BEGIN_SRC emacs-lisp

;;shell-mode

(add-hook 'shell-mode-hook '(lambda ()
                               (define-key shell-mode-map (kbd "<tab>") 'completion-at-point)))
(add-hook 'shell-mode-hook '(lambda ()
                               (define-key shell-mode-map (kbd "<backtab>") 'completion-at-point)))

#+END_SRC

* term-mode

#+BEGIN_SRC emacs-lisp

;;(defun my-display-line-number (lambda () (display-line-numbers-mode -1)))

(add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'term-mode-hook (lambda () (nlinum-mode -1)))
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))

#+END_SRC

* comint-mode

#+BEGIN_SRC emacs-lisp

;;conmint-mode

(setq comint-scroll-show-maximum-output nil)
(setq comint-scroll-to-bottom-on-input nil)
(setq comint-scroll-to-bottom-on-output nil)
(add-hook 'comint-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'comint-mode-hook (lambda () (nlinum-mode -1)))
(add-hook 'comint-mode-hook (lambda () (setq show-trailing-whitespace nil)))

#+END_SRC

* all-the-icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :defer t
  :hook   (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :ensure t
;;  :defer 1
  :after ivy
  :config
  (all-the-icons-ivy-setup))


#+END_SRC

* lsp-mode

#+BEGIN_SRC emacs-lisp

(use-package lsp-mode
  :ensure t
  :defer t
  :hook (ruby-mode)
  :config

  ;; change nil to 't to enable logging of packets between emacs and the LS
  ;; this was invaluable for debugging communication with the MS Python Language Server
  ;; and comparing this with what vs.code is doing
  (setq lsp-print-io nil)

  ;; lsp-ui gives us the blue documentation boxes and the sidebar info
  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  ;; install LSP company backend for LSP-driven completion
  (use-package company-lsp
    :ensure t
    :config
    (push 'company-lsp company-backends))

  (require 'lsp-clients)
  ;; (add-hook 'typescript-mode-hook 'lsp)
  ;; (add-hook 'js2-mode-hook 'lsp)
  ;; (add-hook 'php-mode 'lsp)
  ;; (add-hook 'css-mode 'lsp)
  ;; (add-hook 'ruby-mode 'lsp)
  ;; (add-hook 'web-mode 'lsp)
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-file-watchers nil)
  )

;;(use-package company-lsp :ensure t :defer t :hook (lsp-mode))

;; (setq lsp-language-id-configuration '(;; (java-mode . "java")
;; 				      ;; (python-mode . "python")
;; 				      ;; (gfm-view-mode . "markdown")
;; 				      ;; (rust-mode . "rust")
;; 				      (ruby-mode . "ruby")
;; 				      ;; (css-mode . "css")
;; 				      ;; (xml-mode . "xml")
;; 				      ;; (c-mode . "c")
;; 				      ;; (c++-mode . "cpp")
;; 				      ;; (objc-mode . "objective-c")
;; 				      ;; (web-mode . "html")
;; 				      ;; (html-mode . "html")
;; 				      ;; (sgml-mode . "html")
;; 				      ;; (mhtml-mode . "html")
;; 				      ;; (go-mode . "go")
;; 				      ;; (haskell-mode . "haskell")
;; 				      ;; (php-mode . "php")
;; 				      ;; (json-mode . "json")
;; 				      ;; (js2-mode . "javascript")
;; 				      ;;(typescript-mode . "typescript")

;; 				      ))

;; LSP debugging

;;(setq lsp-print-io t)

;;(setq lsp-trace t)

;;(setq lsp-print-performance t)

(use-package dap-mode
  :ensure t ;;:after lsp-mode
  :defer t
  :hook (lsp-mode . dap-mode)
  :config
    ;;(dap-mode t)
    (dap-ui-mode t)
    (require 'dap-ruby))

#+END_SRC

* C/C++

#+BEGIN_SRC emacs-lisp

;;C/C++

(use-package company-c-headers
  :after company
  :defer t
  :ensure t)


(use-package irony
  :ensure t
  :defer t
  :init ;(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
  :hook (c++-mode . (lambda () irony-mode 1))
        (c-mode . (lambda () (irony-mode 1)))
        (objc-mode . (lambda () ('irony-mode 1)))
	(irony-mode-hook . irony-cdb-autosetup-compile-options)
  :config (add-to-list 'company-backends 'company-irony)
          (add-to-list 'company-backends 'company-c-headers)
          (flycheck-irony-setup)
          (irony-eldoc)
         ;; (add-hook 'irony-mode-hook #'irony-eldoc)
)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(use-package company-irony
  :ensure t
  :defer t)


(use-package flycheck-irony
  :ensure t
  :defer t)

;; (eval-after-load 'flycheck
;;   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

(use-package irony-eldoc
  :ensure t
  :defer t)
;;(add-hook 'irony-mode-hook #'irony-eldoc)

#+END_SRC

* rust

#+BEGIN_SRC emacs-lisp

;; rust

(use-package flycheck-rust
  :ensure t
  :after rust-mode
  :config
;;  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  (add-hook 'rust-mode-hook 'flycheck-mode)) ;;quite unecessary but I will try it's effects


(use-package racer
  :ensure t
  :defer t
  :init
  (setq company-tooltip-align-annotations t)
  (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

(use-package rust-mode
  :ensure t
  :defer t
  :hook (rust-mode . racer-mode)
        (racer-mode . eldoc-mode)
  :config
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
        (setq rust-format-on-save t))

(use-package cargo
  :ensure t
  :defer t
  :hook (rust-mode . cargo-minor-mode)
  :config
  (setq compilation-scroll-output t))

#+END_SRC

* go

#+BEGIN_SRC emacs-lisp

;;go

(use-package go-mode
  :ensure t
  :defer t)

(use-package company-go
  :ensure t
  :defer t
  :hook (go-mode . (lambda ()
                     (set (make-local-variable 'company-backends) '(company-go))
                     (company-mode))))

(use-package go-dlv
  :ensure t
  :defer t)

#+END_SRC

* ruby

#+BEGIN_SRC emacs-lisp

;;ruby

(use-package inf-ruby
  :ensure t
  :defer t)

(use-package robe
  :ensure t
  :defer t
  :bind ("C-c r s" . robe-start)
  :hook (ruby-mode . robe-mode)
  :config (push 'company-robe company-backends))

;  (add-hook 'ruby-mode-hook 'robe-mode))

;; (eval-after-load 'company
;;   '(push 'company-robe company-backends))

#+END_SRC

* python

#+BEGIN_SRC emacs-lisp

(use-package company-jedi
  :defer t
  :ensure t
  )

(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)

#+END_SRC

* lua

#+BEGIN_SRC emacs-lisp

;;lua

(use-package lua-mode
  :ensure t
  :defer t)

(use-package company-lua
  :ensure t
  :defer t
  :hook
  (company-mode . (lambda () (push 'company-lua company-backends))))

#+END_SRC

* scheme

#+BEGIN_SRC emacs-lisp

;;scheme

(use-package geiser
  :ensure t
  :defer t
  :bind (:map scheme-mode-map
              ("C-c C-c" . geiser-eval-last-sexp))
  :hook (scheme-mode)
  :init
    (setq geiser-default-implementation 'guile)
    (setq geiser-guile-binary "/usr/bin/guile2.2")
    (setq geiser-chicken-binary "~/.nix-profile/bin/csi")
    (setq geiser-chibi-binary "~/.nix-profile/bin/chibi-scheme"))

#+END_SRC

* common-lisp

#+BEGIN_SRC emacs-lisp

;; common-lisp

(use-package slime-company
  :ensure t
  :defer t)

(use-package slime
  :ensure t
  :config (setq inferior-lisp-program "~/.nix-profile/bin/sbcl")
          (setq slime-contribs '(slime-fancy slime-company))
  :bind (:map slime-mode-map
              ("C-t C-e" . slime-eval-last-expression))
  :defer t)

#+END_SRC

* web

#+BEGIN_SRC emacs-lisp

;;web-mode

(use-package emmet-mode
  :ensure t
  :hook (sgml-mode css-mode web-mode))


 (use-package web-mode
   :ensure t
   :defer t
   :mode (;;"\\.html\\'"
          ;;"\\.css?\\'"
          "\\.phtml\\'"
          "\\.erb\\'"
          ;;"\\.html?\\'"
          )
   :config
   (setq web-mode-markup-indent-offset 2)
 ;  (setq web-mode-engines-alist
 ;        '(("django" . "focus/.*\\.html\\'")
 ;          ("ctemplate" . "realtimecrm/.*\\.html\\'")))
   (setq web-mode-enable-auto-pairing nil)
;;   (add-hook 'web-mode-hook (lambda () (require 'emmet-mode)
 )


 (use-package company-web
   :defer t
   :hook (('web-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
	  ('mhtml-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
	  ('html-mode . (lambda () (add-to-list 'company-backends 'company-web-html))))
 )

#+END_SRC

* javascript

  #+BEGIN_SRC emacs-lisp

  ;;javascript

  (use-package js2-mode
    :ensure t
    :defer t
    :mode "\\.js\\'"
    :interpreter "node")

  (add-to-list 'load-path "~/user_softs/npm_related/node_modules/tern/emacs/")
  (autoload 'tern-mode "tern.el" nil t)
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
  ;;  (add-hook 'web-mode-hook (lambda () (tern-mode t)))

  (use-package company-tern
    :ensure t
    :defer t
    :hook
    (company-mode . (lambda () (push 'company-tern company-backends)))
    :config
    (defadvice company-tern (before web-mode-set-up-ac-sources activate)
      "Set `tern-mode' based on current language before running company-tern."
      (if (equal major-mode 'web-mode)
	  (let ((web-mode-cur-language
		 (web-mode-language-at-pos)))
	    (if (or (string= web-mode-cur-language "jsx")
		    (string= web-mode-cur-language "javascript"))
		(unless tern-mode (tern-mode))
	      (if tern-mode (tern-mode -1)))))))

  #+END_SRC

* skewer

 #+BEGIN_SRC emacs-lisp

 ;;skewer

 (use-package skewer-mode
   :ensure t
   :defer t
   :hook (web-mode, html-mode, js2-mode)
   :config
   (skewer-setup))

 ;(use-package skewer-repl
 ;  :ensure t
 ;  :defer t
 ;  :config (define-key skewer-repl-mode-map (kbd "C-c C-z") #'quit-window))

 #+END_SRC

* ocaml

#+BEGIN_SRC emacs-lisp

(use-package tuareg
  :mode ("\\.ml[ily]?$" . tuareg-mode))

#+END_SRC

* crystal

#+BEGIN_SRC emacs-lisp

(use-package crystal-mode
  :mode ("\\.cr$" . crystal-mode))

#+END_SRC

* php

#+BEGIN_SRC emacs-lisp

;;php

(use-package php-mode
  :ensure t
  :mode "\\.php\\'"
  ;;:config (require 'php-extras)
)

(use-package company-php
  :ensure t
  :defer t)

;; (use-package php-extras
;;   :ensure t
;;   :defer t)

;; (eval-after-load 'php-mode
;;   (require 'php-extras))

(add-hook 'php-mode-hook
          '(lambda ()
             (require 'company-php)
             (company-mode t)
;;             (ac-php-core-eldoc-setup) ;; enable eldoc
             (make-local-variable 'company-backends)
             (add-to-list 'company-backends 'company-ac-php-backend)))
;(eval-after-load 'php-mode
;  (require 'php-extras))

#+END_SRC

* csv

#+BEGIN_SRC emacs-lisp

;;csv

(use-package csv-mode
  :ensure t
  :defer t)

#+END_SRC

* yaml,toml and json

#+BEGIN_SRC emacs-lisp

;;yaml,toml and json

(use-package yaml-mode
  :ensure t
  :defer t)
(use-package toml-mode
  :ensure t
  :defer t)
(use-package json-mode
  :ensure t
  :defer t)

#+END_SRC

* markdown

#+BEGIN_SRC emacs-lisp

;;markdown

(use-package markdown-mode
  :ensure t
  :defer t
  :config
  (use-package markdown-mode+
    :ensure t)
  (use-package markdown-preview-mode
    :ensure t)
  (use-package markdown-toc
    :ensure t))
(autoload 'markdown-mode "markdown-mode" "Major mode for Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
(setq markdown-command "pandoc -c ~/.emacs.d/github-pandoc.css --from gfm -t html5 --mathjax --highlight-style pygments --standalone")

#+END_SRC

* latex/auctex

#+BEGIN_SRC emacs-lisp

;;latex/auctex

  (use-package auctex
    :ensure t
    :defer t)

  (use-package  company-auctex
  :ensure t
  :defer t
  :config  (company-auctex-init))

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'company-auctex-init)

(add-hook 'TeX-mode-hook
          (lambda ()
            (setq TeX-command-extra-options "-shell-escape")))

#+END_SRC

* eww

#+BEGIN_SRC emacs-lisp

(setq shr-inhibit-images 1)

#+END_SRC

* nov.el

#+BEGIN_SRC emacs-lisp

(use-package nov
  :ensure t
  :defer t
  :mode ("\\.epub\\'" . nov-mode))

(add-hook 'nov-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'nov-mode-hook (lambda () (nlinum-mode -1)))


#+END_SRC

* restclient

#+BEGIN_SRC emacs-lisp

;;restclient

(use-package restclient
  :ensure t
  :defer t)

#+END_SRC

* realgud

#+BEGIN_SRC emacs-lisp

(use-package realgud
  :ensure t
  :defer t)

#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp

;; projectile

(use-package projectile
  :ensure t
  :defer 0.5
  :hook (prog-mode-hook . projectile-mode)
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'ivy)
)

;; (add-hook 'prog-mode-hook 'projectile-mode)
;; (add-hook 'projectile-mode-hook 'counsel-projectile-mode)

#+END_SRC

* ecb

#+BEGIN_SRC emacs-lisp

;;ecb

(use-package ecb
  :ensure t
  :defer t
  :init (setq ecb-tip-of-the-day nil)
        (custom-set-variables `(ecb-options-version "2.50"))
  :bind (( "C-c e b" . ecb-minor-mode)
         :map ecb-mode-map
         ("H-1" . 'ecb-goto-window-edit1)
         ("H-2" . 'ecb-goto-window-directories)
         ("H-3" . 'ecb-goto-window-sources)
         ("H-4" . 'ecb-goto-window-methods)
         ("H-5" . 'ecb-goto-window-history)))

#+END_SRC

* org

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "H-o l") 'org-store-link)
(global-set-key (kbd "H-o a") 'org-agenda)
(global-set-key (kbd "H-o c") 'org-capture)
(global-set-key (kbd "H-o b") 'org-switchb)

(global-set-key (kbd "C-c 0 l") 'org-store-link)
(global-set-key (kbd "C-c 0 a") 'org-agenda)
(global-set-key (kbd "C-c 0 c") 'org-capture)
(global-set-key (kbd "C-c 0 b") 'org-switchb)

#+END_SRC

** org-fontify

#+BEGIN_SRC emacs-lisp

;;org fontify

(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)

#+END_SRC

** ox-md

#+BEGIN_SRC emacs-lisp

;;org-md

(add-hook 'org-mode-hook (lambda () (require 'ox-md nil t)))

#+END_SRC

** ox-beamer

#+BEGIN_SRC emacs-lisp

;;org-beamer

;; (eval-after-load "org"
;;  '(require 'ox-beamer nil t))
(add-hook 'org-mode-hook (lambda () (require 'ox-beamer nil t)))

#+END_SRC

** ox-odt

#+BEGIN_SRC emacs-lisp

;;org-odt

 ;; (eval-after-load "org"
 ;;  '(require 'ox-odt nil t))
(add-hook 'org-mode-hook (lambda () (require 'ox-md nil t)))

#+END_SRC

** org-babel

#+BEGIN_SRC emacs-lisp

;;org-babel
(defun my-org-bable-setup ()
  (if (version< emacs-version "26.0")
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((sh . true) (python . true) (ruby . true)
         (emacs-lisp .true) (perl . true)))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . true) (python . true) (ruby . true)
       (emacs-lisp .true) (perl . true)))))

(add-hook 'org-mode-hook 'my-org-bable-setup)

#+END_SRC

** ox-gfm

#+BEGIN_SRC emacs-lisp

;;org-gfm

(use-package ox-gfm :ensure t :defer t)
;; (eval-after-load "org"
;;   '(require 'ox-gfm nil t))
(add-hook 'org-mode-hook (lambda () (require 'ox-md nil t)))

#+END_SRC

** org-latex with pygment minted

#+BEGIN_SRC emacs-lisp

;;org-latex

;pygment minted
					;(require 'org-latex)
(add-hook 'org-mode-hook (lambda () 
			   (require 'ox-latex)
			   (add-to-list 'org-latex-packages-alist '("" "minted"))
			   (setq org-latex-listings 'minted)

			   (setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
			   (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))

			   ;; (setq org-latex-pdf-process
			   ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
			   ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
			   ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

			   ;; (add-to-list 'load-path "~/.emacs.d/lisp/org-utf-to-xetex")
			   ;; (require 'org-utf-to-xetex)
			   ;; (add-hook 'org-mode-hook #'org-utf-to-xetex-prettify)

			   (setq org-latex-compiler "xelatex")
			   (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
			   (setq-default TeX-engine 'xetex)
			   (setq-default TeX-PDF-mode t)
			   (add-to-list 'org-latex-packages-alist '("" "fontspec"))))


#+END_SRC

** htmlize

#+BEGIN_SRC emacs-lisp

;;htmlize

;;(use-package org :ensure t)
(use-package htmlize :ensure t :defer t
  :config
  (setq org-html-html5-fancy t
        org-html-doctype "html5")

  (setq org-html-html5-fancy t
        org-html-doctype "html5"))
;;; Loading custom backend
;(add-to-list 'load-path "lisp/")
;(load-file "~/.emacs.d/lisp/pelican-html.el")
;(use-package pelican-html :ensure t :defer t :hook(org-mode))

#+END_SRC

** xelatex

#+BEGIN_SRC emacs-lisp

;;xelatex

;; (setq org-latex-to-pdf-process 
;;   '("xelatex -interaction nonstopmode %f"
;;      "xelatex -interaction nonstopmode %f")) ;; for multiple passes

#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp

;;org-bullets

(use-package org-bullets 
  :ensure t
  :defer t
  :hook (org-mode . (lambda () (org-bullets-mode 1))))

(add-hook 'org-mode-hook (lambda () (org-bullets-mode)))

#+END_SRC

** org-tree-slide

#+BEGIN_SRC emacs-lisp

;;org-tree-slide

(use-package org-tree-slide
  :ensure t
  :defer t)
(define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
(define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)

(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree))

#+END_SRC

** epresent

#+BEGIN_SRC emacs-lisp

;;epresent

(use-package epresent
  :ensure t
  :defer t)

#+END_SRC

** ox-pandoc
#+BEGIN_SRC emacs-lisp

;;ox-pandoc
(use-package ox-pandoc
  :ensure t
  :defer t
  :hook (org-mode . (lambda () (require 'ox-pandoc))))

#+END_SRC

** ob-twbs

#+BEGIN_SRC emacs-lisp

(use-package ox-twbs
    :ensure t
    :defer t
    :hook (org-mode . (lambda () (require 'ox-twbs))))

#+END_SRC

** ob-epub

#+BEGIN_SRC emacs-lisp

(use-package ox-epub
    :ensure t
    :defer t
    :hook (org-mode . (lambda () (require 'ox-epub))))

#+END_SRC

** ob-lua

#+BEGIN_SRC emacs-lisp

 ;; (eval-after-load "org"
 ;;  '(require 'ob-lua nil t))
(add-hook 'org-mode-hook (lambda () (require 'ob-lua nil t)))

#+END_SRC

** org-pdfview

#+BEGIN_SRC emacs-lisp

(use-package org-pdfview
  :defer t
  :hook (org-mode . (lambda () (require 'org-pdfview)))
  :config (add-to-list 'org-file-apps 
             '("\\.pdf\\'" . (lambda (file link)
                                     (org-pdfview-open link))))

  :ensure t)
;; (eval-after-load 'org '(require 'org-pdfview))

;; (add-to-list 'org-file-apps 
;;              '("\\.pdf\\'" . (lambda (file link)
;;                                      (org-pdfview-open link))))

#+END_SRC

** interleave

#+BEGIN_SRC emacs-lisp
(use-package interleave
  :ensure t
  :defer t)
#+END_SRC

** toc-org

#+BEGIN_SRC emacs-lisp

(use-package toc-org
  :ensure t
  :defer t
  :hook (org-mode . toc-org-mode))

#+END_SRC

* org-beautify

#+BEGIN_SRC emacs-lisp

;;org-beautify-theme

(use-package org-beautify-theme
  :ensure t
   :defer t
;; ;;  :init
;;   :hook (org-bullets-mode . (load-theme 'org-beautify))
 )

;; (add-hook 'org-mode-hook (lambda () (load-theme 'modified-org-beautify t)))

#+END_SRC

* god mode

#+BEGIN_SRC emacs-lisp

(use-package god-mode
  :ensure t
  ;; :defer t
  ;; :init 
  ;;    (global-set-key (kbd "C-h") 'previous-line)

  :config
;;     (define-key god-local-mode-map (kbd "h") 'previous-line)
;;     (define-key god-mode-map (kbd "h"
     (define-key god-local-mode-map (kbd ".") 'repeat)
     (define-key god-local-mode-map (kbd "i") 'god-local-mode)

     (global-set-key (kbd "C-x C-1") 'delete-other-windows)
     (global-set-key (kbd "C-x C-2") 'split-window-below)
     (global-set-key (kbd "C-x C-3") 'split-window-right)
     (global-set-key (kbd "C-x C-0") 'delete-window)

     (require 'god-mode-isearch)
     (define-key isearch-mode-map (kbd "<escape>") 'god-mode-isearch-activate)
     (define-key god-mode-isearch-map (kbd "<escape>") 'god-mode-isearch-disable)
     ;; org-mode
     (define-key god-local-mode-map [remap self-insert-command] 'my-god-mode-self-insert)

     (defun my-god-mode-self-insert ()
       (interactive)
       (if (and (bolp)
                (eq major-mode 'org-mode))
           (call-interactively 'org-self-insert-command)
         (call-interactively 'god-mode-self-insert)))
     )

(defun my-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'box
                      'bar)))

(add-hook 'god-mode-enabled-hook 'my-update-cursor)
(add-hook 'god-mode-disabled-hook 'my-update-cursor)

;;(global-set-key (kbd "<f12>") 'god-local-mode)

(global-set-key (kbd "<f12>") 'god-mode-all)

#+END_SRC

* dired

#+BEGIN_SRC emacs-lisp

(use-package dired
  :ensure nil
  :defer t
  :hook (dired-mode . (lambda () (dired-hide-details-mode t)))
  :config
  (require 'dired-x)
  (require 'dired-narrow)
  (require 'dired-subtree)
  (setq dired-listing-switches "--group-directories-first -lah")
  (put 'dired-find-alternate-file 'disabled nil)
  (define-key dired-mode-map (kbd "C-<return>") 'dired-find-file)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "M-<return>") 'dired-find-file-other-window)
  ;; allow dired to delete or copy dir
  (setq dired-recursive-copies (quote always)) ; “always” means no asking
  (setq dired-recursive-deletes (quote top)) ; “top” means ask once
  (setq dired-dwim-target t)

  (defun dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
	  (progn
	    (set (make-local-variable 'dired-dotfiles-show-p) nil)
	    (message "h")
	    (dired-mark-files-regexp "^\\\.")
	    (dired-do-kill-lines))
	(progn (revert-buffer) ; otherwise just revert to re-show
	       (set (make-local-variable 'dired-dotfiles-show-p) t)))))

  (define-key dired-mode-map (kbd "H-l")
    (lambda () (interactive) (dired-dotfiles-toggle)))

  (define-key dired-mode-map (kbd "^")
    (lambda () (interactive) (find-alternate-file "..")))

  (setq wdired-allow-to-change-permissions t)


  (use-package peep-dired
    :ensure t
    :defer t
    :after dired
    :bind (:map dired-mode-map
		("E" . peep-dired)))

  (defadvice dired-subtree-toggle (after dired-icons-refreash ())
    "Insert an empty line when moving up from the top line."
    (let ((dafile "~/.emacs.d/custom_faces.el"))		     
      (revert-buffer)))

  (ad-activate 'dired-subtree-toggle)

  (defadvice dired-subtree-cycle (after dired-icons-refreash ())
    "Insert an empty line when moving up from the top line."
    (let ((dafile "~/.emacs.d/custom_faces.el"))		     
      (revert-buffer)))

  (ad-activate 'dired-subtree-cycle)


  )


(use-package dired-narrow
  :ensure t
  :defer t
  :after dired
  :config
  (bind-key "C-c C-n" #'dired-narrow)
  (bind-key "C-c C-f" #'dired-narrow-fuzzy)
  (bind-key "C-x C-N" #'dired-narrow-regexp)
  )

(use-package dired-subtree :ensure t
  :defer t
  :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
  )

;; (use-package dired-quick-sort
;;   :ensure t
;;   :defer t
;;   :hook (dired-mode)
;;   :config
;;   (dired-quick-sort-setup)
;;   (all-the-icons-dired-mode t))


(use-package dired-sidebar
  :bind (("C-c n t" . dired-sidebar-toggle-sidebar))
  :ensure t
  :defer t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  (add-hook 'dired-sidebar-mode-hook (lambda () (display-line-numbers-mode -1)))
  (add-hook 'dired-sidebar-mode-hook (lambda () (nlinum-mode -1)))
  ;;  (add-hook 'dired-sidebar-mode-hook (lambda () (all-the-icons-dired-mode -1)))

  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))

  ;; (setq dired-sidebar-display-alist (quote ((side . right) (slot . -1))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
  (setq dired-sidebar-theme 'nerd)
  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-width 25))

;;   ;; (use-package diredfl
;;   ;;   :ensure t
;;   ;;   :config
;;   ;;   (diredfl-global-mode))
;;   ;; (use-package dired-x
;;   ;;   :config
;;   ;;   ;; do not bind C-x C-j, it may be binded later
;;   ;;   (setq dired-bind-jump nil))
;;   ;; (use-package dired-hide-dotfiles
;;   ;;   :ensure t
;;   ;;   :after (dired)
;;   ;;   :general
;;   ;;   (:keymaps 'dired-mode-map
;;   ;;             "." 'dired-hide-dotfiles-mode)
;;   ;;   :hook
;;   ;;   (dired-mode . dired-hide-dotfiles-mode)))

#+END_SRC


* try

#+BEGIN_SRC emacs-lisp

(use-package try
  :defer t
  :ensure t)

#+END_SRC

* emojify

#+BEGIN_SRC emacs-lisp

(use-package emojify
  :ensure t
  :defer 2
  :hook (emojify-mode . prettify-symbols-mode)
  :bind (("H-e e" . emojify-mode)
         :map emojify-mode-map
	 ("φ e" . 'hydra-emojify/body)))

#+END_SRC

* writeroom-mode

#+BEGIN_SRC emacs-lisp

(use-package writeroom-mode
  :ensure t
  :defer t
  :hook ((writeroom-mode . (lambda () (display-line-numbers-mode -1)))
	 (writeroom-mode . (lambda () (nlinum-mode -1)))
	 (org-tree-slide-mode . writeroom-mode)
	 )
  :bind ("H-<f11>" . writeroom-mode)
)

#+END_SRC

* spray

#+BEGIN_SRC emacs-lisp

(use-package spray
  :ensure t
  :defer t)

#+END_SRC

* whitespace

#+BEGIN_SRC emacs-lisp

(add-hook 
 'after-init-hook 
 (lambda ()
   ;; Make whitespace-mode with very basic background coloring for whitespaces.
   ;; http://ergoemacs.org/emacs/whitespace-mode.html
   (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))

   ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
   (setq whitespace-display-mappings
	 ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
	 '(
	   (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
	   (newline-mark 10 [182 10]) ; LINE FEED,
	   (tab-mark 9 [9655 9] [92 9]) ; tab
	   ))))

#+END_SRC

* pdf

#+BEGIN_SRC emacs-lisp

(pdf-loader-install)
(add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'pdf-view-mode-hook (lambda () (nlinum-mode -1)))
(add-hook 'pdf-view-mode-hook (lambda () (setq pdf-view-midnight-colors `(,(face-foreground 'default) . ,(face-background 'default)))))
(add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode t)

#+END_SRC

* outline and outshine

#+BEGIN_SRC emacs-lisp

(use-package outshine
  :ensure t
  :defer t
  :hook ((outline-minor-mode . outshine-mode)
	 (prog-mode . outline-minor-mode)))

#+END_SRC

* origami

#+BEGIN_SRC emacs-lisp

(use-package origami
  :ensure t
  :defer t
  :hook (prog-mode . origami-mode)
)

#+END_SRC

* dashboard

#+BEGIN_SRC emacs-lisp

(use-package dashboard
  :ensure t
  :hook ((dashboard-mode . (lambda () (display-line-numbers-mode -1)))
	 (dashboard-mode . (lambda () (nlinum-mode -1))))
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
;;  (setq dashboard-set-footer nil)
(setq dashboard-footer
      (let ((x '("The one true editor, Emacs!"
		 "Free as free speech, free as free Beer"
		 "Richard Stallman is proud of you"
		 "Happy coding!"
		 "Welcome to the church of Emacs"
		 "While any text editor can save your files,\
 only Emacs can save your soul"
		 "I showed you my source code,pls respond")))
	(elt x (random (length x)))))
  )

#+END_SRC

* custom_faces

#+BEGIN_SRC emacs-lisp

;; ;; (setq warning-minimum-level :emergency)

;; (defcustom modified-org-beautify-theme-use-box-hack 't
;;   "Use a 3 pixel box with the background color to add spacing.
;;   Note that this has a side effect that can make the theme look
;;   really bad under some circumstances."
;;   :type 'boolean)

;; (let* (;; (sans-font (cond ((x-list-fonts "Lucida Grande") '(:font "Lucida Grande"))
;;        ;;                  ((x-list-fonts "Verdana") '(:font "Verdana"))
;;        ;;                  ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
;;        ;;                  (nil (warn "Cannot find a Sans Serif Font.  Please report at: https://github.com/jonnay/org-beautify-theme/issues"))))
;;        (base-font-color (face-foreground 'default  nil 'default))
;;        (background-color (face-background 'default nil 'default))
;;        (headline `(:inherit default :foreground ,base-font-color))
;;        ;; (primary-color (face-foreground 'mode-line nil))
;;        (secondary-color (face-background 'secondary-selection nil 'region))
;;        ;; (padding (if modified-org-beautify-theme-use-box-hack
;;        ;;              `(:line-width 5 :color ,background-color)
;;        ;;              nil))
;;        (org-highlights `(:foreground ,base-font-color :background ,secondary-color))

;;        )

;;   (custom-set-faces 
;;    ;; `(org-agenda-structure ((t (:inherit default ,@sans-font :height 2.0 :underline nil))))
;;    `(org-level-8 ((t (:inherit 'outline-8  :weight bold :height 1.0))))
;;    `(org-level-7 ((t (:inherit 'outline-7  :weight bold :height 1.0))))
;;    `(org-level-6 ((t (:inherit 'outline-6  :weight bold :height 1.0))))
;;    `(org-level-5 ((t (:inherit 'outline-5  :weight bold :height 1.0))))
;;    `(org-level-4 ((t (:inherit 'outline-4  :weight bold :height 1.0))))
;;    `(org-level-3 ((t (:inherit 'outline-3  :weight bold :height 1.0))))
;;    `(org-level-2 ((t (:inherit 'outline-2  :weight bold :height 1.0))))
;;    `(org-level-1 ((t (:inherit 'outline-1  :weight bold :height 1.0))))
;;    `(org-document-title ((t (:family "sans" :inherit org-level-1 :height 1.5 :underline nil :box ))))

;;    `(org-block ((t (:foreground ,base-font-color :background ,background-color :box nil))))
;;    ;; `(org-block-begin-line ((t ,org-highlights)))
;;    ;; `(org-block-end-line ((t ,org-highlights)))
;;    ;; `(org-block ((t (:background ,(face-background 'highlight)))))
;;    ;; `(org-block-begin-line ((t (:underline t))))
;;    ;; `(org-block-end-line ((t (:overline t))))
;;    `(org-block-begin-line ((t (;; :background ,(face-background 'highlight) 
;; 			       :foreground ,(face-foreground 'shadow))))) ;; :underline t :overline t :italic t))))
;;    `(org-block-end-line ((t (;; :background ,(face-background 'highlight) 
;; 			     :foreground ,(face-foreground 'shadow) )))) ;; :overline t :underline t :italic t))))


;;    `(org-checkbox ((t (:foreground "#000000", :background "#93a1a1" :box (:line-width -3 :color "#93a1a1" :style "released-button")))))

;;    `(org-headline-done ((t (:strike-through t))))
;;    `(org-done ((t (:strike-through t :underline t :overline t))))
;;    `(org-todo ((t (:foreground ,(face-foreground 'default) :background ,(face-background 'default) 
;; 			       :underline t :overline t))))

;;    ;; `(symbol-overlay-default-face ((t (:background ,(color-lighten-name (face-background 'default) 10)
;;    ;; 						    :foreground ,(color-darken-name (face-foreground 'default) 10)))))

;;    `(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0))))
;;    ;; `(mode-line ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :box ,(face-foreground 'link)))))
;;    ;; `(mode-line-inactive ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :box nil))))
;;    ;; '(mode-line ((t (:background "#002b36"  :foreground "white" :box "dark cyan"))))
;;    ;; '(mode-line-inactive ((t (:background "#002b36" :foreground "white" :box nil))))
;;    `(font-lock-comment-face ((t (:background ,(face-background 'default) :slant italic))))
;;    ;;`(font-lock-constant-face ((t (:weight bold))))
;;    `(font-lock-constant-face ((t (:weight normal :slant italic))))
;;    `(font-lock-function-name-face ((t (:weight normal))))
;;    ;;`(font-lock-keyword-face ((t (:weight bold :slant italic))))
;;    `(font-lock-type-face ((t (:slant italic)))) ;; :weight bold))))
;;    `(hl-line ((t (:background ,(face-background 'default) :box (:line-width 1 :color ,(face-background font-lock-comment-face))))))
;;    `(whitespace-space ((t (:background ,(face-background 'default) ))))

;;    ;; `(mode-line ((t (:foreground ,(face-foreground 'default) :background ,(color-darken-name (face-background 'default) 10) :box (:line-width 1 :color ,(color-darken-name (face-background 'default) 25))))));; ,(face-foreground 'font-lock-comment-face))))))
;;    ;; `(mode-line-inactive ((t (:foreground ,(face-foreground 'default) :background ,(color-lighten-name (face-background 'default) 10) :box (:line-width 1 :color ,(color-darken-name (face-background 'default) 10))))))
;;    ;; `(mode-line-buffer-id ((t (:background ,(face-background 'default)))))
;;    ;; `(spaceline-highlight-face ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :inherit 'mode-line))))
;;    ;; `(spaceline-unmodified  ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :inherit 'mode-line))))


;;    ;; `(tab-bar ((t (:inherit variable-pitch :background "SlateGray4" :foreground "white"))))
;;    ;; `(tab-bar-tab ((t (:inherit tab-bar :box nil))))
;;    ;; `(tab-bar-tab-inactive ((t (:inherit tab-bar-tab :background "gray5"))))

;; ;;;;; linum-mode
;;    `(linum ((t (:weight thin :underline nil :height 0.9 :font ,(face-font 'default)))))
;;    `(linum-relative-current-face ((t (:inherit linum))))
;; ;;;;; display-line-number-mode
;;    `(line-number ((t (:weight thin :underline nil :height 0.9))))

;;    `(mode-line ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :box ,(face-foreground 'link) :underline nil :overline nil))))
;;    ;; `(mode-line-inactive ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :box nil))))
;;    ;; '(mode-line ((t (:background "#002b36"  :foreground "white" :box "dark cyan"))))
;;    ;; '(mode-line-inactive ((t (:background "#002b36" :foreground "white" :box nil))))
;;    ))

;; (setq warning-minimum-level :warning)

#+END_SRC
