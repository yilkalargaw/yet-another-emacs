#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General

* window(frame) look and feel settings

#+BEGIN_SRC emacs-lisp

;; (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;; (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94) ; chars
              (height . 52) ; lines
              ))

      (setq default-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94)
              (height . 52)
              ))

(set-frame-position (selected-frame) 0 15)

))


(add-hook 'after-make-frame-functions
          (lambda (frame)
              (select-frame frame)
              (if (display-graphic-p)
                  (progn
                    (set-frame-size frame 94 52)
                    (set-frame-position frame 0 15)
;;                  (set-frame-font "Liberation Mono-9.5" nil t)
;;                  (set-face-attribute 'default nil :height 93 )
                    ))))


(setq inhibit-startup-message t)
(show-paren-mode t)
(global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(toggle-indicate-empty-lines t)

(add-to-list 'default-frame-alist '(font . "Liberation Mono-9.5" ))

#+END_SRC

* initial setup

#+BEGIN_SRC emacs-lisp

;;pacage-list
(setq package-list
    '(
      ;;packages
      use-package exec-path-from-shell telephone-line key-chord use-package-chords
      beacon symbol-overlay hydra ivy counsel swiper ivy-hydra nlinum
      undo-tree which-key magit git-gutter git-timemachine forge monky yasnippet
      yasnippet-snippets flycheck expand-region avy ace-window ag
      smart-hungry-delete ws-butler company multiple-cursors smartparens
      rainbow-delimiters all-the-icons neotree company-c-headers irony company-irony
      flycheck-irony irony-eldoc flycheck-rust racer rust-mode cargo
      go-mode company-go go-dlv inf-ruby robe company-jedi lua-mode company-lua
      geiser slime slime-company emmet-mode web-mode company-web js2-mode
      company-tern skewer-mode tuareg crystal-mode csv-mode yaml-mode toml-mode
      json-mode markdown-mode markdown-mode+ markdown-preview-mode markdown-toc
      auctex company-auctex nov restclient realgud projectile ecb god-mode
      php-mode company-php ace-link try dired-narrow dired-subtree lsp-mode company-lsp
      lsp-ui dap-mode emojify writeroom-mode
      
      ox-gfm org-bullets org-tree-slide epresent ox-pandoc ox-twbs
      ox-epub org-beautify-theme

      ;;themes
      ample-theme dracula-theme color-theme-sanityinc-tomorrow darktooth-theme
      color-theme-sanityinc-solarized soothe-theme seti-theme spacemacs-theme
      sublime-themes flatland-theme flatui-dark-theme material-theme blackboard-theme
      solarized-theme cyberpunk-theme doom-themes  zenburn-theme org-beautify-theme
      danneskjold-theme base16-theme
       ))

;; activate all the packages
(if (version< emacs-version "27.0")
    (package-initialize))

;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'use-package)

#+END_SRC

* gnutls

#+BEGIN_SRC emacs-lisp

;;gnutls

(setq gnutls-min-prime-bits 4096)

#+END_SRC

* themes

#+BEGIN_SRC emacs-lisp

;;themes
(use-package doom-themes
  :ensure t
  :defer t)

(use-package ample-theme
  :ensure t
  :defer t)

(use-package dracula-theme
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :ensure t
  :defer t)

(use-package soothe-theme
  :ensure t
  :defer t)

(use-package seti-theme
  :ensure t
  :defer t)

(use-package spacemacs-theme
  :ensure t
  :defer t)

(use-package solarized-theme
  :ensure t
  :defer t)

(use-package zenburn-theme
  :ensure t
  :defer t)

(use-package cyberpunk-theme
  :ensure t
  :defer t)

(use-package sublime-themes
  :ensure t
  :defer t)

(use-package flatland-theme
  :ensure t
  :defer t)

(use-package flatui-dark-theme
  :ensure t
  :defer t)

(use-package blackboard-theme
  :ensure t
  :defer t)

(use-package material-theme
  :ensure t
  :defer t)

(use-package darktooth-theme
  :ensure t
  :defer t)

(use-package danneskjold-theme
  :ensure t
  :defer t)

(use-package base16-theme
  :ensure t
  :defer t)

;; (defun disable-all-themes ()
;;   "disable all active themes."
;;   (dolist (i custom-enabled-themes)
;;     (disable-theme i)))

;; (defadvice load-theme (before disable-themes-first activate)
;;   (disable-all-themes))

;; (add-hook 'after-make-frame-functions
;;           (lambda (frame)
;;               (select-frame frame)
;;               (if (display-graphic-p)
;; 		  (load-theme 'solarized-dark t) 
;; 		(load-theme 'danneskjold t))))

;; (add-hook 'after-init-hook
;; 	  (if (display-graphic-p) 
;; 	      (load-theme 'solarized-dark t) 
;; 	    (load-theme 'danneskjold t)))

(add-hook 'after-init-hook 
	  (progn
	    (setq base16-theme-256-color-source 'terminal)
	    (setq base16-distinct-fringe-background nil)
;;	    (setq base16-highlight-mode-line 'box)
	    (load-theme 'base16-solarized-dark t)))

#+END_SRC

* default directory

#+BEGIN_SRC emacs-lisp

;;default directory
(setq default-directory "~/")

#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp

;;backups

(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backups" t))
      )
;; (setq auto-save-file-name-transforms
;;       `((".*" ,"~/.emacs.d/backups" t)))

#+END_SRC

* clipboard

#+BEGIN_SRC emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+END_SRC

* yes,no

#+BEGIN_SRC emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

* exec path form shell

#+BEGIN_SRC emacs-lisp

;;exec-path-from-shell
  (use-package exec-path-from-shell
    :ensure t
    :defer 2
    :config
    (exec-path-from-shell-initialize))

#+END_SRC

* telephone-line

#+BEGIN_SRC emacs-lisp

;;telephone-lines
(use-package telephone-line
  :ensure t
  :init (telephone-line-defsegment* telephone-line-god-mode-segment ()
                   (let ((tag (if god-local-mode
                                  "GOD" "EMACS")))
                     (if telephone-line-evil-use-short-tag
                         (seq-take tag 1)
                       tag)))

 
        (setq telephone-line-lhs
              '((evil   . (telephone-line-god-mode-segment))

		(accent . (telephone-line-vc-segment
			   telephone-line-erc-modified-channels-segment
			   telephone-line-process-segment))
		(nil    . (telephone-line-projectile-segment
			   telephone-line-buffer-segment))))

  :defer t)


(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (if (not (display-graphic-p))
                (progn
                  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
                        telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
                        telephone-line-primary-left-separator 'telephone-line-abs-left
                        telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
                  (setq telephone-line-subseparator '())
		  (setq telephone-line-evil-use-short-tag t)
                  (telephone-line-mode 1))
                (progn
                  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
                        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
                        telephone-line-primary-right-separator 'telephone-line-cubed-left
                        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
                  (setq telephone-line-subseparator-faces '())
                  (setq telephone-line-height 25)
		  (setq telephone-line-evil-use-short-tag t)
                  (telephone-line-mode 1)))))


(if (not (display-graphic-p))
    (progn
      (setq telephone-line-primary-right-separator 'telephone-line-abs-left
            telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
            telephone-line-primary-left-separator 'telephone-line-abs-left
            telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
      (setq telephone-line-subseparator '())
      (setq telephone-line-evil-use-short-tag t)
      (telephone-line-mode 1))

  (progn
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-left
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
    (setq telephone-line-subseparator-faces '())
    (setq telephone-line-height 25)
    (setq telephone-line-evil-use-short-tag t)
    (telephone-line-mode 1)))

#+END_SRC

* indentation stuff

#+BEGIN_SRC emacs-lisp

;;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

#+END_SRC

* line-spacing

#+BEGIN_SRC emacs-lisp

(setq-default line-spacing 0.20)
(add-hook 'minibuffer-setup-hook (lambda () (setq line-spacing nil)))

#+END_SRC

* scrolling

** horizontal scrolling

#+BEGIN_SRC emacs-lisp

(add-hook 'prog-mode-hook (lambda ()(setq truncate-lines t)))
(add-hook 'html-mode-hook (lambda ()(setq truncate-lines t)))
(add-hook 'web-mode-hook (lambda ()(setq truncate-lines t)))
(add-hook 'dired-mode-hook (lambda ()(setq truncate-lines t)))
(add-hook 'org-mode (lambda ()(setq truncate-lines nil)))


(global-set-key (kbd "<mouse-7>") '(lambda ()
                                     (interactive)
                                     (scroll-left 4)))

(global-set-key (kbd "<mouse-6>") '(lambda ()
                                     (interactive)
                                     (scroll-right 4)))

#+END_SRC

** smooth-scrolling

#+BEGIN_SRC emacs-lisp

;;smooth-scrolling

;; (use-package smooth-scrolling
;;   :ensure t
;;   :config (setq smooth-scroll-margin 2)
;;   )
;; scroll one line at a time (less "jumpy" than defaults)

(setq mouse-wheel-scroll-amount '(10 ((shift) . 10))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC

* input method

#+BEGIN_SRC emacs-lisp

;;input-method

(defun myinput-settings ()
  "Settings based on input method."
  (cond ((string= current-input-method "ethiopic")
         (progn (setq ethio-primary-language 'amharic)
                (ethio-select-a-translation)))
        (t nil)))

(add-hook 'input-method-activate-hook #'myinput-settings)

#+END_SRC

* key-chords

#+BEGIN_SRC emacs-lisp

;;keychords
(use-package key-chord
  :ensure t)

#+END_SRC

* use-package-chords

#+BEGIN_SRC emacs-lisp

;;use-package-chords
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

#+END_SRC

* trailing white spaces

#+BEGIN_SRC emacs-lisp
;;settings for trailng whitespaces
;;(setq show-trailing-whitespace t)
;;(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'html-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'css-mode-hook (lambda () (setq show-trailing-whitespace t)))
;;(add-hook 'org-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'markdown-mode-hook (lambda () (setq show-trailing-whitespace t)))

#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp

;;beacon
(use-package beacon
  :ensure t
  :defer 3
  :config (beacon-mode 1))

#+END_SRC

* symbol-overlay

#+BEGIN_SRC emacs-lisp

;; symbol overlay
(use-package symbol-overlay
  :ensure t
  :defer t
  :hook (prog-mode . symbol-overlay-mode)
        (html-mode . symbol-overlay-mode)
        (web-mode . symbol-overlay-mode)
        (css-mode . symbol-overlay-mode)
        (yaml-mode . symbol-overlay-mode)
        (toml-mode . symbol-overlay-mode)
        (json-mode . symbol-overlay-mode)
  :config
        (progn (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")
               (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange))))
    ;; (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    ;; (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    ;; (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)
)

;; (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")

;; (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange)))

#+END_SRC

* hydra

#+BEGIN_SRC emacs-lisp

;;hydra
(use-package hydra
  :defer 0.5
  ;; :hook (after-init . (lambda () (require 'hydra)))
  :after init
  :ensure t
  :config
  (load-file "~/.emacs.d/hydras.el"))

#+END_SRC

* ibuffer

#+BEGIN_SRC emacs-lisp

;; ibuffer
(use-package ibuffer
;;  :ensure t
  :bind (("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ;; ("C-." . hydra-ibuffer-main/body)
	 )
  :hook (ibuffer-mode . hydra-ibuffer-main/body)

)

#+END_SRC

* ivy,consel and swiper

#+BEGIN_SRC emacs-lisp

;;ivy,console and swiper

(use-package ivy :demand
  :ensure t
  :after (init)
  :init (ivy-mode 1)
        (use-package flx
          :ensure t)

        (setq ivy-re-builders-alist
              '((swiper . ivy--regex-plus)
                (counsel-grep  . ivy--regex-plus)
                (counsel-git-grep . ivy--regex-plus)
                (t . ivy--regex-fuzzy)))

        (setq ivy-initial-inputs-alist nil)
        (setq ivy-format-function 'ivy-format-function-line)

        :config (setq ivy-use-virtual-buffers t
                      ivy-count-format "%d/%d ")
                (setq ivy-use-virtual-buffers t)
                (setq ivy-display-style 'fancy)

        :bind ("C-x b" . ivy-switch-buffer)
;;              ("C-x C-b" . ivy-switch-buffer)
              ("C-c C-r" . ivy-resume))

(use-package counsel
  :ensure t
  :defer t
  :bind(
        ("C-x C-f" . counsel-find-file)
        ("M-x" . counsel-M-x)
        ("H-f" . counsel-ag)
        ("C-c M-?" . counsel-ag)
        ("M-y" . counsel-yank-pop)
        ;; :map ivy-minibuffer-map
        ;; ("M-y" . ivy-next-line)
        :map ivy-minibuffer-map
              ("M-y" . ivy-next-line)))

(use-package swiper
  :ensure t
  :defer t
  :bind (("M-s s" . swiper)))

(use-package ivy-hydra
  :ensure t
  :after (ivy hydra))

#+END_SRC

* line-number

#+BEGIN_SRC emacs-lisp

;;line-number

(if (version< emacs-version "26.0")
    (linum-relative-global-mode)
    (progn  (setq display-line-numbers-type (quote relative))
            (global-display-line-numbers-mode)))

#+END_SRC

* nlinum-mode

#+BEGIN_SRC emacs-lisp

;;nlinum mode

(use-package nlinum
  :ensure t
  :config  (setq nlinum-highlight-current-line t)
           (setq nlinum-use-right-margin t)
  :defer t)

(add-hook 'after-init-hook 'global-nlinum-mode t)

#+END_SRC

* line-highlight
 
#+BEGIN_SRC emacs-lisp

;;line-highlight

(add-hook 'after-init-hook 'global-hl-line-mode t)

#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp

;;undo-tree

(use-package undo-tree
  :diminish undo-tree-mode
  :hook (after-init . global-undo-tree-mode)
  :config (setq undo-tree-visualizer-timestamps t)
          (setq undo-tree-visualizer-diff t))

#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp

;;which mode

(use-package which-key
  :ensure t
  :hook (after-init . which-key-mode)
  :config (which-key-enable-god-mode-support)
)

#+END_SRC

* git

** git-gutter

#+BEGIN_SRC emacs-lisp

(use-package git-gutter
  :ensure t
  :defer t)

#+END_SRC

** git-timemachine

#+BEGIN_SRC emacs-lisp

(use-package git-timemachine
  :ensure t
  :defer t)

#+END_SRC

** magit & forge

#+BEGIN_SRC emacs-lisp

;;magit

(use-package magit
  :ensure t
  :config (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  :defer t)

(global-set-key (kbd "C-C g m") 'magit-status)
(global-set-key (kbd "H-g") 'magit-status)


(use-package forge
  :ensure t
  :defer t
  :after magit)

;; (use-package magithub
;;   :after magit
;;   :ensure t
;;   :config (magithub-feature-autoinject t))

#+END_SRC

* monky

#+BEGIN_SRC emacs-lisp

;;monky

(use-package monky
  :ensure t
  :defer t)

#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp

;;yasnippet

(use-package yasnippet
  :ensure t
  :defer 1.5
  ;; :hook (after-init . (lambda () yas-global-mode 1))
  :diminish yas-minor-mode
  :config (use-package yasnippet-snippets
          :ensure t
          :defer t)
  (yas-global-mode 1))

;;(add-hook 'prog-mode-hook 'yas-minor-mode)

#+END_SRC

* flycheck

#+BEGIN_SRC emacs-lisp

;;flycheck

(use-package flycheck
:ensure t
:defer t
:hook (prog-mode-hook . flyspell-prog-mode)
:config (progn
        (setq flycheck-standard-error-navigation nil)
        (global-flycheck-mode t)))

;(add-hook 'prog-mode-hook 'flycheck-mode)

#+END_SRC

* flyspell

#+BEGIN_SRC emacs-lisp

(use-package flyspell
;;  :ensure t
  :defer t
  :hook ((prog-mode-hook . flyspell-prog-mode)
	 (text-mode-hook . flyspell-mode))
  :config
  ;; Sets flyspell correction to use two-finger mouse click
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  )

#+END_SRC

* expand-region

#+BEGIN_SRC emacs-lisp

;;expand-region

(use-package expand-region
  :ensure t
  :defer t
  :bind (("C-=". er/expand-region)))

#+END_SRC

* avy

#+BEGIN_SRC emacs-lisp

;;avy

(use-package avy
  :ensure t
  :defer t
  :bind (("C-c v c" . avy-goto-char)
  ("C-c v 2" . avy-goto-char-2)
  ("C-c v w" . avy-goto-word-1)
  ("C-c v l" . avy-goto-line)
  :map isearch-mode-map
       ("C-'" . avy-isearch))
 )

#+END_SRC


#+BEGIN_SRC emacs-lisp

(use-package ace-link
  :demand t
  :after (:any elbank helpful info eww)
  :config
  (progn
(ace-link-setup-default)))

#+END_SRC

* ace-window

#+BEGIN_SRC emacs-lisp

;;ace-window

(use-package ace-window
  :ensure t
  :bind ("H-<f12>" . ace-window)
        ("C-c <f12>" . ace-window))

#+END_SRC

* ag

#+BEGIN_SRC emacs-lisp

;;ag

(use-package ag
  :ensure t
  :defer t)

#+END_SRC

* smart-hungry delete

#+BEGIN_SRC emacs-lisp

(use-package smart-hungry-delete
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :defer t
;;  :config (smart-hungry-delete-add-default-hooks)
)

#+END_SRC

* ws-butler

#+BEGIN_SRC emacs-lisp

(use-package ws-butler
  :ensure t
  :defer t
  :hook (prog-mode . ws-butler-mode))

#+END_SRC

* multiple-cursors

#+BEGIN_SRC emacs-lisp

;;multiple-cursors

(use-package multiple-cursors
  :ensure t
  :defer t
  :config (define-key mc/keymap (kbd "<return>") nil)
  :bind ;;("H-\\" . mc/mark-all-like-this)
        ("C-S-<mouse-1>" . mc/add-cursor-on-click))

#+END_SRC

* smartparens

#+BEGIN_SRC emacs-lisp

;;smartparens

(use-package smartparens-config
    :ensure smartparens
    :defer t
    :config
    (progn
      (show-smartparens-global-mode t)
))



(add-hook 'prog-mode-hook #'smartparens-mode)
(add-hook 'markdown-mode-hook #'smartparens-mode)
(add-hook 'smartparens-mode-hook (lambda () (sp-local-pair 'web-mode  "<%" "%>" :wrap "C-%")))

#+END_SRC

* rainbow-delimiters

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

* company

#+BEGIN_SRC emacs-lisp

;;company

(use-package company
  :ensure t
  :defer t
  :config (require 'company)
;;  (global-set-key (kbd "<backtab>") 'company-complete-common)
  (global-set-key (kbd "H-<SPC>") 'company-complete-common)
  (global-set-key (kbd "C-`") 'company-yasnippet)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))

(add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

* eshell

#+BEGIN_SRC emacs-lisp

;;eshell

(add-hook 'eshell-mode-hook '(lambda ()
                               (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)))
(add-hook 'eshell-mode-hook '(lambda ()
                               (define-key eshell-mode-map (kbd "<backtab>") 'completion-at-point)))


(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
(add-hook 'eshell-mode-hook
          '(lambda()
             (local-set-key (kbd "H-l") 'eshell-clear-buffer)))


(add-hook 'eshell-mode-hook
          (defun my-eshell-mode-setup ()
            (remove-hook 'eshell-output-filter-functions
                         'eshell-postoutput-scroll-to-bottom)))

(add-hook 'eshell-mode-hook '(lambda ()
                               (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
                                 "ncftp" "pine" "tin" "trn" "elm" "vim"
                                 "htop")
                                 )
                               ;;(add-to-list 'eshell-visual-commands "vim")
))


#+END_SRC

* shell-mode

#+BEGIN_SRC emacs-lisp

;;shell-mode

(add-hook 'shell-mode-hook '(lambda ()
                               (define-key shell-mode-map (kbd "<tab>") 'completion-at-point)))
(add-hook 'shell-mode-hook '(lambda ()
                               (define-key shell-mode-map (kbd "<backtab>") 'completion-at-point)))

#+END_SRC

* term-mode

#+BEGIN_SRC emacs-lisp

;;(defun my-display-line-number (lambda () (display-line-numbers-mode -1)))

(add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'term-mode-hook (lambda () (nlinum-mode -1)))
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))

#+END_SRC

* comint-mode

#+BEGIN_SRC emacs-lisp

;;conmint-mode

(setq comint-scroll-show-maximum-output nil)
(setq comint-scroll-to-bottom-on-input nil)
(setq comint-scroll-to-bottom-on-output nil)

#+END_SRC

* all-the-icons

#+BEGIN_SRC emacs-lisp

(use-package all-the-icons-dired
  :ensure t
  :defer t
  :hook (dired-mode . all-the-icons-dired-mode)
)

(use-package all-the-icons-ivy
  :ensure t
;;  :defer 1
  :after ivy
  :config
  (all-the-icons-ivy-setup))


#+END_SRC

* neotree

#+BEGIN_SRC emacs-lisp

;;neotree
(require 'all-the-icons)

(use-package neotree
  :ensure t
  :defer t
  :bind ("H-." . 'neotree-toggle)
        ("C-c n t" . 'neotree-toggle)
  :init (require 'all-the-icons)
         (setq neo-theme (or 'icons 'arrows))
                                        ;          (setq neo-theme 'icons)
         (setq neo-window-fixed-size nil))

(add-hook 'neotree-mode-hook 'my-neotree-hook)
(defun my-neotree-hook ()
  (nlinum-mode 0))

#+END_SRC

* lsp-mode

#+BEGIN_SRC emacs-lisp

(use-package lsp-mode
  :ensure t
  :defer t
  :hook (ruby-mode)
  :config

  ;; change nil to 't to enable logging of packets between emacs and the LS
  ;; this was invaluable for debugging communication with the MS Python Language Server
  ;; and comparing this with what vs.code is doing
  (setq lsp-print-io nil)

  ;; lsp-ui gives us the blue documentation boxes and the sidebar info
  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  ;; install LSP company backend for LSP-driven completion
  (use-package company-lsp
    :ensure t
    :config
    (push 'company-lsp company-backends))

  (require 'lsp-clients)
  ;; (add-hook 'typescript-mode-hook 'lsp)
  ;; (add-hook 'js2-mode-hook 'lsp)
  ;; (add-hook 'php-mode 'lsp)
  ;; (add-hook 'css-mode 'lsp)
  ;; (add-hook 'ruby-mode 'lsp)
  ;; (add-hook 'web-mode 'lsp)
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-file-watchers nil)
  )

;;(use-package company-lsp :ensure t :defer t :hook (lsp-mode))

;; (setq lsp-language-id-configuration '(;; (java-mode . "java")
;; 				      ;; (python-mode . "python")
;; 				      ;; (gfm-view-mode . "markdown")
;; 				      ;; (rust-mode . "rust")
;; 				      (ruby-mode . "ruby")
;; 				      ;; (css-mode . "css")
;; 				      ;; (xml-mode . "xml")
;; 				      ;; (c-mode . "c")
;; 				      ;; (c++-mode . "cpp")
;; 				      ;; (objc-mode . "objective-c")
;; 				      ;; (web-mode . "html")
;; 				      ;; (html-mode . "html")
;; 				      ;; (sgml-mode . "html")
;; 				      ;; (mhtml-mode . "html")
;; 				      ;; (go-mode . "go")
;; 				      ;; (haskell-mode . "haskell")
;; 				      ;; (php-mode . "php")
;; 				      ;; (json-mode . "json")
;; 				      ;; (js2-mode . "javascript")
;; 				      ;;(typescript-mode . "typescript")

;; 				      ))

;; LSP debugging

;;(setq lsp-print-io t)

;;(setq lsp-trace t)

;;(setq lsp-print-performance t)

(use-package dap-mode
  :ensure t ;;:after lsp-mode
  :defer t
  :hook (lsp-mode . dap-mode)
  :config
    ;;(dap-mode t)
    (dap-ui-mode t)
    (require 'dap-ruby))

#+END_SRC

* C/C++

#+BEGIN_SRC emacs-lisp

;;C/C++

(use-package company-c-headers
  :after company
  :defer t
  :ensure t)


(use-package irony
  :ensure t
  :defer t
  :init ;(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
  :hook (c++-mode . (lambda () irony-mode 1))
        (c-mode . (lambda () (irony-mode 1)))
        (objc-mode . (lambda () ('irony-mode 1)))
  :config (add-to-list 'company-backends 'company-irony)
          (add-to-list 'company-backends 'company-c-headers)
          (flycheck-irony-setup)
          (irony-eldoc)
         ;; (add-hook 'irony-mode-hook #'irony-eldoc)
)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(use-package company-irony
  :ensure t
  :defer t)


(use-package flycheck-irony
  :ensure t
  :defer t)

;; (eval-after-load 'flycheck
;;   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

(use-package irony-eldoc
  :ensure t
  :defer t)
;;(add-hook 'irony-mode-hook #'irony-eldoc)

#+END_SRC

* rust

#+BEGIN_SRC emacs-lisp

;; rust

(use-package flycheck-rust
  :ensure t
  :after rust-mode
  :config
;;  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  (add-hook 'rust-mode-hook 'flycheck-mode)) ;;quite unecessary but I will try it's effects


(use-package racer
  :ensure t
  :defer t
  :init
  (setq company-tooltip-align-annotations t)
  (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

(use-package rust-mode
  :ensure t
  :defer t
  :hook (rust-mode . racer-mode)
        (racer-mode . eldoc-mode)
  :config
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
        (setq rust-format-on-save t))

(use-package cargo
  :ensure t
  :defer t
  :hook (rust-mode . cargo-minor-mode)
  :config
  (setq compilation-scroll-output t))

#+END_SRC

* go

#+BEGIN_SRC emacs-lisp

;;go

(use-package go-mode
  :ensure t
  :defer t)

(use-package company-go
  :ensure t
  :defer t
  :hook (go-mode . (lambda ()
                     (set (make-local-variable 'company-backends) '(company-go))
                     (company-mode))))

(use-package go-dlv
  :ensure t
  :defer t)

#+END_SRC

* ruby

#+BEGIN_SRC emacs-lisp

;;ruby

(use-package inf-ruby
  :ensure t
  :defer t)

(use-package robe
  :ensure t
  :defer t
  :bind ("C-c r s" . robe-start)
  :hook (ruby-mode . robe-mode)
  :config (push 'company-robe company-backends))

;  (add-hook 'ruby-mode-hook 'robe-mode))

;; (eval-after-load 'company
;;   '(push 'company-robe company-backends))

#+END_SRC

* python

#+BEGIN_SRC emacs-lisp

(use-package company-jedi
  :defer t
  :ensure t
  )

(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)

#+END_SRC

* lua

#+BEGIN_SRC emacs-lisp

;;lua

(use-package lua-mode
  :ensure t
  :defer t)

(use-package company-lua
  :ensure t
  :defer t
  :hook
  (company-mode . (lambda () (push 'company-lua company-backends))))

#+END_SRC

* scheme

#+BEGIN_SRC emacs-lisp

;;scheme

(use-package geiser
  :ensure t
  :defer t
  :bind (:map scheme-mode-map
              ("C-c C-c" . geiser-eval-last-sexp))
  :hook (scheme-mode)
  :init
    (setq geiser-default-implementation 'guile)
    (setq geiser-guile-binary "/usr/bin/guile2.2"))

#+END_SRC

* common-lisp

#+BEGIN_SRC emacs-lisp

;; common-lisp

(use-package slime-company
  :ensure t
  :defer t)

(use-package slime
  :ensure t
  :config (setq inferior-lisp-program "~/.nix-profile/bin/sbcl")
          (setq slime-contribs '(slime-fancy slime-company))
  :bind (:map slime-mode-map
              ("C-t C-e" . slime-eval-last-expression))
  :defer t)

#+END_SRC

* web

#+BEGIN_SRC emacs-lisp

;;web-mode

(use-package emmet-mode
  :ensure t
  :hook (sgml-mode css-mode web-mode))


 (use-package web-mode
   :ensure t
   :defer t
   :mode (;;"\\.html\\'"
          ;;"\\.css?\\'"
          "\\.phtml\\'"
          "\\.erb\\'"
          ;;"\\.html?\\'"
          )
   :config
   (setq web-mode-markup-indent-offset 2)
 ;  (setq web-mode-engines-alist
 ;        '(("django" . "focus/.*\\.html\\'")
 ;          ("ctemplate" . "realtimecrm/.*\\.html\\'")))
   (setq web-mode-enable-auto-pairing nil)
;;   (add-hook 'web-mode-hook (lambda () (require 'emmet-mode)
 )


 (use-package company-web
   :defer t
   :hook (('web-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
	  ('mhtml-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
	  ('html-mode . (lambda () (add-to-list 'company-backends 'company-web-html))))
 )

#+END_SRC

* javascript

  #+BEGIN_SRC emacs-lisp

  ;;javascript

  (use-package js2-mode
    :ensure t
    :defer t
    :mode "\\.js\\'"
    :interpreter "node")

  (add-to-list 'load-path "~/user_softs/npm_related/node_modules/tern/emacs/")
  (autoload 'tern-mode "tern.el" nil t)
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
  ;;  (add-hook 'web-mode-hook (lambda () (tern-mode t)))

  (use-package company-tern
    :ensure t
    :defer t
    :hook
    (company-mode . (lambda () (push 'company-tern company-backends)))
    :config
    (defadvice company-tern (before web-mode-set-up-ac-sources activate)
      "Set `tern-mode' based on current language before running company-tern."
      (if (equal major-mode 'web-mode)
	  (let ((web-mode-cur-language
		 (web-mode-language-at-pos)))
	    (if (or (string= web-mode-cur-language "jsx")
		    (string= web-mode-cur-language "javascript"))
		(unless tern-mode (tern-mode))
	      (if tern-mode (tern-mode -1)))))))

  #+END_SRC

* skewer

 #+BEGIN_SRC emacs-lisp

 ;;skewer

 (use-package skewer-mode
   :ensure t
   :defer t
   :hook (web-mode, html-mode, js2-mode)
   :config
   (skewer-setup))

 ;(use-package skewer-repl
 ;  :ensure t
 ;  :defer t
 ;  :config (define-key skewer-repl-mode-map (kbd "C-c C-z") #'quit-window))

 #+END_SRC

* ocaml

#+BEGIN_SRC emacs-lisp

(use-package tuareg
  :mode ("\\.ml[ily]?$" . tuareg-mode))

#+END_SRC

* crystal

#+BEGIN_SRC emacs-lisp

(use-package crystal-mode
  :mode ("\\.cr$" . crystal-mode))

#+END_SRC

* php

#+BEGIN_SRC emacs-lisp

;;php

(use-package php-mode
  :ensure t
  :mode "\\.php\\'"
  ;;:config (require 'php-extras)
)

(use-package company-php
  :ensure t
  :defer t)

;; (use-package php-extras
;;   :ensure t
;;   :defer t)

;; (eval-after-load 'php-mode
;;   (require 'php-extras))

(add-hook 'php-mode-hook
          '(lambda ()
             (require 'company-php)
             (company-mode t)
;;             (ac-php-core-eldoc-setup) ;; enable eldoc
             (make-local-variable 'company-backends)
             (add-to-list 'company-backends 'company-ac-php-backend)))
;(eval-after-load 'php-mode
;  (require 'php-extras))

#+END_SRC

* csv

#+BEGIN_SRC emacs-lisp

;;csv

(use-package csv-mode
  :ensure t
  :defer t)

#+END_SRC

* yaml,toml and json

#+BEGIN_SRC emacs-lisp

;;yaml,toml and json

(use-package yaml-mode
  :ensure t
  :defer t)
(use-package toml-mode
  :ensure t
  :defer t)
(use-package json-mode
  :ensure t
  :defer t)

#+END_SRC

* markdown

#+BEGIN_SRC emacs-lisp

;;markdown

(use-package markdown-mode
  :ensure t
  :defer t
  :config
  (use-package markdown-mode+
    :ensure t)
  (use-package markdown-preview-mode
    :ensure t)
  (use-package markdown-toc
    :ensure t))
(autoload 'markdown-mode "markdown-mode" "Major mode for Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
(setq markdown-command "pandoc -c ~/.emacs.d/github-pandoc.css --from gfm -t html5 --mathjax --highlight-style pygments --standalone")

#+END_SRC

* latex/auctex

#+BEGIN_SRC emacs-lisp

;;latex/auctex

  (use-package auctex
    :ensure t
    :defer t)

  (use-package  company-auctex
  :ensure t
  :defer t
  :config  (company-auctex-init))

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'company-auctex-init)

(add-hook 'TeX-mode-hook
          (lambda ()
            (setq TeX-command-extra-options "-shell-escape")))

#+END_SRC

* eww

#+BEGIN_SRC emacs-lisp

(setq shr-inhibit-images 1)

#+END_SRC

* nov.el

#+BEGIN_SRC emacs-lisp

(use-package nov
  :ensure t
  :defer t
  :mode ("\\.epub\\'" . nov-mode))

#+END_SRC

* restclient

#+BEGIN_SRC emacs-lisp

;;restclient

(use-package restclient
  :ensure t
  :defer t)

#+END_SRC

* realgud

#+BEGIN_SRC emacs-lisp

(use-package realgud
  :ensure t
  :defer t)

#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp

;; projectile

(use-package projectile
  :ensure t
  :defer 3
  :hook (prog-mode-hook . projectile-mode)
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'ivy)
)

;; (add-hook 'prog-mode-hook 'projectile-mode)
;; (add-hook 'projectile-mode-hook 'counsel-projectile-mode)

#+END_SRC

* ecb

#+BEGIN_SRC emacs-lisp

;;ecb

(use-package ecb
  :ensure t
  :defer t
  :init (setq ecb-tip-of-the-day nil)
  :bind (( "C-c e b" . ecb-minor-mode)
         :map ecb-mode-map
         ("H-1" . 'ecb-goto-window-edit1)
         ("H-2" . 'ecb-goto-window-directories)
         ("H-3" . 'ecb-goto-window-sources)
         ("H-4" . 'ecb-goto-window-methods)
         ("H-5" . 'ecb-goto-window-history)))

#+END_SRC

* org

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "H-o l") 'org-store-link)
(global-set-key (kbd "H-o a") 'org-agenda)
(global-set-key (kbd "H-o c") 'org-capture)
(global-set-key (kbd "H-o b") 'org-switchb)

(global-set-key (kbd "C-c 0 l") 'org-store-link)
(global-set-key (kbd "C-c 0 a") 'org-agenda)
(global-set-key (kbd "C-c 0 c") 'org-capture)
(global-set-key (kbd "C-c 0 b") 'org-switchb)

#+END_SRC

** org-fontify

#+BEGIN_SRC emacs-lisp

;;org fontify

(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)

#+END_SRC

** ox-md

#+BEGIN_SRC emacs-lisp

;;org-md

(add-hook 'org-mode-hook (lambda () (require 'ox-md nil t)))

#+END_SRC

** ox-beamer

#+BEGIN_SRC emacs-lisp

;;org-beamer

;; (eval-after-load "org"
;;  '(require 'ox-beamer nil t))
(add-hook 'org-mode-hook (lambda () (require 'ox-beamer nil t)))

#+END_SRC

** ox-odt

#+BEGIN_SRC emacs-lisp

;;org-odt

 ;; (eval-after-load "org"
 ;;  '(require 'ox-odt nil t))
(add-hook 'org-mode-hook (lambda () (require 'ox-md nil t)))

#+END_SRC

** org-babel

#+BEGIN_SRC emacs-lisp

;;org-babel
(defun my-org-bable-setup ()
  (if (version< emacs-version "26.0")
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((sh . true) (python . true) (ruby . true)
         (emacs-lisp .true) (perl . true)))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . true) (python . true) (ruby . true)
       (emacs-lisp .true) (perl . true)))))

(add-hook 'org-mode-hook 'my-org-bable-setup)

#+END_SRC

** ox-gfm

#+BEGIN_SRC emacs-lisp

;;org-gfm

(use-package ox-gfm :ensure t :defer t)
;; (eval-after-load "org"
;;   '(require 'ox-gfm nil t))
(add-hook 'org-mode-hook (lambda () (require 'ox-md nil t)))

#+END_SRC

** org-latex with pygment minted

#+BEGIN_SRC emacs-lisp

;;org-latex

;pygment minted
					;(require 'org-latex)
(add-hook 'org-mode-hook (lambda () 
			   (require 'ox-latex)
			   (add-to-list 'org-latex-packages-alist '("" "minted"))
			   (setq org-latex-listings 'minted)

			   (setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
			   (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))

			   ;; (setq org-latex-pdf-process
			   ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
			   ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
			   ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

			   ;; (add-to-list 'load-path "~/.emacs.d/lisp/org-utf-to-xetex")
			   ;; (require 'org-utf-to-xetex)
			   ;; (add-hook 'org-mode-hook #'org-utf-to-xetex-prettify)

			   (setq org-latex-compiler "xelatex")
			   (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
			   (setq-default TeX-engine 'xetex)
			   (setq-default TeX-PDF-mode t)
			   (add-to-list 'org-latex-packages-alist '("" "fontspec"))))


#+END_SRC

** htmlize

#+BEGIN_SRC emacs-lisp

;;htmlize

;;(use-package org :ensure t)
(use-package htmlize :ensure t :defer t
  :config
  (setq org-html-html5-fancy t
        org-html-doctype "html5")

  (setq org-html-html5-fancy t
        org-html-doctype "html5"))
;;; Loading custom backend
;(add-to-list 'load-path "lisp/")
;(load-file "~/.emacs.d/lisp/pelican-html.el")
;(use-package pelican-html :ensure t :defer t :hook(org-mode))

#+END_SRC

** xelatex

#+BEGIN_SRC emacs-lisp

;;xelatex

;; (setq org-latex-to-pdf-process 
;;   '("xelatex -interaction nonstopmode %f"
;;      "xelatex -interaction nonstopmode %f")) ;; for multiple passes

#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp

;;org-bullets

(use-package org-bullets 
  :ensure t
  :defer t
  :hook (org-mode . (lambda () (org-bullets-mode 1))))

(add-hook 'org-mode-hook (lambda () (org-bullets-mode)))

#+END_SRC

** org-tree-slide

#+BEGIN_SRC emacs-lisp

;;org-tree-slide

(use-package org-tree-slide
  :ensure t
  :defer t)
(define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
(define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)

(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree))

#+END_SRC

** epresent

#+BEGIN_SRC emacs-lisp

;;epresent

(use-package epresent
  :ensure t
  :defer t)

#+END_SRC

** ox-pandoc
#+BEGIN_SRC emacs-lisp

;;ox-pandoc
(use-package ox-pandoc
  :ensure t
  :defer t
  :hook (org-mode . (lambda () (require 'ox-pandoc))))

#+END_SRC

** ob-twbs

#+BEGIN_SRC emacs-lisp

(use-package ox-twbs
    :ensure t
    :defer t
    :hook (org-mode . (lambda () (require 'ox-twbs))))

#+END_SRC

** ob-epub

#+BEGIN_SRC emacs-lisp

(use-package ox-epub
    :ensure t
    :defer t
    :hook (org-mode . (lambda () (require 'ox-epub))))

#+END_SRC

** ob-lua

#+BEGIN_SRC emacs-lisp

 ;; (eval-after-load "org"
 ;;  '(require 'ob-lua nil t))
(add-hook 'org-mode-hook (lambda () (require 'ob-lua nil t)))

#+END_SRC

* org-beautify

#+BEGIN_SRC emacs-lisp

;;org-beautify-theme

(use-package org-beautify-theme
  :ensure t
   :defer t
;; ;;  :init
;;   :hook (org-bullets-mode . (load-theme 'org-beautify))
 )

;; (add-hook 'org-mode-hook (lambda () (load-theme 'modified-org-beautify t)))

#+END_SRC

* god mode

#+BEGIN_SRC emacs-lisp

(use-package god-mode
  :ensure t
;;  :defer t
  :init 
     (global-set-key (kbd "C-h") 'previous-line)
  :config
;;     (define-key god-local-mode-map (kbd "h") 'previous-line)
;;     (define-key god-mode-map (kbd "h"
     (define-key god-local-mode-map (kbd ".") 'repeat)
     (define-key god-local-mode-map (kbd "i") 'god-local-mode)

     (global-set-key (kbd "C-x C-1") 'delete-other-windows)
     (global-set-key (kbd "C-x C-2") 'split-window-below)
     (global-set-key (kbd "C-x C-3") 'split-window-right)
     (global-set-key (kbd "C-x C-0") 'delete-window)

     (require 'god-mode-isearch)
     (define-key isearch-mode-map (kbd "<escape>") 'god-mode-isearch-activate)
     (define-key god-mode-isearch-map (kbd "<escape>") 'god-mode-isearch-disable)
     ;; org-mode
     (define-key god-local-mode-map [remap self-insert-command] 'my-god-mode-self-insert)

     (defun my-god-mode-self-insert ()
       (interactive)
       (if (and (bolp)
                (eq major-mode 'org-mode))
           (call-interactively 'org-self-insert-command)
         (call-interactively 'god-mode-self-insert)))
     )

(defun my-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'box
                      'bar)))

(add-hook 'god-mode-enabled-hook 'my-update-cursor)
(add-hook 'god-mode-disabled-hook 'my-update-cursor)

;;(global-set-key (kbd "<f12>") 'god-local-mode)

(global-set-key (kbd "<f12>") 'god-mode-all)

#+END_SRC

* dired

#+BEGIN_SRC emacs-lisp

(use-package dired
;;  :ensure t
  :defer t
  :config
     (require 'dired-x)
     (require 'dired-narrow)
     (require 'dired-subtree)
     (put 'dired-find-alternate-file 'disabled nil)
     (define-key dired-mode-map (kbd "C-<return>") 'dired-find-file)
     (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
     (define-key dired-mode-map (kbd "M-<return>") 'dired-find-file-other-window)
     ;; allow dired to delete or copy dir
     (setq dired-recursive-copies (quote always)) ; “always” means no asking
     (setq dired-recursive-deletes (quote top)) ; “top” means ask once
     (setq dired-dwim-target t)

     (defun dired-dotfiles-toggle ()
       "Show/hide dot-files"
       (interactive)
       (when (equal major-mode 'dired-mode)
	 (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
	     (progn
	       (set (make-local-variable 'dired-dotfiles-show-p) nil)
	       (message "h")
	       (dired-mark-files-regexp "^\\\.")
	       (dired-do-kill-lines))
	   (progn (revert-buffer) ; otherwise just revert to re-show
		  (set (make-local-variable 'dired-dotfiles-show-p) t)))))

     (define-key dired-mode-map (kbd "H-l")
       (lambda () (interactive) (dired-dotfiles-toggle)))
     
     (define-key dired-mode-map (kbd "^")
       (lambda () (interactive) (find-alternate-file "..")))
)


(use-package dired-narrow
  :ensure t
  :defer t
  :config
  (bind-key "C-c C-n" #'dired-narrow)
  (bind-key "C-c C-f" #'dired-narrow-fuzzy)
  (bind-key "C-x C-N" #'dired-narrow-regexp)
)

(use-package dired-subtree :ensure t
  :defer t
  :ensure t
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
)

#+END_SRC

* try

#+BEGIN_SRC emacs-lisp

(use-package try
  :defer t
  :ensure t)

#+END_SRC

* emojify

#+BEGIN_SRC emacs-lisp

(use-package emojify
  :ensure t
  :hook (emojify-mode . prettify-symbols-mode)
  :bind ("H-p p" . emojify-mode)
 )

#+END_SRC

* writeroom-mode

#+BEGIN_SRC emacs-lisp

(use-package writeroom-mode
  :ensure t
  :defer t
  :hook ((writeroom-mode . (lambda () (display-line-numbers-mode -1)))
	 (writeroom-mode . (lambda () (nlinum-mode -1)))
	 (org-tree-slide-mode . writeroom-mode)
	 )
  :bind ("H-<f11>" . writeroom-mode)
)

#+END_SRC

* custom_faces

#+BEGIN_SRC emacs-lisp

(defcustom modified-org-beautify-theme-use-box-hack 't
  "Use a 3 pixel box with the background color to add spacing.
Note that this has a side effect that can make the theme look
really bad under some circumstances."
  :type 'boolean)

(let* (;; (sans-font (cond ((x-list-fonts "Lucida Grande") '(:font "Lucida Grande"))
       ;;                  ((x-list-fonts "Verdana") '(:font "Verdana"))
       ;;                  ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
       ;;                  (nil (warn "Cannot find a Sans Serif Font.  Please report at: https://github.com/jonnay/org-beautify-theme/issues"))))
       (base-font-color (face-foreground 'default  nil 'default))
       (background-color (face-background 'default nil 'default))
       (headline `(:inherit default :foreground ,base-font-color))
       (primary-color (face-foreground 'mode-line nil))
       (secondary-color (face-background 'secondary-selection nil 'region))
       ;; (padding (if modified-org-beautify-theme-use-box-hack
       ;;              `(:line-width 5 :color ,background-color)
       ;;              nil))
       (org-highlights `(:foreground ,base-font-color :background ,secondary-color))

       )

  (custom-set-faces 
			       ;; `(org-agenda-structure ((t (:inherit default ,@sans-font :height 2.0 :underline nil))))
			       `(org-level-8 ((t ,headline)))
			       `(org-level-7 ((t ,headline)))
			       `(org-level-6 ((t ,headline)))
			       `(org-level-5 ((t ,headline)))
			       `(org-level-4 ((t ,headline)))
			       `(org-level-3 ((t (,@headline  :box ))))
			       `(org-level-2 ((t (,@headline  :height 1.15 ))))
			       `(org-level-1 ((t (,@headline  :height 1.35  ))))
			       `(org-document-title ((t (:inherit org-level-1 :height 1.5 :underline nil :box ))))

			       `(org-block ((t (:foreground ,base-font-color :background ,background-color :box nil))))
			       ;; `(org-block-begin-line ((t ,org-highlights)))
			       ;; `(org-block-end-line ((t ,org-highlights)))
			       ;; `(org-block ((,class nil)))
			       ;; `(org-block-begin-line ((t (:underline t))))
			       ;; `(org-block-end-line ((t (:overline t))))
			       `(org-block-begin-line ((t (:foreground ,(face-foreground 'shadow) :underline t :italic t))))
			       `(org-block-end-line ((t (:foreground ,(face-foreground 'shadow) :overline t :italic t))))


			       `(org-checkbox ((t (:foreground "#000000", :background "#93a1a1" :box (:line-width -3 :color "#93a1a1" :style "released-button")))))

			       `(org-headline-done ((t (:strike-through t))))
			       `(org-done ((t (:strike-through t))))

			       '(symbol-overlay-default-face ((t (:background "#3f444a" :foreground "#9ca0a4"))))
			       '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0))))
			       `(mode-line ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :box ,(face-foreground 'link)))))
			       `(mode-line-inactive ((t (:background ,(face-background 'default) :foreground ,(face-foreground 'default) :box nil))))
			       `(font-lock-constant-face ((t (:weight bold))))
			       `(font-lock-comment-face ((t (:italic t))))
			       ;; '(mode-line ((t (:background "#002b36"  :foreground "white" :box "dark cyan"))))
			       ;; '(mode-line-inactive ((t (:background "#002b36" :foreground "white" :box nil))))

))

#+END_SRC

