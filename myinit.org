#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+OPTIONS: toc:3          (only include two levels in TOC)
# #+HTML_HEAD:  <link rel="stylesheet" type="text/css" href="http://a-dma.github.io/gruvbox-css/gruvbox-dark-medium.min.css" />
#+INFOJS_OPT: view:overview toc:3 ltoc:3 mouse:underline buttons:0 path:https://orgmode.org/worg/code/org-info-js/org-info-src.js
#+PROPERTY: header-args:emacs-lisp    :tangle (concat "./init.el")
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+auto_tangle: t

* table of contents                                          :noexport:TOC_3:
- [[#starting-headers][starting headers]]
- [[#vanilla-emacs-settings][vanilla emacs settings]]
  - [[#mostly-related-to-initialization-process][mostly related to initialization process]]
    - [[#earlyinits][earlyinits]]
    - [[#deferred-compilation][deferred compilation]]
    - [[#other-init-settings-for-speed][other init settings for speed]]
    - [[#suppress-some-ad-handle-definition-warnings][suppress some ad-handle-definition warnings]]
    - [[#more-garbage-collection-related-settings][more garbage collection related settings]]
  - [[#some-constants-and-settings-that-need-to-be-configured-initially][some constants and settings that need to be configured initially]]
    - [[#constants][constants]]
    - [[#gnutls-and-security][gnutls and security]]
    - [[#encryption-related-additional][encryption related additional]]
    - [[#lexical-binding][lexical binding]]
  - [[#windowframe-look-and-feel-setting][window(frame) look and feel setting]]
    - [[#general-frame-and-window-settings][general frame and window settings]]
    - [[#minor-modes-menu-based-on-minions][minor-modes-menu-based-on-minions]]
    - [[#mode-line-modify][mode-line-modify]]
  - [[#basic-emacs-editor-preferences][basic emacs editor preferences]]
    - [[#set-load-path][set load path]]
    - [[#set-utf-8-as-default-coding-system][set utf-8 as default coding system]]
    - [[#autorevert][autorevert]]
    - [[#backup-and-auto-save-list][backup and auto-save-list]]
    - [[#clipboard][clipboard]]
    - [[#yesno][yes,no]]
    - [[#enable-some-disabled-commands][enable some disabled commands]]
    - [[#input-method][input method]]
    - [[#indentation-stuff][indentation stuff]]
    - [[#sentences-end-with-a-single-space][Sentences end with a single space]]
    - [[#line-spacing][line-spacing]]
    - [[#line-number][line-number]]
    - [[#show-parens][show-parens]]
    - [[#scrolling][scrolling]]
    - [[#marking][marking]]
    - [[#isearch][isearch]]
    - [[#explicitly-set-shell][explicitly set shell]]
    - [[#better-support-for-long-lines][better support for long lines]]
  - [[#theming][theming]]
  - [[#completion][completion]]
  - [[#emacs-built-in-packages][emacs built in packages]]
    - [[#imenu][imenu]]
    - [[#ibuffer][ibuffer]]
    - [[#comint-mode][comint-mode]]
    - [[#shell-mode][shell-mode]]
    - [[#eshell][eshell]]
    - [[#term-mode][term-mode]]
    - [[#eww--shr][eww & shr]]
    - [[#flymake][flymake]]
    - [[#flyspell][flyspell]]
    - [[#ediff][ediff]]
    - [[#tramp][tramp]]
    - [[#dired][dired]]
    - [[#org][org]]
    - [[#whitespace-mode][whitespace-mode]]
    - [[#outline][outline]]
    - [[#tab-bar--tabline][tab-bar & tabline]]
    - [[#recentf][recentf]]
    - [[#hippie_expand][hippie_expand]]
- [[#initialize-package-managers-straight-and-use-package][initialize package managers straight and use-package]]
- [[#external-libraries][external libraries]]
- [[#external-packages-i-use][external packages I use]]
  - [[#additional-garbage-collection-optimization-with-gmch][additional garbage collection optimization with gmch]]
  - [[#auto-tangle][auto-tangle]]
  - [[#keychords][keychords]]
  - [[#toc-org][toc-org]]
  - [[#diminish-and-delight][diminish and delight]]
  - [[#exec-path-form-shell][exec path form shell]]
  - [[#hydra][hydra]]
  - [[#undo-tree][undo-tree]]
  - [[#git][git]]
    - [[#git-gutter][git-gutter]]
    - [[#git-timemachine][git-timemachine]]
    - [[#magit--forge][magit & forge]]
    - [[#monky][monky]]
  - [[#yasnippet][yasnippet]]
  - [[#which-key][which-key]]
  - [[#avy][avy]]
  - [[#ace-link][ace-link]]
  - [[#ace-window][ace-window]]
  - [[#expand-region][expand-region]]
  - [[#ag][ag]]
  - [[#rg][rg]]
  - [[#smart-hungry-delete][smart-hungry delete]]
  - [[#ws-butler][ws-butler]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#phi-search][phi-search]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#modal-editing-modes][modal editing modes]]
    - [[#objed][objed]]
  - [[#restclient][restclient]]
  - [[#novel][nov.el]]
  - [[#pomidor][pomidor]]
  - [[#keyfreq][keyfreq]]
  - [[#company][company]]
  - [[#highligt-number-literals][highligt number literals]]
  - [[#vterm][vterm]]
  - [[#highlight-indent-guides][highlight-indent-guides]]
  - [[#minions][minions]]
  - [[#projectile][projectile]]
  - [[#smartparens][smartparens]]
  - [[#elpher][elpher]]
  - [[#typing][typing]]
    - [[#speed-type][speed-type]]
    - [[#typing-of-emacs][typing-of-emacs]]
  - [[#devdocs-browser][devdocs browser]]
  - [[#pdf-tools][pdf-tools]]
  - [[#scratch][scratch]]
  - [[#install-themes][install themes]]
  - [[#alternate-mode-lines][alternate mode-lines]]
  - [[#all-the-icons][all-the-icons]]
  - [[#minibuffer-completion-frameworks][minibuffer completion frameworks]]
    - [[#selectrum-consult-marginelia-embark][selectrum, consult, marginelia, embark]]
  - [[#programming-and-typesetting][programming and typesetting]]
    - [[#eglot][eglot]]
    - [[#cc][C/C++]]
    - [[#rust][rust]]
    - [[#ruby][ruby]]
    - [[#php][php]]
    - [[#lua][lua]]
    - [[#ocaml][ocaml]]
    - [[#crystal][crystal]]
    - [[#clojure][clojure]]
    - [[#zig][zig]]
    - [[#d][d]]
    - [[#nim][nim]]
    - [[#raku][raku]]
    - [[#csv][csv]]
    - [[#yamltoml-and-json][yaml,toml and json]]
    - [[#rfc-mode][rfc-mode]]
    - [[#go][go]]
    - [[#web][web]]
    - [[#tree-sitter][tree-sitter]]
  - [[#dired-related][dired related]]
  - [[#org-related][org related]]
    - [[#org-bullets][org-bullets]]
    - [[#ox-pandoc][ox-pandoc]]
    - [[#htmlize][htmlize]]
- [[#start-server][start server]]
- [[#load-theme][load-theme]]
- [[#initial-scratch-buffer-settings][initial scratch-buffer settings]]
- [[#load-custom-faces][load custom faces]]
- [[#set-custom-variables][set custom variables]]
- [[#provide-init-and-finish][provide init and finish]]

* starting headers
#+begin_src emacs-lisp
;;; package --- Summary
;;; Commentary:
;;; Code:

;;(package-initialize)

(let ((file-name-handler-alist nil))
  (require 'package)

#+end_src


* vanilla emacs settings

** mostly related to initialization process
*** earlyinits

#+begin_src emacs-lisp

(when (version< emacs-version "27.0")
  (let ((dafile (expand-file-name "early-init.el"  user-emacs-directory)))
                  (when (file-exists-p dafile) (load-file dafile))))
#+end_src

*** deferred compilation

#+begin_src emacs-lisp

(if (not (version< emacs-version "27.0"))
    (progn
      (if (fboundp 'native-comp-available-p) (setq comp-deferred-compilation t))
      (setq warning-suppress-types '((flycheck syntax-checker) (comp))))
  )

#+end_src

*** other init settings for speed

#+begin_src emacs-lisp

(setq inhibit-default-init 1)
(setq initial-major-mode 'fundamental-mode)
;; (kill-buffer "*scratch*")

#+end_src

*** suppress some ad-handle-definition warnings

#+begin_src emacs-lisp

(setq ad-redefinition-action 'accept)

#+end_src

*** more garbage collection related settings

#+begin_src emacs-lisp

(defun yae-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun yae-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold yae-gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'yae-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'yae-restore-garbage-collection-h)

#+end_src


** some constants and settings that need to be configured initially
*** constants

#+begin_src emacs-lisp

(defconst EMACS24+   (> emacs-major-version 23))
(defconst EMACS25+   (> emacs-major-version 24))
(defconst EMACS26+   (> emacs-major-version 25))
(defconst EMACS27+   (> emacs-major-version 26))
(defconst EMACS28+   (> emacs-major-version 27))
(defconst EMACS29+   (> emacs-major-version 28))
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
(defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix)))

#+end_src

*** gnutls and security

#+begin_src emacs-lisp

;;; Security

;; Emacs is essentially one huge security vulnerability, what with all the
;; dependencies it pulls in from all corners of the globe. Let's try to be at
;; least a little more discerning.
(setq gnutls-verify-error (not (getenv-internal "INSECURE"))
      gnutls-algorithm-priority
      (when (boundp 'libgnutls-version)
        (concat "SECURE128:+SECURE192:-VERS-ALL"
                (if (and (not IS-WINDOWS)
                         (not (version< emacs-version "26.3"))
                         (>= libgnutls-version 30605))
                    ":+VERS-TLS1.3")
                ":+VERS-TLS1.2"))
      ;; `gnutls-min-prime-bits' is set based on recommendations from
      ;; https://www.keylength.com/en/4/
      gnutls-min-prime-bits 3072
      tls-checktrust gnutls-verify-error
      ;; Emacs is built with `gnutls' by default, so `tls-program' would not be
      ;; used in that case. Otherwise, people have reasons to not go with
      ;; `gnutls', we use `openssl' instead. For more details, see
      ;; https://redd.it/8sykl1
      tls-program '("openssl s_client -connect %h:%p -CAfile %t -nbio -no_ssl3 -no_tls1 -no_tls1_1 -ign_eof"
                    "gnutls-cli -p %p --dh-bits=3072 --ocsp --x509cafile=%t \
--strict-tofu --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' %h"
                    ;; compatibility fallbacks
                    "gnutls-cli -p %p %h"))

;; Emacs stores `authinfo' in $HOME and in plain-text. Let's not do that, mkay?
;; This file stores usernames, passwords, and other such treasures for the
;; aspiring malicious third party.
(setq auth-sources (list (expand-file-name "authinfo.gpg"  user-emacs-directory)
                         "~/.authinfo.gpg"))

;;gnutls
(add-hook 'after-init-time-hook (setq gnutls-min-prime-bits 4096))

#+end_src

*** encryption related additional

#+begin_src emacs-lisp

(setq epg-gpg-program "gpg2")
(setq auth-sources '("~/.authinfo.gpg"))

#+end_src

*** lexical binding

#+begin_src emacs-lisp

(setq-default lexical-binding t)

#+end_src



** window(frame) look and feel setting
*** general frame and window settings
#+begin_src emacs-lisp

(set-window-margins nil 2)
(setq inhibit-startup-message t)
;; (global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(setq initial-scratch-message nil)
;; (setq battery-mode-line-format " [%b%p%% } ")
;; (display-battery-mode t)
;; (display-time-mode t)
(setq frame-resize-pixelwise t)
(setq redisplay-skip-fontification-on-input t)
(setq idle-update-delay 1.0)
(setq compilation-scroll-output t)

;; (set-default-font "JetBrains Mono-9") ;;; set default font
;; (setq default-frame-alist '((font . "Jetbrains Mono 9"))) ;;; set default font for emacs --daemon / emacsclient
(defvar my-default-font "JetBrainsMono Nerd Font 9")

;; (setq default-frame-alist '((font . "JetBrainsMono Nerd Font 9"))) ;;; set default font for emacs --daemon / emacsclient
(add-to-list 'default-frame-alist (cons 'font  my-default-font))
(set-fontset-font t nil "Dejavu Sans Mono" nil 'append)
(set-fontset-font t 'ethiopic "Noto Sans Ethiopic")
;; (set-fontset-font t 'thai "Leelawadee UI" nil 'append)

;; (setq w32-enable-synthesized-fonts t) ;;The w32-enable-synthesized-fonts variable is obsolete starting from Emacs 24.4, as Emacs no longer has this limitation.
;; (set-face-font 'italic "-*-Courier New-normal-i-*-*-11-*-*-*-c-*-iso8859-1")
;; (set-face-font 'bold-italic "-*-Courier New-bold-i-*-*-11-*-*-*-c-*-iso8859-1")

(defvar my-default-font-height (face-attribute 'default :height))

(defun my-set-to-default-font-height ()
  (interactive)
  ;; (set-face-attribute 'default nil :height my-default-font-height)
  (set-face-font 'default my-default-font)
  (message (number-to-string (face-attribute 'default :height)))
  )


(defun my-increase-default-font-height ()
  (interactive)
  (let* ((default-face-height (face-attribute 'default :height)))
    (set-face-attribute 'default nil :height (+ default-face-height 5))
	(message (number-to-string (face-attribute 'default :height)))
	))


(defun my-decrease-default-font-height ()
  (interactive)
  (let* ((default-face-height (face-attribute 'default :height)))
    (set-face-attribute 'default nil :height (- default-face-height 5))
	(message (number-to-string (face-attribute 'default :height)))
	))

(global-set-key (kbd "C-M-=") 'my-increase-default-font-height)
(global-set-key (kbd "C-M--") 'my-decrease-default-font-height)
(global-set-key (kbd "C-M-0") 'my-set-to-default-font-height)


;; (defadvice text-scale-increase (around all-buffers (arg) activate)
;;   (dolist (buffer (buffer-list))
;;     (with-current-buffer buffer
;;       ad-do-it)))

;; (defadvice text-scale-decrease (around all-buffers (arg) activate)
;;   (dolist (buffer (buffer-list))
;;     (with-current-buffer buffer
;;       ad-do-it)))

#+end_src

*** minor-modes-menu-based-on-minions

#+begin_src emacs-lisp

(defun yae-minions--modes ()
  (let (local global)
    (dolist (mode (cl-mapcan (pcase-lambda (`(,mode ,_))
                                          (and (boundp mode)
                                               (symbol-value mode)
                                               (list mode)))
                                        minor-mode-alist))
      (when (local-variable-if-set-p mode)
        (push mode local)
        (push mode global)))
    (list (sort local  #'string<)
          (sort global #'string<))))

(defun yae-minions-minor-modes-menu ()
  (interactive)
  (pcase-let ((map (make-sparse-keymap))
              (`(,local ,global) (yae-minions--modes)
			   ))
    (define-key-after map [--local] (list 'menu-item "Local Modes"))
    (dolist (mode local)
      (if-let (menu (and (symbol-value mode)
                         (yae-minions--mode-menu mode)
						 ))
          (define-key-after map (vector mode) menu)
        (yae-minions--define-toggle map mode)
		))
    (define-key-after map [--line2]  (list 'menu-item "--double-line"))
    (define-key-after map [--global] (list 'menu-item "Global Modes"))
    (dolist (mode global)
      (if-let (menu (and (symbol-value mode)
                         (yae-minions--mode-menu mode)
						 ))
          (define-key-after map (vector mode) menu)
        (yae-minions--define-toggle map mode)))
    (define-key-after map [--line1] (list 'menu-item "--double-line"))
    (define-key-after map [describe-mode]
      (list 'menu-item "Describe modes" 'describe-mode))
    (condition-case nil
        (popup-menu map)
      (quit nil))))

(defun yae-minions--mode-menu (mode)
  (let* ((map  (or (cdr (assq mode minor-mode-map-alist))
                   (cdr (assq mode minor-mode-overriding-map-alist))))
         (menu (and (keymapp map)
                    (lookup-key map [menu-bar])))
         (menu (and menu
                    (mouse-menu-non-singleton menu))))
    (and menu
         (let ((wrap (make-sparse-keymap)))
           (set-keymap-parent wrap menu)
           (yae-minions--define-toggle wrap mode)
           (define-key-after wrap [yae-minions] (list 'menu-item "--double-line"))
           (list 'menu-item (symbol-name mode) wrap)))))

(defun yae-minions--define-toggle (map mode)
  (let ((fn (or (get mode :minor-mode-function) mode)))
    (when (functionp fn)
      (define-key-after map (vector mode)
        (list 'menu-item (symbol-name mode) fn
              :button (cons :toggle mode))))))

#+end_src

*** mode-line-modify

#+begin_src emacs-lisp

(defun mode-line-split--format (left right)
  "Return a string of `window-width' length containing LEFT and RIGHT, aligned respectively."
  (let ((reserve (length right)))
    (concat left
            " "
            (propertize " "
                        'display `((space :align-to (- right (- 0 right-margin) ,reserve))))
            right)))

;; Set the new mode-line-format
(setq-default mode-line-format
              '((:eval
                 (mode-line-split--format
                  ;; Left
                  (format-mode-line
                   '("%e" mode-line-front-space
					 (:propertize
					  ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
					  display
					  (min-width
					   (5.0)))
					 mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position))
				  ;; Right
				  (format-mode-line
				   '((vc-mode vc-mode)
					 "   "
					 mode-name " ";; "%m"
					 (:eval (propertize "[+]" 'local-map (make-mode-line-mouse-map 'mouse-1 'yae-minions-minor-modes-menu)))
					 "   "
					 (:eval (propertize "[☰]" 'local-map (make-mode-line-mouse-map 'mouse-1 'menu-bar-open)))
					 " "
					 "  " mode-line-misc-info mode-line-end-spaces
					 )
				   )))))

#+end_src

*** COMMENT mode-line-trial

#+begin_src emacs-lisp

(setq-default mode-line-format
      '((:eval (format-mode-line (propertize "[+]" 'local-map (make-mode-line-mouse-map 'mouse-1 'yae-minions-minor-modes-menu))))
        (column-number-mode "  %c")))

#+end_src


** basic emacs editor preferences
*** set load path

#+begin_src emacs-lisp

(let ((default-directory  (expand-file-name "lisp" user-emacs-directory)))
  (progn
	(unless (file-directory-p default-directory)
	  (make-directory default-directory))
	(normal-top-level-add-subdirs-to-load-path)))

#+end_src

*** set utf-8 as default coding system

#+begin_src emacs-lisp

(set-language-environment "UTF-8")

#+end_src

*** autorevert

#+begin_src emacs-lisp

(add-hook 'after-init-hook  #'global-auto-revert-mode)

#+end_src

*** backup and auto-save-list

#+begin_src emacs-lisp

;;backups

(let ((thedir  (expand-file-name "auto-save-list" user-emacs-directory)))
	(unless (file-directory-p thedir)
	  (make-directory thedir)))

(let ((thedir  (expand-file-name "backups" user-emacs-directory)))
	(unless (file-directory-p thedir)
	  (make-directory thedir)))

(setq ;; backup-directory-alist '(((expand-file-name "backups" user-emacs-directory)))
 backup-by-copying t    ; Don't delink hardlinks
 version-control t      ; Use version numbers on backups
 delete-old-versions t  ; Automatically delete excess backups
 kept-new-versions 20   ; how many of the newest versions to keep
 kept-old-versions 5    ; and how many of the old
 ;;auto-save-file-name-transforms `((expand-file-name "backups" user-emacs-directory) t)
 auto-save-file-name-transforms
 `((".*" ,(expand-file-name  "auto-save-list" user-emacs-directory) t))
 backup-directory-alist
 `((".*" . ,(expand-file-name  "backups" user-emacs-directory)))
 )

#+end_src

*** clipboard

#+begin_src emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+end_src

*** yes,no

#+begin_src emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+end_src

*** enable some disabled commands

#+begin_src emacs-lisp

;; enable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;; enabled change region case commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

#+end_src

*** input method

#+begin_src emacs-lisp

;;input-method

(defun myinput-settings ()
  "Settings based on input method."
  (cond ((string= current-input-method "ethiopic")
         (progn (setq ethio-primary-language 'amharic)
                (ethio-select-a-translation)))
        (t nil)))

(add-hook 'input-method-activate-hook #'myinput-settings)

#+end_src

*** indentation stuff

#+begin_src emacs-lisp

;; ;; to setup tabs
;; (setq c-basic-indent 2)
;; (setq tab-width 4)
;; (setq indent-tabs-mode nil)

(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'c-basic-indent 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq indent-tabs-mode nil)
(setq-default tab-width 4)

;; make tab key do indent first then completion.
(setq-default tab-always-indent 'complete)

#+end_src

*** Sentences end with a single space

#+begin_src emacs-lisp

(setq sentence-end-double-space nil)

#+end_src

*** line-spacing

#+begin_src emacs-lisp

;; (setq-default line-spacing 0.2)
;; (add-hook 'minibuffer-setup-hook (lambda () (setq line-spacing nil)))

#+end_src

*** line-number

#+begin_src emacs-lisp

;;line-numbers

(setq-default display-line-numbers-type 'relative
      display-line-numbers-grow-only t
      display-line-numbers-width-start t
      display-line-numbers-width 4
      )

(global-display-line-numbers-mode t)

#+end_src

*** show-parens

#+begin_src emacs-lisp

(show-paren-mode t)

#+end_src

*** scrolling
**** horizontal scrolling

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'html-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'web-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'org-mode (lambda () (setq truncate-lines nil)))
;; (add-hook 'eww-after-render-hook (lambda () (setq truncate-lines t)))

(setq hscroll-margin 0)

(global-set-key (kbd "<mouse-7>") #'(lambda ()
                                      (interactive)
                                      (scroll-left 4)))

(global-set-key (kbd "<mouse-6>") #'(lambda ()
                                      (interactive)
                                      (scroll-right 4)))

#+end_src

**** smooth-scrolling

#+begin_src emacs-lisp
  ;; Make scrolling less stuttered
  (when EMACS29+
	(pixel-scroll-precision-mode t)
	(setq-default pixel-scroll-precision-large-scroll-height 40.0
				  pixel-scroll-precision-interpolation-factor 30))

  (customize-set-variable 'auto-window-vscroll nil)
  (customize-set-variable 'fast-but-imprecise-scrolling t)
  (customize-set-variable 'scroll-conservatively 101)
  (customize-set-variable 'scroll-margin 0)
  (customize-set-variable 'scroll-preserve-screen-position t)
  ;; (customize-set-variable 'mouse-wheel-progressive-speed t)

#+end_src

*** marking

#+begin_src emacs-lisp

(transient-mark-mode 1)

(delete-selection-mode 1)

(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
 Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))

(defun jump-to-mark ()
  "Jumps to the local mark, respecting the `mark-ring' order.
This is the same as using \\[set-mark-command] with the prefix argument."
  (interactive)
  (set-mark-command 1))

(defun exchange-point-and-mark-no-activate ()
  "Identical to \\[exchange-point-and-mark] but will not activate the region."
  (interactive)
  (exchange-point-and-mark)
  (deactivate-mark nil))

#+end_src

*** isearch

#+begin_src emacs-lisp

(setq-default
 ;; Match count next to the minibuffer prompt
 isearch-lazy-count t
 ;; Don't be stingy with history; default is to keep just 16 entries
 search-ring-max 200
 regexp-search-ring-max 200)

;; swiper like fuzzy search
;; (setq-default
;;  isearch-regexp-lax-whitespace t
;;  search-whitespace-regexp ".*?")

;; (defun move-end-of-line-maybe-ending-isearch (arg)
;; "End search and move to end of line, but only if already at the end of the minibuffer."
;;   (interactive "p")
;;   (if (eobp)
;;       (isearch-mb--after-exit
;;        (lambda ()
;;          (move-end-of-line arg)
;;          (isearch-done)))
;;     (move-end-of-line arg)))

;; (define-key isearch-mb-minibuffer-map (kbd "C-e") 'move-end-of-line-maybe-ending-isearch)

#+end_src

*** explicitly set shell

#+begin_src emacs-lisp

(setq explicit-shell-file-name "/bin/bash")

#+end_src

*** better support for long lines

#+begin_src emacs-lisp

;; Better support for files with long lines
(setq-default bidi-paragraph-direction 'left-to-right)
(setq-default bidi-inhibit-bpa t)
(global-so-long-mode 1)

#+end_src


** theming

#+begin_src emacs-lisp

  (add-hook 'after-init-time-hook
            (progn
              (defadvice load-theme (after custom-faces-after-load-theme())
                "Insert an empty line when moving up from the top line."
                (let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
                  (when (file-exists-p dafile) (load-file dafile))
                  ;; (save-excursion
                  ;;  (if (and solaire-mode (fboundp 'dashboard-refresh-buffer)) (dashboard-refresh-buffer)))
                  ))


              (ad-activate 'load-theme)

              (defadvice disable-theme (after custom-faces-after-disable-theme())
                "Insert an empty line when moving up from the top line."
                (let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
                  (when (file-exists-p dafile) (load-file dafile))
                  ;; (save-excursion
                  ;;  (if (and solaire-mode (fboundp 'dashboard-refresh-buffer)) (dashboard-refresh-buffer)))
                  ))


              (ad-activate 'disable-theme)

              )
            )

  (add-hook 'after-init-time-hook
            (let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
                  (when (file-exists-p dafile) (load-file dafile))))


#+end_src


** completion

#+begin_src emacs-lisp

(when (not EMACS26+) (ido-mode))
(when EMACS26+ (icomplete-mode))
(when EMACS27+ (fido-mode))
(when EMACS27+ (fido-vertical-mode))

#+end_src


** emacs built in packages

*** imenu

#+begin_src emacs-lisp

(with-eval-after-load 'imenu (set-default 'imenu-auto-rescan t))

#+end_src

*** ibuffer

#+begin_src emacs-lisp

(global-set-key (kbd "C-x C-b") 'ibuffer)

#+end_src

*** comint-mode

#+begin_src emacs-lisp

;;conmint-mode
(with-eval-after-load 'comint
  (setq comint-scroll-show-maximum-output nil)
  (setq comint-scroll-to-bottom-on-input nil)
  (setq comint-scroll-to-bottom-on-output nil)
  (add-hook 'comint-mode-hook 'display-line-numbers-mode -1)
  )

#+end_src

*** shell-mode

#+begin_src emacs-lisp

;;shell-mode

(with-eval-after-load 'shell
  (define-key shell-mode-map (kbd "<tab>") 'completion-at-point)
  (define-key shell-mode-map (kbd "<backtab>") 'completion-at-point)
  (add-hook 'comint-mode-hook (lambda () (display-line-numbers-mode -1))))

#+end_src

*** eshell

#+begin_src emacs-lisp

(with-eval-after-load 'eshell
  (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
                                 "ncftp" "pine" "tin" "trn" "elm" "vim" "kak" "nano" "tmux" "alpine" "mutt"
                                 "htop" "irb" "python" "python3" "python2" "csc" "sbcl" "guile" "guile2" "node"
                                 "joe" "jstar" "jmacs" "jpico" "ne" "micro" "nnn" "lf" "ranger"))
  (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode -1)))
  (setq eshell-scroll-show-maximum-output nil)
  )

              
#+end_src

*** term-mode

#+begin_src emacs-lisp

(with-eval-after-load 'term
  (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
  (add-hook 'term-mode-hook 'display-line-numbers-mode -1)
  (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1))))

#+end_src

*** eww & shr

#+begin_src emacs-lisp

(add-hook 'eww-mode-hook (lambda () (display-line-numbers-mode -1)))

#+end_src

*** flymake

#+begin_src emacs-lisp


(with-eval-after-load 'flymake
  (setq flymake-fringe-indicator-position 'right-fringe)
  (setq flymake-suppress-zero-counters t)
  (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake))

(add-hook 'prog-mode-hook 'flymake-mode t)

;; (run-with-idle-timer 0.2 flymake-mode t)

#+end_src

*** flyspell

#+begin_src emacs-lisp

(with-eval-after-load 'flyspell
  (cond
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-extra-args '("-d en_US")))
   
   ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")))))

(when (or (executable-find "hunspell") (executable-find "aspell"))
  (progn
  (add-hook 'prog-mode-hook 'flyspell-prog-mode t)
  (add-hook 'text-mode-hook 'flyspell-mode t)))

#+end_src

*** ediff

#+begin_src emacs-lisp

(add-hook 'ediff-prepare-buffer-hook 'outline-show-all)
(add-hook 'ediff-quit-hook 'winner-undo)

(with-eval-after-load 'ediff
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-merge-split-window-function 'split-window-horizontally))

#+end_src

*** tramp

#+begin_src emacs-lisp

(with-eval-after-load 'tramp
  (setq remote-file-name-inhibit-cache nil)
  (setq vc-ignore-dir-regexp
        (format "%s\\|%s"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))
  (setq tramp-verbose 1))

#+end_src

*** dired

#+begin_src emacs-lisp

(add-hook 'dired-mode-hook 'dired-hide-details-mode t)

(with-eval-after-load 'dired
                      (require 'dired-aux)
                      (require 'dired-x)
                      ;; (require 'dired-narrow)
                      ;; (require 'dired-subtree)
                      (setq dired-listing-switches "--group-directories-first -lah")
                      (put 'dired-find-alternate-file 'disabled nil)
                      (define-key dired-mode-map (kbd "C-<return>") 'dired-find-file)
                      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
                      (define-key dired-mode-map (kbd "M-<return>") 'dired-find-file-other-window)
                      ;; allow dired to delete or copy dir
                      (setq dired-recursive-copies (quote always)) ; “always” means no asking
                      (setq dired-recursive-deletes (quote top)) ; “top” means ask once
                      (setq dired-dwim-target t)

                      (defun dired-dotfiles-toggle ()
                        "Show/hide dot-files"
                        (interactive)
                        (when (equal major-mode 'dired-mode)
                          (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
                              (progn
                                (set (make-local-variable 'dired-dotfiles-show-p) nil)
                                (message "h")
                                (dired-mark-files-regexp "^\\\.")
                                (dired-do-kill-lines))
                            (progn (revert-buffer) ; otherwise just revert to re-show
                                   (set (make-local-variable 'dired-dotfiles-show-p) t)))))

                      (define-key dired-mode-map (kbd "H-l")
                                  (lambda () (interactive) (dired-dotfiles-toggle)))

                      (define-key dired-mode-map (kbd "^")
                                  (lambda () (interactive) (find-alternate-file "..")))

                      (setq wdired-allow-to-change-permissions t)
                      ;; (defadvice dired-subtree-toggle (after dired-icons-refreash ())
                      ;;   "Insert an empty line when moving up from the top line."
                      ;;   (revert-buffer))

                      ;; (ad-activate 'dired-subtree-toggle)

                      ;; (defadvice dired-subtree-cycle (after dired-icons-refreash ())
                      ;;   "Insert an empty line when moving up from the top line."
                      ;;   (revert-buffer))

                      ;; (ad-activate 'dired-subtree-cycle)
                      )



#+end_src

*** org

#+begin_src emacs-lisp

;; :mode (("\\.org\\'" . org-mode)
;;        ("\\.org$" . org-mode))

(with-eval-after-load 'org
  (setq org-src-fontify-natively t
		org-src-tab-acts-natively t
		org-confirm-babel-evaluate nil
		org-edit-src-content-indentation 0))

(eval-after-load "org"
  (progn
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((python . t)
	   (perl . t)
	   (shell . t)
	   (ruby . t)
	   (emacs-lisp . t)))
	
	'(require 'ox-md nil t)))

#+end_src

*** whitespace-mode

#+begin_src emacs-lisp

(with-eval-after-load 'whitespace
  ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://xahlee.info/emacs/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          )))

#+end_src

*** outline
**** folding
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'outline-minor-mode t)
(add-hook 'makdown-mode-hook 'outline-minor-mode t)
;; (add-hook 'outline-minor-mode-hook (lambda () (setq outline-minor-mode-cycle t)))

(defun set-outline-minor-mode-regexp ()
  ""
  (outline-minor-mode 1)
  (let ((regexp-list (append outline-minor-mode-list nil))
		(find-regexp
		 (lambda (lst)
		   ""
		   (let ((innerList (car lst)))
			 (if innerList
				 (if (string= (car innerList) major-mode)
					 (car (cdr innerList))
				   (progn (pop lst)
						  (funcall find-regexp lst))))
			 ))))
    (make-local-variable 'outline-regexp)
    (setq outline-regexp (funcall find-regexp regexp-list)))
  )

(setq outline-minor-mode-list 
      (list ;; '(emacs-lisp-mode "\\(?:;;; ?\\)\\|(defun\\|(defvar\\|(defcustom\\|(defconst\\|(defgroup\\|(defmacro")
			'(shell-mode "^dove@zsh.*[#%\$] ")
			'(sh-mode "^\\(?:###[ \t]*\\).*\n\\|function .*[{(]")
			'(perl-mode "sub ")
			'(eshell-mode "^[^#$\n]* [#$] ")
            ;; '(ruby-mode "[ ]+def \\|cloud_pattern\\|[ ]+cloud_node")
			;; '(ruby-mode "class \\|[ ]+class \\|module \\|[ ]+module \\|def \\|[ ]+def \\|begin \\|[ ]+begin ")
			;; '(ruby-mode "class \\|[ ]+class \\|module \\|[ ]+module \\|def \\|[ ]+def \\|begin \\|[ ]+begin ")
			;; ([:space:]*)
			'(ruby-mode "^\\(?:###[ \t]*\\).*\\|^\\([ \t]*\\)class \\|^\\([ \t]*\\)module \\|^\\([ \t]*\\)def ")
			;; '(crystal-mode "^\\(?:###[ \t]*\\).*\\|^\\([ \t]*\\)class \\|^\\([ \t]*\\)module \\|([ \t]*\\)macro \\|([ \t]*\\)lib \\|([ \t]*\\)struct \\|([ \t]*\\)enum \\|([ \t]*\\)union \\|([ \t]*\\)annotation \\|^\\([ \t]*\\)def ")
			;; '(crystal-mode "\\(def\\|class\\|module\\|macro\\|lib\\|struct\\|enum\\|union\\|annotation\\)"
            '(Man-mode "^[A-Z]+")
			'(woman-mode "^[A-Z]+")
            ))

(mapc (lambda (mode-name) 
        (add-hook mode-name  'set-outline-minor-mode-regexp t))
      '(shell-mode-hook
        sh-mode-hook
        ;; emacs-lisp-mode-hook
        eshell-mode-hook
        ruby-mode-hook
		;; crystal-mode-hook
        Man-mode-hook
		woman-mode
        ))

;; ;; (setq outline-regexp "^\\([ \t]*\\)class \\|^\\([ \t]*\\)module \\|^\\([ \t]*\\)def \\|^\\([ \t]*\\)begin ")
;; ;; (setq-local outline-heading-end-regexp "\\_<end\\_>")
;; ;; (setq-local outline-level
;; ;;             (lambda ()
;; ;;               "`outline-level' function for Python mode."
;; ;;               (1+ (/ (current-indentation) python-indent-offset))))

;; ;; (setq outline-regexp ruby-indent-beg-re)
;; ;; (setq outline-regexp "^[[:upper]]+")

#+end_src

*** COMMENT hideshow

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'hs-minor-mode t)

#+end_src

*** tab-bar & tabline

#+begin_src emacs-lisp

(setq tab-line-tab-name-truncated-max 10)

#+end_src

*** recentf

#+begin_src emacs-lisp

;; Turn on recentf mode
(add-hook 'after-init-hook #'recentf-mode)
(customize-set-variable 'recentf-save-file
                        (expand-file-name "recentf" user-emacs-directory))

#+end_src

*** COMMENT tempo

This file provides a simple way to define powerful templates, or
macros, if you wish.  It is mainly intended for, but not limited to,
other programmers to be used for creating shortcuts for editing
certain kind of documents. Most of what I learned about this package from the following the article on https://www.lysator.liu.se/~davidk/elisp/tempo-examples.html by the Author(or I think it is the author)

The settings in the "general settings" part are used to override "space" so that tempo completion could take place after writing a valid tag and  define a keymap for the package.
Movement keys are set to "C-c t f", and "C-c t b" for moving forward and moving backward respectively  inside the stops in the snippet.

**** general settings needed for snippets

sourced from https://www.lysator.liu.se/~davidk/elisp/tempo-examples.html

#+begin_src emacs-lisp

(require 'tempo)

(defun tempo-space ()
  ""
  (interactive)
  (if (tempo-expand-if-complete)
      nil
    (insert " ")))

(defun set-tempo ()
  "Set up emacs-lisp mode to use tempo.el"
  (define-prefix-command 'tempo-map)
  (local-set-key (kbd "C-c t") 'tempo-map)
  (define-key tempo-map (kbd "c") 'tempo-complete-tag)  ;; define keys for complete-tag and movement through stops
  (define-key tempo-map (kbd "n") 'tempo-forward-mark)
  (define-key tempo-map (kbd "p") 'tempo-backward-mark)

  (local-set-key " " 'tempo-space))


#+end_src

**** c && c++ snippets using tempo

sourced from https://www.lysator.liu.se/~davidk/elisp/tempo-examples.html

#+begin_src emacs-lisp

(require 'tempo)

;; This is a way to hook tempo into cc-mode

(defvar c-tempo-tags nil
  "Tempo tags for C mode")

(defvar c++-tempo-tags nil
  "Tempo tags for C++ mode")

;;; C-Mode Templates and C++-Mode Templates (uses C-Mode Templates also)
(add-hook 'c-mode-hook
          (lambda () (progn
                      ;;; Preprocessor Templates (appended to c-tempo-tags)

                       (tempo-define-template "c-include"
                                              '("#include <" r ".h>" > n
                                                )
                                              "#include"
                                              "Insert a #include <> statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-ifdef"
                                              '("#ifdef " (p "ifdef-clause: " clause) > n> p n
                                                "#else /* !(" (s clause) ") */" n> p n
                                                "#endif /* " (s clause)" */" n>
                                                )
                                              "#ifdef"
                                              "Insert a #ifdef #else #endif statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-ifndef"
                                              '("#ifndef " (p "ifndef-clause: " clause) > n 
                                                "#define " (s clause) n> p n
                                                "#endif /* " (s clause)" */" n>
                                                )
                                              "#ifndef"
                                              "Insert a #ifndef #define #endif statement"
                                              'c-tempo-tags)

                       ;;; C-Mode Templates

                       (tempo-define-template "c-if"
                                              '(> "if(" (p "if-clause: " clause) ")"  n> 
                                                  "{" > n> r n 
                                                  "} /* end of if(" (s clause) ") */" > n> 
                                                  )
                                              "if"
                                              "Insert a C if statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-else"
                                              '(> "else" n> 
                                                  "{" > n> r n 
                                                  "} /* end of else */" > n>
                                                  )
                                              "else"
                                              "Insert a C else statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-if-else"
                                              '(> "if(" (p "if-clause: " clause) ")"  n> 
                                                  "{" > n> r n 
                                                  "} /* end of if(" (s clause) ") */" > n>
                                                  > "else" n> 
                                                  "{" > n> r n 
                                                  "} /* end of if(" (s clause) ")else */" > n> 
                                                  )
                                              "ifelse"
                                              "Insert a C if else statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-while"
                                              '(> "while(" (p "while-clause: " clause) ")" >  n> 
                                                  "{" > n> r n 
                                                  "} /* end of while(" (s clause) ") */" > n>
                                                  )
                                              "while"
                                              "Insert a C while statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-for"
                                              '(> "for(" (p "for-clause: " clause) ")" >  n> 
                                                  "{" > n> r n 
                                                  "} /* end of for(" (s clause) ") */" > n>
                                                  )
                                              "for"
                                              "Insert a C for statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-for-i"
                                              '(> "for(" (p "variable: " var) " = 0; " (s var)
                                                  " < "(p "upper bound: " ub)"; " (s var) "++)" >  n> 
                                                  "{" > n> r n 
                                                  "} /* end of for(" (s var) " = 0; "
                                                  (s var) " < " (s ub) "; " (s var) "++) */" > n>
                                                  )
                                              "fori"
                                              "Insert a C for loop: for(x = 0; x < ..; x++)"
                                              'c-tempo-tags)

                       (tempo-define-template "c-for"
                                              '(> "for(" (p "for-clause: " clause) ")" >  n> 
                                                  "{" > n> r n 
                                                  "} /* end of for(" (s clause) ") */" > n>
                                                  )
                                              "for"
                                              "Insert a C for statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-main"
                                              '(> "main(int argc, char *argv[])" >  n> 
                                                  "{" > n> r n 
                                                  "} /* end of main() */" > n>
                                                  )
                                              "main"
                                              "Insert a C main statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-if-malloc"
                                              '(> "if((" (p "variable: " var) " = ("
                                                  (p "type: " type) " *) malloc(sizeof(" (s type) 
                                                  "))) == (" (s type) " *) NULL)" n> 
                                                  "{" > n> r n 
                                                  "} /* end of if((" (s var) " = (" (s type) 
                                                  " *) malloc...) == NULL) */" > n>
                                                  )
                                              "ifmalloc"
                                              "Insert a C if(malloc...) statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-switch"
                                              '(> "switch(" (p "switch-condition: " clause) ")" >  n> 
                                                  "{" > n 
                                                  "case " (p "first value: ") ":" > n> p n
                                                  "break;" > n> p n
                                                  "default:" > n> p n
                                                  "break;" > n
                                                  "} /* end of switch(" (s clause) ") */" > n>
                                                  )
                                              "switch"
                                              "Insert a C switch statement"
                                              'c-tempo-tags)

                       (tempo-define-template "c-case"
                                              '(n "case " (p "value: ") ":" > n> p n
                                                  "break;" > n> p
                                                  )
                                              "case"
                                              "Insert a C case statement"
                                              'c-tempo-tags)

                       (set-tempo)
                       (tempo-use-tag-list 'c-tempo-tags))))


;;;C++-Mode Templates

(add-hook 'c++-mode-hook
		  (lambda () (progn 
                       (tempo-define-template "c++-class"
                                              '("class " (p "classname: " class) p n "{" n "public:" n>

                                                (s class) "();" 
                                                (indent-for-comment) "the default constructor" n>

                                                (s class) 
                                                "(const " (s class) "&rhs);"
                                                (indent-for-comment) "the copy constructor" n>

                                                (s class)
                                                "& operator=(const " (s class) "&rhs);"
                                                (indent-for-comment) "the assignment operator" n>

                                                n> "// the default address-of operators" n>
                                                "// "(s class)
                                                "* operator&()             { return this; };" n>
                                                "// const "(s class)
                                                "* operator&() const { return this; };" n


                                                n > "~" (s class) "();"
                                                (indent-for-comment) "the destructor" n n>
                                                p n
                                                "protected:" n> p n
                                                "private:" n> p n
                                                "};\t// end of class " (s class) n>
                                                )
                                              "class"
                                              "Insert a class skeleton"
                                              'c++-tempo-tags)
                       (set-tempo)
                       (tempo-use-tag-list 'c-tempo-tags)
                       (tempo-use-tag-list 'c++-tempo-tags))))

#+end_src

**** Emacs-lisp snippets using tempo

#+begin_src emacs-lisp

(defun define-my-elisp-tempo-tags ()
  (defvar elisp-tempo-tags nil)

  (tempo-define-template "defun"
                         '("defun " p " (" p ")" n> "\"" p "\"" n> r ")")
                         "defun"
                         "Insert a defun expression"
                         'elisp-tempo-tags)
  (tempo-define-template "defvar"
                         '("defvar " p  n> "\"" p "\")")
                         "defvar"
                         "Insert a defvar expression"
                         'elisp-tempo-tags)

  (tempo-define-template "lambda"
                         '("lambda (" p ")" n> "\"" p "\"" n> r ")")
                         "lambda"
                         "Insert a lamb expression"
                         'elisp-tempo-tags)

  (tempo-define-template "if"
                         '("if " p n> r ")")
                         "if"
                         "Insert an if expression"
                         'elisp-tempo-tags)

  (tempo-define-template "when"
                         '("when " p n> r ")")
                         "when"
                         "Insert an when expression"
                         'elisp-tempo-tags)

  (tempo-define-template "unless"
                         '("unless " p n> r ")")
                         "unless"
                         "Insert an unless expression"
                         'elisp-tempo-tags)

  (tempo-define-template "cond"
                         '("cond ((" p ") " r "))")
                         "cond"
                         "Insert a cond expression"
                         'elisp-tempo-tags))


(add-hook 'emacs-lisp-mode-hook (lambda () (progn (define-my-elisp-tempo-tags)
                                                  (set-tempo)
                                                  (setq tempo-match-finder "(\\([^\b]+\\)\\=")
                                                  (tempo-use-tag-list 'elisp-tempo-tags))))

(add-hook 'lisp-interaction-mode-hook (lambda () (progn (define-my-elisp-tempo-tags)
                                                        (set-tempo)
                                                        (setq tempo-match-finder "(\\([^\b]+\\)\\=")
                                                        (tempo-use-tag-list 'elisp-tempo-tags))))
#+end_src

**** org-mode snippets using tempo

#+begin_src emacs-lisp

(add-hook 'org-mode-hook (lambda () (progn 
;;; org-mode templates
                                      (defvar org-tempo-tags nil)

                                      (tempo-define-template "src_block"
                                                             '("#+begin_src "> p n> p n> "#+end_src")
                                                             "src"
                                                             "Insert a source block"
                                                             'org-tempo-tags)

                                      (tempo-define-template "title"
                                                             '("+TITLE: "> p)
                                                             "ti"
                                                             "Insert a document title"
                                                             'org-tempo-tags)

                                      (tempo-define-template "author"
                                                             '("+AUTHOR: "> p)
                                                             "au"
                                                             "Insert a author name"
                                                             'org-tempo-tags)

                                      (tempo-define-template "src_block"
                                                             '("+begin_src "> p n> p n> "#+end_src" n>)
                                                             "src"
                                                             "Insert a defun expression"
                                                             'org-tempo-tags)


                                      (set-tempo)
                                      (defvar html-tempo-tags nil)
                                      (tempo-use-tag-list 'org-tempo-tags)
                                      (setq tempo-match-finder "\\#\\([^\b]+\\)\\="))))

#+end_src

**** ruby snippets using tempo

#+begin_src emacs-lisp

;;; ruby-mode templates

(add-hook 'ruby-mode-hook (lambda () (progn 
                                       (defvar ruby-tempo-tags nil)

                                       (tempo-define-template "ruby-class"
                                                              '("class " > p n> p n "end" >)
                                                              "cls"
                                                              "Insert a class"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-module"
                                                              '("module " > p n> p n "end" >)
                                                              "mod"
                                                              "Insert a class"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-def"
                                                              '("def " > p "(" p ")" n> p n "end" >)
                                                              "def"
                                                              "Insert a module"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-intialize"
                                                              '("def intialize(" p ")" > n> p n> "end" >)
                                                              "init"
                                                              "Insert a constructor"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-include"
                                                              '("include " > p >)
                                                              "incl"
                                                              "include a module"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-require"
                                                              '("require \"" > p "\"" >)
                                                              "req"
                                                              "require"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-if"
                                                              '("if " > p n> p n> "end" >)
                                                              "if"
                                                              "Insert an if clause"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-ifelse"
                                                              '("if " > p n> "else" n> p n> "end" >)
                                                              "ifel"
                                                              "Insert an if else clause"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-unless"
                                                              '("unless "> p n> p n> "end" >)
                                                              "unless"
                                                              "Insert a unless clause"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-until"
                                                              '("until " > p n> p n> "end" >)
                                                              "until"
                                                              "Insert an until loop"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-when"
                                                              '(> "when "> p n> p n> "end" >)
                                                              "when"
                                                              "Insert a when clause"
                                                              'ruby-tempo-tags)

                                       (tempo-define-template "ruby-while"
                                                              '("while "> p n> p n> "end" >)
                                                              "while"
                                                              "Insert a while loop"
                                                              'ruby-tempo-tags)

                                       (set-tempo)
                                       (tempo-use-tag-list 'ruby-tempo-tags))))

#+end_src

**** python snippets using tempo

#+begin_src emacs-lisp

(add-hook 'python-mode-hook
          (lambda () (progn

;;; python-mode templates
                       (defvar python-tempo-tags nil)

                       (tempo-define-template "python-class"
                                              '("class " > p ":"n>)
                                              "cls"
                                              "Insert a class"
                                              'python-tempo-tags)

                       (tempo-define-template "python-def"
                                              '("def " > p "(" p "):" n> p n>)
                                              "def"
                                              "define a function"
                                              'python-tempo-tags)

                       (tempo-define-template "import"
                                              '("import " p >)
                                              "imp"
                                              "python import"
                                              'python-tempo-tags)


                       (tempo-define-template "python-include"
                                              '("from " > p " import " p>)
                                              "from"
                                              "from tag"
                                              'python-tempo-tags)

                       (tempo-define-template "python-if"
                                              '("if " > p ":"n> p >)
                                              "if"
                                              "Insert an if clause"
                                              'python-tempo-tags)

                       (tempo-define-template "python-ifelse"
                                              '("if " > p ":"n> p "else:" n> p >)
                                              "ife"
                                              "Insert an if else clause"
                                              'python-tempo-tags)

                       (set-tempo)
                       (tempo-use-tag-list 'python-tempo-tags))))

#+end_src

**** html snippets using tempo

#+begin_src emacs-lisp

;;; html tempo templates
(add-hook 'html-mode-hook (lambda () (progn 
                                       (defvar html-tempo-tags nil)

                                       (defmacro html-tempo-paired-tag-single-line (var)
                                         (list 'tempo-define-template var
                                               (list 'quote (list var "> " '> 'p (concat " </" var ">") '>))
                                               var
                                               (concat "insert html " var " tag")
                                               (list 'quote 'html-tempo-tags)))

                                       (seq-do (lambda (x)
                                                 "expand macro"
                                                 (eval (list 'html-tempo-paired-tag-single-line x)))
                                               '("a" "b" "bdi" "bdo"
                                                 "button" "caption" "cite" "data"
                                                 "del" "dfn" "em" "figcaption"
                                                 "h1" "h2" "h3" "h4"
                                                 "h5" "h6" "i" "iframe"
                                                 "kbd" "li" "label" "legend"
                                                 "mark" "meter" "object" "option"
                                                 "p" "progress" "q" "summary"
                                                 "s" "samp" "small" "span"
                                                 "strong" "sub" "summary" "sup"
                                                 "th" "td" "title" "time"))

                                       (defmacro html-tempo-paired-tag-multi-line (var)
                                         (list 'tempo-define-template var
                                               (list 'quote (list var ">" 'n> 'p 'n> (concat "</" var ">") '>))
                                               var
                                               (concat "insert html " var " tag")
                                               (list 'quote 'html-tempo-tags)))

                                       (seq-do (lambda (x)
                                                 "expand macro"
                                                 (eval (list 'html-tempo-paired-tag-multi-line x)))
                                               '("address" "article" "aside" "audio"
                                                 "body" "blockquote" "colgroup" "canvas"
                                                 "code" "datalist" "dl" "details"
                                                 "dialogue" "div" "fieldset" "figure"
                                                 "footer" "form" "head" "header"
                                                 "map" "main" "noscript" "nav"
                                                 "ol" "optgroup" "pre" "script"
                                                 "section" "select" "style" "svg"
                                                 "table" "thead" "tbody" "tfoot"
                                                 "tr" "template" "textarea" "ul"
                                                 "video"))


                                       (tempo-define-template "image-item"
                                                              '("img src=\"" > p "\" alt=\"" p ">">)
                                                              "img"
                                                              "insert html image tag"
                                                              'html-tempo-tags)

                                       (tempo-define-template "abbr"
                                                              '("abbr title=\"" > p "\">" p "</abbr>">)
                                                              "abbr"
                                                              "insert html abbr tag"
                                                              'html-tempo-tags)

                                       (tempo-define-template "html"
                                                              '("!DOCTYPE html>" n> "<html>" n>"<head>" n>
                                                                "<title> " > p " </title>" p n>
                                                                "</head>" n>
                                                                "<body>" n>  p
                                                                "\n</body>" > n "</html>" n>)
                                                              "html"
                                                              "insert a html template"
                                                              'html-tempo-tags)

                                       (set-tempo)
                                       (tempo-use-tag-list 'html-tempo-tags)
                                       (setq tempo-match-finder "\\(?:<!?\\)\\([^\b]+\\)\\=")
                                       )))

#+end_src
*** COMMENT expand

Expand is a package that extends the functionality of abbrev to enable code templating functionality. It uses a similar definition to abbrevs with an added list to indicate stops inside the template. It has default keys "C-x a n" and "C-x a p" for moving forward and backward within stops

**** general settings

#+begin_src emacs-lisp

(add-hook 'expand-expand-hook 'indent-according-to-mode)
(add-hook 'expand-jump-hook 'indent-according-to-mode)

#+end_src

**** emacs-lisp snippets using expand

#+begin_src emacs-lisp

(defconst elisp-expand-list
  '(("def" "(defun ()\n ) " (8 9 11 12))
    )
  "Expansions for org mode")

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (expand-add-abbrevs emacs-lisp-mode-abbrev-table elisp-expand-list)
            (abbrev-mode 1)))

(add-hook 'lisp-interaction-mode-hook
          (lambda ()
            (expand-add-abbrevs emacs-lisp-mode-abbrev-table elisp-expand-list)
            (abbrev-mode 1)))

#+end_src

**** c snippets using expand

#+begin_src emacs-lisp

(defconst c-expand-list
  '(("ifel" "if () {\n \n} else {\n \n}" (5 10 21))
    ("if" "if () {}" (5 8))
    ("uns" "unsigned ")
    ("for" "for(; ; ) {\n\n}" (5 7 9 13))
    ("switch" "switch () {\n\n}" (9 13))
    ("case" "case :\n\nbreak;\n" (6 8 16))
    ("do" "do {\n\n} while ();" (6 16))
    ("while" "while () {\n\n}" (8 12))
    ("default" "default:\n\nbreak;" 10)
    ("main" "int\nmain(int argc, char * argv[])\n{\n\n}\n" 37))
  "Expansions for C mode")

(add-hook 'c-mode-hook
          (lambda ()
            (expand-add-abbrevs c-mode-abbrev-table c-expand-list)
            (abbrev-mode 1)))

#+end_src

**** ruby snippets using expand
#+begin_src emacs-lisp

(defconst ruby-expand-list
  '(("cls" "class \n \n end" (7 9 14))
    ("mdl" "module \n \n end" (8 10 15))
    ("if" "if \n \n end" (4 6 11))
    ("def" "def \n \n end" (5 7 12))
    ("init" "def initialize()\n \n end" (16 18 24))
    ("ife" "if \n \n else \n \n end" (4 6 15 20))
    ("req" "require \"\"" (10 12))
    ("for" "for  in  do\n \n end" (5 9 14 20))
    ("ech" ".each do ||\n \n end" (1 11 13 19))
    ("dwn" ".downto() do ||\n \n end" (1 9 15 18 24))
    )
  "Expansions for Ruby mode")

(add-hook 'ruby-mode-hook
          (lambda ()
            (expand-add-abbrevs ruby-mode-abbrev-table ruby-expand-list)
            (abbrev-mode 1)))
#+end_src

**** python snippets using expand

#+begin_src emacs-lisp

(defconst python-expand-list
  '(("cls" "class :\n " (7 10))
    ("mdl" "module \n \n end" (8 10 15))
    ("if" "if :\n " (4 7))
    ("ife" "if :\n \nelse:\n " (4 7 14))
    ("def" "def ():\n " (6 10))
    )
  "Expansions for Python mode")

(add-hook 'python-mode-hook
          (lambda ()
            (expand-add-abbrevs python-mode-abbrev-table python-expand-list)
            (abbrev-mode 1)))

#+end_src

**** org-mode snippets using expand

#+begin_src emacs-lisp

(defconst org-expand-list
  '(("orgau" "#+AUTHOR: " 11)
    ("orgti" "#+TITLE: " 10)
    ("orgsrc" "#+begin_src \n \n #+end_src" (13 15 28))
    )
  "Expansions for org mode")

(add-hook 'org-mode-hook
          (lambda ()
            (expand-add-abbrevs org-mode-abbrev-table org-expand-list)
            (abbrev-mode 1)))

#+end_src

**** html snippets using expand

#+begin_src emacs-lisp

(defmacro html-expand-snippet-single-line (var)
  (list 'quote (list var (concat "<" var ">  </" var ">") (list (+ 4 (length var)) (+ 10 (length var))))))

(defmacro html-expand-snippet-multi-line (var)
  (list 'quote (list var (concat "<" var ">\n\n</" var ">") (list (+ 4 (length var)) (+ 10 (length var))))))

(defconst html-expand-list
  (seq-concatenate 'list
                   (seq-map (lambda (x)
                              "expand macro"
                              (eval (list 'html-expand-snippet-single-line x)))
                            '("a" "b" "bdi" "bdo"
                              "button" "caption" "cite" "data"
                              "del" "dfn" "em" "figcaption"
                              "h1" "h2" "h3" "h4"
                              "h5" "h6" "i" "iframe"
                              "kbd" "li" "label" "legend"
                              "mark" "meter" "object" "option"
                              "p" "progress" "q" "summary"
                              "s" "samp" "small" "span"
                              "strong" "sub" "summary" "sup"
                              "th" "td" "title" "time"))

                   (seq-map (lambda (x)
                              "expand macro"
                              (eval (list 'html-expand-snippet-multi-line x)))
                            '("address" "article" "aside" "audio"
                              "body" "blockquote" "colgroup" "canvas"
                              "code" "datalist" "dl" "details"
                              "dialogue" "div" "fieldset" "figure"
                              "footer" "form" "head" "header"
                              "map" "main" "noscript" "nav"
                              "ol" "optgroup" "pre" "script"
                              "section" "select" "style" "svg"
                              "table" "thead" "tbody" "tfoot"
                              "tr" "template" "textarea" "ul"
                              "video"))))

(add-hook 'html-mode-hook
          (lambda ()
            (expand-add-abbrevs html-mode-abbrev-table html-expand-list)
            (abbrev-mode 1)))

(add-hook 'mhtml-mode-hook
          (lambda ()
            (expand-add-abbrevs html-mode-abbrev-table html-expand-list)
            (abbrev-mode 1)))

#+end_src

*** COMMENT skeletons

#+begin_src emacs-lisp



#+end_src

*** hippie_expand

#+begin_src emacs-lisp

(global-set-key [remap dabbrev-expand] 'hippie-expand)

#+end_src

*** COMMENT abbrev

#+begin_src emacs-lisp

(setq-default abbrev-file-name (expand-file-name "abbrev_defs"  user-emacs-directory))
(if (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))

#+end_src



* initialize package managers straight and use-package

#+begin_src emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

#+end_src


* external libraries

#+begin_src emacs-lisp

(use-package dash
  :straight t)

(use-package f
  :straight t)

(use-package async ;; :defer t
  :straight t)

#+end_src


* external packages I use
** additional garbage collection optimization with gmch

#+begin_src emacs-lisp

(use-package gcmh
  :straight (gmch :type git :host gitlab :repo "koral/gcmh")
  :config (gcmh-mode t))

#+end_src

** auto-tangle

#+begin_src emacs-lisp

(use-package org-auto-tangle
  ;; :straight (org-auto-tangle :type git :host github :repo "yilkalargaw/org-auto-tangle" :build (:not native-compile))
  :straight t
  :defer t
  :hook (org-mode . org-auto-tangle-mode))

#+end_src

** keychords

#+begin_src emacs-lisp

(use-package key-chord
  :straight t
  :defer t
  :after use-package)

(use-package use-package-chords
  :straight t
  :defer t              ;; remove the defer when I actually use it.
  :after use-package
  :config (key-chord-mode 1))

#+end_src

** toc-org

#+begin_src emacs-lisp

(use-package toc-org
  :straight t
  :defer t
  :hook ((org-mode . toc-org-mode)
         (markdown-mode . toc-org-mode)))

#+end_src

** diminish and delight

#+begin_src emacs-lisp

(use-package diminish
  :straight t
  :after use-package)

(use-package delight
  :after use-package
  :straight t)

#+end_src

** COMMENT general.el

#+begin_src emacs-lisp

(use-package general :straight t
  :config
  (general-define-key
   "C-h" nil ))

#+end_src

** exec path form shell

#+begin_src emacs-lisp

;;exec-path-from-shell

(use-package exec-path-from-shell
  :straight t
  :config
  (exec-path-from-shell-initialize))

#+end_src

** hydra

#+begin_src emacs-lisp

;;hydra
(use-package hydra
  :defer 0.4
  ;; :hook (after-init . (lambda () (require 'hydra)))
  ;; :init (add-hook 'after-init-time-hook (require 'hydra))
  :straight t
  ;; :defines (ibuffer-mode-map dired-mode-map projectile-mode-map smartparens-mode-map)
  :config
  (load-file (expand-file-name "hydras.el" user-emacs-directory))
  ;; (add-hook 'origami-mode-hook (lambda () (define-key prog-mode-map (kbd "η o") 'hydra-folding/body)))
  ;; (add-hook 'ibuffer-mode-hook (lambda () (define-key ibuffer-mode-map (kbd "η .") 'hydra-ibuffer-main/body)))
  ;; (add-hook 'dired-mode-hook (lambda () (define-key dired-mode-map (kbd "η .") 'hydra-dired/body)))
  ;; (add-hook 'projectile-mode-hook (lambda () (define-key projectile-mode-map (kbd "η p") 'hydra-projectile/body)))
  ;; :general
  ;; ("C-c C-m" 'hydra-global-zoom/body)
  :bind ("C-c h" . hydra-map)
  )

#+end_src

** undo-tree

#+begin_src emacs-lisp

;;undo-tree

(use-package undo-tree
  :straight t
  :defer 0.2
  :diminish undo-tree-mode
  ;; :hook (after-init . global-undo-tree-mode)
  :config
  (global-undo-tree-mode t)
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t
        undo-tree-auto-save-history nil))

#+end_src

** git

*** git-gutter

#+begin_src emacs-lisp

(use-package git-gutter
  :straight t
  :defer t
  :hook ((org-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode)
         (markdown-mode . git-gutter-mode))
  )

#+end_src

*** git-timemachine

#+begin_src emacs-lisp

(use-package git-timemachine
  :straight t
  :defer t)

#+end_src

*** magit & forge

#+begin_src emacs-lisp

;;magit

(use-package magit
  :straight t
  :config (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  :defer t
  :after projectile)

;; (global-set-key (kbd "C-C g m") 'magit-status)
;; (global-set-key (kbd "γ g") 'magit-status)


(use-package forge
  :straight t
  :defer t
  :after magit)


#+end_src

*** monky

#+begin_src emacs-lisp

;;monky

(use-package monky
  :straight t
  :defer t)

#+end_src

** yasnippet

#+begin_src emacs-lisp

;;yasnippet

(use-package yasnippet
  :straight t
  :defer 0.4
  ;; :hook (yae-first-input .  yas-global-mode)
  ;; :init (add-hook 'after-init-time-hook  (yas-global-mode))
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  ;; :straight (yasnippet-snippets :build (:not native-compile))
  :straight t
  :defer t
  :after (yasnippet))

#+end_src

** COMMENT helpful

#+begin_src emacs-lisp

(use-package helpful
  :straight t
  :defer t
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** which-key

#+begin_src emacs-lisp

;;which mode

(use-package which-key
  :straight t
  ;; :defer t
  ;; :after init
  :config ;; (which-key-enable-god-mode-support)
  ;; Allow C-h to trigger which-key before it is done automatically
  (setq which-key-show-early-on-C-h t)
  ;; make sure which-key doesn't show normally but refreshes quickly after it is
  ;; triggered.
  ;; (setq which-key-idle-delay 10000)
  ;; (setq which-key-idle-secondary-delay 0.05)
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)

  (which-key-mode)
  )

;; (add-hook 'after-init-time-hook (progn (require 'which-key) (which-key-mode)))

#+end_src

** avy

#+begin_src emacs-lisp

;;avy

(use-package avy
  :straight t
  :defer t
  :bind (
         ;; ("γ a c" . avy-goto-char)
         ;; ("γ a 2" . avy-goto-char-2)
         ;; ("γ a w" . avy-goto-word-1)
         ;; ("γ a l" . avy-goto-line)
         :map isearch-mode-map
         ("C-'" . avy-isearch))
  )

#+end_src

** ace-link

#+begin_src emacs-lisp

(use-package ace-link
  :straight t
  :defer t
  :functions ace-link-setup-default
  :after (:any elbank helpful info eww man woman)
  :hook (elbank-mode helpful-mode info-mode eww-mode woman-mode man-mode info-mode)
  :init
  (require 'ace-link)
  (ace-link-setup-default)
)

#+end_src

** ace-window

#+begin_src emacs-lisp

;;ace-window

(use-package ace-window
  :straight t
  :defer t
  ;; :bind ("γ w" . ace-window)
  ;;       ;; ("C-c <f12>" . ace-window)
  )

#+end_src

** expand-region

#+begin_src emacs-lisp

(use-package expand-region
  :straight t
  :defer t
  :bind ("C-=" . er/expand-region))

#+end_src

** ag

#+begin_src emacs-lisp

;;ag

(use-package ag
  :straight t
  :defer t)

#+end_src

** rg

#+begin_src emacs-lisp

(use-package rg
  :straight t
  :defer t)

#+end_src

** smart-hungry delete

#+begin_src emacs-lisp

(use-package smart-hungry-delete
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :defer t
  :straight t
  :after init
  ;;  :config (smart-hungry-delete-add-default-hooks)
  )

#+end_src

** ws-butler

#+begin_src emacs-lisp

(use-package ws-butler
  :straight t
  :defer t
  :hook (prog-mode . ws-butler-mode))

#+end_src

** multiple-cursors

#+begin_src emacs-lisp

;;multiple-cursors

(use-package multiple-cursors
  :straight t
  :defer t
  :config (define-key mc/keymap (kbd "<return>") nil)
  :bind ;;("H-\\" . mc/mark-all-like-this)
  ("C-S-<mouse-1>" . mc/add-cursor-on-click))

#+end_src

** phi-search

#+begin_src emacs-lisp

(use-package phi-search
  :straight t
  :defer t
  :bind (:map mc/keymap
              ("C-s" . phi-search)
              ("C-r" . phi-search-backward)))

#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :straight t
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** modal editing modes
*** objed

#+begin_src emacs-lisp

(use-package objed
  :straight t
  ;; :defer t
  :defer 0.5
  ;; :hook (after-init . objed-mode)
  :bind
  ("M-o" . objed-local-mode)
  (:map objed-map
        ;; ("<SPC>" . 'objed-char-object)
        ("C-f" . 'objed-right-char)
        ("C-b" . 'objed-left-char)
        ("," . 'objed-identifier-object)
        ("." . 'objed-sentence-object)
        ("b" . 'objed-word-object)

        ("F" . nil)
        ("B" . nil)
        ("S" . nil)
        ("R" . nil)
        ("L" . nil)
        ("." . nil)
        ;; ("N" . nil)
        ;; ("P" . nil)
        ;; ("b" . nil)
        ("B" . nil)

        ("<SPC>" . 'objed-object-map)
        ("c" . 'objed-user-map)
        ("r" . 'objed-toggle-side)
        ("l" . 'objed-next-specialized)
        ("h" . 'objed-previous-specialized)
        ;; ("l" . 'objed-next)
        ;; ("h" . 'objed-previous)
        ("L" . 'objed-move-object-forward)
        ("H" . 'objed-move-object-backward)

        ("f" . 'objed-next-specialized)
        ("s" . 'objed-previous-specialized)
        ;; ("f" . 'objed-next)
        ;; ("s" . 'objed-previous)
        ("F" . 'objed-move-object-forward)
        ("S" . 'objed-move-object-backward)

        ("J" . 'objed-move-line-forward)
        ("i" . 'objed-kill)
        ("I" . 'objed-del-insert)
        ("K" . 'objed-move-line-backward)
        ;; ("K" . nil)
        ("j" . 'objed-next-line)
        ("k" . 'objed-previous-line)
        ("G" . 'objed-del-insert)
        ("<H-SPC>" . 'objed-quit)

        ;; :map objed-user-map
        ;; ("f" . 'move-to-char)
        ;; ("g" . 'move-upto-char)

        :map objed-object-map
        ("," . 'objed-identifier-object)

        ;;        ;; :map objed-mode-map
        ;;        ;; ("<M-SPC>" . 'my-objed-activate)
        )

  ;; :init (objed-mode)

  :config
  ;; (objed-mode)
  ;; (setq objed--which-key-avail-p t
  ;;       objed--avy-avail-p t)
  ;; (setq objed-use-avy-if-available 1)
  ;; (define-key objed-mode-map (kbd "M-SPC") (objed-activate 'char))

  (defun objed--goto-next-specialized (&optional arg)
    "Move to the next object.

With postitive prefix argument ARG move to the nth next object."
    (let ((arg (or arg 1))
          (obj nil))
      (if (equal objed--object 'line)
          (objed-next-line)
        (progn
          (dotimes (_ arg obj)
            (when (setq obj  (objed--get-next))
              (objed--update-current-object obj)
              (cond ((or (equal objed--object 'word)
                         (equal objed--object 'sexp))
                     (goto-char (objed--end obj)))
                    (t (objed--goto-char (objed--beg obj))))))))))

  (defun objed-next-specialized (&optional arg)
    "Move to ARG next object of current type."
    (interactive "p")
    ;; on init skip current
    (when (and (region-active-p)
               (eq last-command 'objed-extend))
      (exchange-point-and-mark))
    (let ((pos (point)))
      (objed--goto-next-specialized (or arg 1))
      (when (eq pos (point))
        (error "No next %s" objed--object))))


  (defun objed--goto-previous-specialized (&optional arg)
    "Move to the previous object.

With postitive prefix argument ARG move to the nth previous object."
    (let ((arg (or arg 1))
          (obj nil))
      (if (equal objed--object 'line)
          (objed-previous-line)
        (progn
          (dotimes (_ arg obj)
            (when (setq obj (objed--get-prev))
              (objed--update-current-object obj)
              (objed--goto-char (objed--beg obj))))))))

  (defun objed-previous-specialized (&optional arg)
    "Move to ARG previous object of current type."
    (interactive "p")
    ;; on init skip current
    (when (and (region-active-p)
               (eq last-command 'objed-extend))
      (exchange-point-and-mark))
    (let ((pos (point)))
      (objed--goto-previous-specialized (or arg 1))
      (when (eq pos (point))
        (error "No next %s" objed--object))))

  ;; ;;   ;; :config
  ;; ;; (load (expand-file-name "lisp/objed-goto-next-specialized.el" user-emacs-directory))

  )

;; (add-hook 'after-init-time-hook (progn (require 'objed) (objed-mode)))

#+end_src

*** COMMENT god-mode

#+begin_src emacs-lisp

(use-package god-mode
  :straight t
  :defer t
  :bind
  ("M-o" . god-local-mode)
  (:map god-local-mode-map
        ("z" . repeat)
        ("i" . god-local-mode)
        ("." . repeat)
        )
  :config
  (setq god-mod-alist '((nil . "C-") ("g" . "M-") ("G" . "C-M-") ("h" . "M-") ("H" . "C-M-")))
  )

#+end_src

*** COMMENT meow

#+begin_src emacs-lisp
(use-package meow
  :straight t
  :defer t)
#+end_src

*** COMMENT kakoune

#+begin_src emacs-lisp

(use-package kakoune
  ;; Having a non-chord way to escape is important, since key-chords don't work in macros
  :straight t
  :bind ("C-z" . ryo-modal-mode)
  :hook (after-init . my/kakoune-setup)
  :config
  (defun ryo-enter () "Enter normal mode" (interactive) (ryo-modal-mode 1))
  (defun my/kakoune-setup ()
    "Call kakoune-setup-keybinds and then add some personal config."
    (kakoune-setup-keybinds)
    (setq ryo-modal-cursor-type 'box)
    (add-hook 'prog-mode-hook #'ryo-enter)
    (define-key ryo-modal-mode-map (kbd "SPC h") 'help-command)
    ;; Access all C-x bindings easily
    (define-key ryo-modal-mode-map (kbd "z") ctl-x-map)
    (ryo-modal-keys
     ("," save-buffer)
     ("P" counsel-yank-pop)
     ("m" mc/mark-next-like-this)
     ("M" mc/skip-to-next-like-this)
     ("n" mc/mark-previous-like-this)
     ("N" mc/skip-to-previous-like-this)
     ("M-m" mc/edit-lines)
     ("*" mc/mark-all-like-this)
     ("v" er/expand-region)
     ("C-v" set-rectangular-region-anchor)
     ("M-s" mc/split-region)
     (";" (("q" delete-window)
           ("v" split-window-horizontally)
           ("s" split-window-vertically)))
     ("C-h" windmove-left)
     ("C-j" windmove-down)
     ("C-k" windmove-up)
     ("C-l" windmove-right)
     ("C-u" scroll-down-command :first '(deactivate-mark))
     ("C-d" scroll-up-command :first '(deactivate-mark)))))

#+end_src

** restclient

#+begin_src emacs-lisp

;;restclient

(use-package restclient
  :straight t
  :defer t)


;; (use-package company-restclient
;;   :straight t
;;   :after (restclient)
;;   :config
;;   (add-to-list 'company-backends 'company-restclient))

#+end_src

** COMMENT highlight-indent-guides

#+begin_src emacs-lisp

(use-package highlight-indent-guides
  :straight t
  :defer t
  :config
  (setq highlight-indent-guides-delay 0.1
		highlight-indent-guides-auto-odd-face-perc 20
		highlight-indent-guides-auto-even-face-perc 30
		highlight-indent-guides-auto-character-face-perc 40
		highlight-indent-guides-auto-stack-odd-face-perc 20
		highlight-indent-guides-auto-stack-even-face-perc 30
		highlight-indent-guides-auto-top-odd-face-perc 50
		highlight-indent-guides-auto-top-even-face-perc 60
		highlight-indent-guides-responsive 'stack
		highlight-indent-guides-method 'column)
  )

#+end_src

** nov.el

#+begin_src emacs-lisp

(use-package nov
  :straight t
  :defer t
  :mode ("\\.epub\\'" . nov-mode))

(add-hook 'nov-mode-hook (lambda () (display-line-numbers-mode -1)))
;; (add-hook 'nov-mode-hook (lambda () (nlinum-mode -1)))


#+end_src

** COMMENT origami

#+begin_src emacs-lisp

(use-package origami
  :straight t
  :defer t
  :hook (prog-mode . origami-mode)
  )

#+end_src

** pomidor

#+begin_src emacs-lisp

(use-package pomidor
  :straight t
  :defer t
  :bind (("<S-f6>" . pomidor))
  :config (setq pomidor-sound-tick nil
                pomidor-sound-tack nil)
  :hook (pomidor-mode . (lambda ()
                          (display-line-numbers-mode -1) ; Emacs 26.1+
                          (setq left-fringe-width 0 right-fringe-width 0)
                          (setq left-margin-width 2 right-margin-width 0)
                          ;; force fringe update
                          (set-window-buffer nil (current-buffer))
                          ;;minutes
                          (setq pomidor-seconds (* 25 60)) ; 25 minutes for the work period
                          (setq pomidor-break-seconds (* 5 60)) ; 5 minutes break time
                          ))
  )

#+end_src

** keyfreq

#+begin_src emacs-lisp

(use-package keyfreq
  :straight t
  :defer t
  :after init
  :config (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

#+end_src

** company

#+begin_src emacs-lisp

;;company

(use-package company
  :straight t
  :defer 0.8
  ;; :hook (prog-mode . global-company-mode)
  :bind
  ("C-i" . company-indent-or-complete-common)
  ;; ("C-M-i" . counsel-company)
  :config ;; (require 'company)
  (global-company-mode 1)
  )

#+end_src

** COMMENT corfu & cape & kind-icons

#+begin_src emacs-lisp
;; Enable Corfu completion UI
;; See the Corfu README for more configuration tips.
(use-package corfu
  :defer 0.8
  :straight t
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :init
  (corfu-global-mode))

;; Add extensions
(use-package cape
  :straight t
  ;; Bind dedicated completion commands
  :bind (("C-i" . completion-at-point) ;; capf
         ;; ("C-c p t" . complete-tag)        ;; etags
         ;; ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ;; ("C-c p f" . cape-file)
         ;; ("C-c p k" . cape-keyword)
         ;; ("C-c p s" . cape-symbol)
         ;; ("C-c p a" . cape-abbrev)
         ;; ("C-c p i" . cape-ispell)
         ;; ("C-c p l" . cape-line)
         ;; ("C-c p w" . cape-dict)
         )
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )

(use-package kind-icon
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+end_src

** highligt number literals

#+begin_src emacs-lisp

;; Many major modes do no highlighting of number literals, so we do it for them
(use-package highlight-numbers
  :straight t
  :defer t
  :hook ((prog-mode conf-mode) . highlight-numbers-mode)
  :config (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))

#+end_src

** vterm

#+begin_src emacs-lisp

(use-package vterm
  :straight t
  :defer t
  :when (bound-and-true-p module-file-suffix)
  :hook ((vterm-mode . (lambda () (global-hl-line-mode -1)))
         (vterm-mode . (lambda () (display-line-numbers-mode -1)))
         ;; (vterm-mode . (lambda () (nlinum-mode -1)))
         (vterm-mode . (lambda () (setq show-trailing-whitespace nil)))
         (vterm-mode . (lambda () (setq line-spacing 0)))
         ;; (vterm-mode . (lambda () (objed-local-mode -1)))
         )
  :init (setq vterm-shell "/usr/bin/bash"))

;; (use-package vterm
;;   :commands (vterm)
;;   :straight t
;;   :init
;;   (unless (file-exists-p (concat (file-name-directory (locate-library "vterm"))
;;                                  "vterm-module.so"))
;;     (message "Set vterm to install.")
;;     (setq vterm-install t)))

                                        ;
#+end_src

** highlight-indent-guides

#+begin_src emacs-lisp

(use-package highlight-indent-guides
  :straight t
  :defer t
  :config (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-delay 0.1)
  (setq highlight-indent-guides-method 'column)
  )

#+end_src

** COMMENT default text-scale

#+begin_src emacs-lisp

(use-package default-text-scale
  :defer 1
  :straight t
  :config
  (default-text-scale-mode))

#+end_src

** minions

#+begin_src emacs-lisp

(use-package minions
  :straight t
  :defer 0.1
  :config
  (setq minions-mode-line-lighter "[+]")
  (minions-mode 1)
  ;; Set the new mode-line-format
  (setq-default mode-line-format
				'((:eval
                   (mode-line-split--format
					;; Left
					(format-mode-line
					 '("%e" mode-line-front-space
					   (:propertize
						("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
						display
						(min-width
						 (5.0)))
					   mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position))
					;; Right
					(format-mode-line
					 '((vc-mode vc-mode)
					   "   "
					   mode-name " ";; "%m"
					   ;; (:eval (propertize "[+]" 'local-map (make-mode-line-mouse-map 'mouse-1 'yae-minions-minor-modes-menu)))
					   ;; (concat (format-mode-line minions-mode-line-modes 'mood-line-major-mode) "  ")
					   (:eval (propertize "[+]" 'local-map (make-mode-line-mouse-map 'mouse-1 'minions-minor-modes-menu)))
					   "   "
					   (:eval (propertize "[☰]" 'local-map (make-mode-line-mouse-map 'mouse-1 'menu-bar-open)))
					   " "
					   "  " mode-line-misc-info mode-line-end-spaces
					   )
					 )))))
  )

#+end_src

** projectile

#+begin_src emacs-lisp

;; projectile

(use-package projectile
  :straight t
  ;; :defer t
  :defer 0.3
  :after init ;; hydra
  :init (setq projectile-mode-line-prefix ""
              projectile-sort-order 'recentf
              projectile-use-git-grep t)
  :hook (prog-mode . projectile-mode)
  :config
  (projectile-global-mode)
  ;; (setq projectile-completion-system 'ivy)
  )

#+end_src

** COMMENT ctrlf

#+begin_src emacs-lisp

(use-package ctrlf
  :straight t
  :init (ctrlf-mode +1))

#+end_src

** smartparens

#+begin_src emacs-lisp

(use-package smartparens
  :straight t
  :defer 0.6
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t))

#+end_src

** COMMENT isearch-mb

#+begin_src emacs-lisp

(use-package isearch-mb
  :straight t
  :defer 0.5
  :config (isearch-mb-mode))

#+end_src

** elpher

#+begin_src emacs-lisp
(use-package elpher
  :straight t
  :defer t)
#+end_src

** typing
*** speed-type

#+begin_src emacs-lisp

(use-package speed-type
  :straight t
  :defer t)

#+end_src

*** typing-of-emacs

#+begin_src emacs-lisp

(use-package typing
  :straight t
  :defer t)

#+end_src

** devdocs browser

#+begin_src emacs-lisp

(use-package devdocs-browser
  :straight t
  :defer t)

#+end_src

** pdf-tools

#+begin_src emacs-lisp

(use-package pdf-tools
  :straight t
  :defer t
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :if (display-graphic-p)
  :config
  ;; (pdf-tools-install :no-query)
  (pdf-loader-install)
  (require 'pdf-occur)
  :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  (pdf-view-mode . (lambda () (setq pdf-view-midnight-colors `(,(face-foreground 'default) . ,(face-background 'default)))
                     (pdf-view-midnight-minor-mode 1)))

  )

#+end_src

** scratch

#+begin_src emacs-lisp

(use-package scratch
  ;; :ensure t
  :straight t
  :defer t)

#+end_src

** install themes

#+begin_src emacs-lisp

;;themes

(use-package doom-themes
  :straight t
  :defer t)

(use-package nord-theme
  :straight t
  :defer t)

(use-package ample-theme
  :straight t
  :defer t)

(use-package dracula-theme
  :straight t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :straight t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :straight t
  :defer t)

(use-package soothe-theme
  :straight t
  :defer t)

(use-package seti-theme
  :straight t
  :defer t)

(use-package spacemacs-theme
  :straight t
  :defer t)

(use-package solarized-theme
  :straight t
  :defer t)

(use-package zenburn-theme
  :straight t
  :defer t)

(use-package cyberpunk-theme
  :straight t
  :defer t)

(use-package sublime-themes
  :straight t
  :defer t)

(use-package flatland-theme
  :straight t
  :defer t)

(use-package flatui-dark-theme
  :straight t
  :defer t)

(use-package blackboard-theme
  :straight t
  :defer t)

(use-package material-theme
  :straight t
  :defer t)

(use-package moe-theme
  :straight t
  :defer t)

(use-package darktooth-theme
  :straight t
  :defer t)

(use-package danneskjold-theme
  :straight t
  :defer t)

(use-package acme-theme
  :straight t
  :defer t)

(use-package modus-themes
  :straight t
  :defer t
  )

(use-package base16-theme
  :straight t
  :defer t
  :config
  (setq base16-theme-256-color-source 'colors)
  ;; (setq base16-theme-256-color-source 'base16-shell)
  (setq base16-distinct-fringe-background nil)
  ;; (setq base16-highlight-mode-line 'box)
  )

(use-package gotham-theme
  :straight t
  :defer t
  )

(use-package vscode-dark-plus-theme
  :straight t
  :defer t)

(use-package kaolin-themes
  :straight t
  :defer t)

(use-package xresources-theme
  :straight t
  :defer t)

#+end_src

** alternate mode-lines

*** COMMENT doom-modeline
#+begin_src emacs-lisp

(use-package doom-modeline
  :straight t
  :defer 0.1
  ;; :hook (after-init . doom-modeline-mode)
  :config
  ;; Mode-line
  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 15)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 2)

  ;; How to detect the project root.
  ;; The default priority of detection is `ffip' > `projectile' > `project'.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'project)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Whether display icons in mode-line. Respects `all-the-icons-color-icons'.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  ;; Whether display the icon for `major-mode'. Respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; Respects `doom-modeline-major-mode-icon'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; Respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  ;; (setq doom-modeline-unicode-fallback nil)

  ;; Whether display the minor modes in mode-line.
  (setq doom-modeline-minor-modes (featurep 'minions))

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format nil)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the perspective name. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; Whether display the `lsp' state. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e t)

  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to dispaly as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
  (doom-modeline-mode t)
  )

;; (add-hook 'after-init-time-hook (progn
;;                                   (require 'doom-modeline)
;;                                   (doom-modeline-mode)))

#+end_src

*** COMMENT smart-modeline

#+begin_src emacs-lisp

(use-package smart-mode-line
  :straight t
  :defer 0.1
  :config (sml/setup)
  (setq sml/theme 'respectful))

#+end_src

*** COMMENT spaceline

#+begin_src emacs-lisp

(use-package spaceline
  :straight t
  :defer 0.1
  :config
  (require 'spaceline-config)
  (setq powerline-arrow-shape 'curve)   ;; give your mode-line curves
  (spaceline-spacemacs-theme))

#+end_src

*** COMMENT mood-line

#+begin_src emacs-lisp
(use-package mood-line
  :straight t
  :defer 0.1
  :after minions
  :config
  (defun mood-line-segment-major-mode ()
    "Displays the current major mode in the mode-line."
    (concat (format-mode-line minions-mode-line-modes 'mood-line-major-mode) "  "))
  (mood-line-mode)
  )
#+end_src

*** COMMENT telephone-line

#+begin_src emacs-lisp

(use-package telephone-line
  :straight t
  :defer 0.1
  :config
  (telephone-line-defsegment telephone-line-minions-mode-segment ()
    (propertize "[+]"
                'display '(raise 0.0)
                'help-echo "Minor-modes"
                'mouse-face '(:box 1)
                'local-map (make-mode-line-mouse-map
                            'mouse-1 (lambda ()
                                       (interactive)
                                       (minions-minor-modes-menu)))))

  (setq
   telephone-line-rhs
   '((nil . (telephone-line-misc-info-segment))
     (accent . (telephone-line-major-mode-segment))
     (nil . (telephone-line-minions-mode-segment))
     (evil . (telephone-line-airline-position-segment))
     ))

  (setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-projectile-segment
                     telephone-line-buffer-segment))))

  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-left
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
  (setq telephone-line-height 24
        telephone-line-evil-use-short-tag t)
  (telephone-line-mode 1)
  (setq telephone-line-height 20)
  )

#+end_src

*** COMMENT moody

#+begin_src emacs-lisp
(use-package moody
  :straight t
  :defer 0.1
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (moody-replace-eldoc-minibuffer-message-function))
#+end_src

** all-the-icons

#+begin_src emacs-lisp

(use-package all-the-icons
  :straight t
  :defer t
  ;; :init (unless (font-installed-p "all-the-icons")
  ;;       (all-the-icons-install-fonts t))
  )

(use-package all-the-icons-completion
  :straight t
  :defer 0.1
  :config (all-the-icons-completion-mode)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

(use-package all-the-icons-dired
  :straight t
  :defer t
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** minibuffer completion frameworks
*** selectrum, consult, marginelia, embark

#+begin_src emacs-lisp

;; (use-package orderless
;;   :straight t
;;   :custom (completion-styles '(orderless))
;;   :config (setq-local orderless-matching-styles '(orderless-literal)
;;                       orderless-style-dispatchers nil))

;; (use-package selectrum
;;   :straight t
;;   :config
;;   (selectrum-mode +1))


(use-package consult
  :straight t
  :defer 0.1
  ;; :after selectrum ;; projectile
  ;; :defines consult-buffer-sources
  ;; :config
  ;; (projectile-load-known-projects)
  ;; (setq my/consult-source-projectile-projects
  ;;        `(:name "Projectile projects"
  ;;                :narrow   ?P
  ;;                :category project
  ;;                :action   ,#'projectile-switch-project-by-name
  ;;                :items    ,projectile-known-projects))
  ;; (add-to-list 'consult-buffer-sources my/consult-source-projectile-projects 'append)
  :bind ("M-s s" . consult-line)
  ("M-s <SPC>" . consult-imenu)
  )

(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :straight t
  :defer 0.1
  :functions marginalia-mode

  ;; The :init configuration is always executed (Not lazy!)
  :config
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  ;; (require 'marginalia)
  (marginalia-mode))

;; prescient for frequency based completion (thinking about trying it)

#+end_src

** programming and typesetting
*** COMMENT lsp-mode

#+begin_src emacs-lisp

(use-package lsp-mode
  :straight t
  :defer 2
  ;; :init (setq lsp-keymap-prefix "γ l")
  :hook ((ruby-mode . lsp)
         (enh-ruby-mode . lsp)
         (php-mode . lsp)
         ;; (java-mode . lsp)
         (html-mode .lsp)
         (js-mode . lsp)
         ;; (js2-mode . lsp)
         (web-mode . lsp)
         (css-mode . lsp)
         ;; (crystal-mode . lsp)
         (python-mode  . lsp)
         (rust-mode . lsp)
         ;; (go-mode . lsp)
         (c-mode . lsp)
         (c++-mode .lsp)
         ;; (lua-mode . lsp)
         (bash . lsp)
         )
  :config
  (setq lsp-keymap-prefix "γ l")
  ;; change nil to 't to enable logging of packets between emacs and the LS
  ;; this was invaluable for debugging communication with the MS Python Language Server
  ;; and comparing this with what vs.code is doing

  (setq lsp-print-io nil)
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-file-watchers nil)
  ;; (setq lsp-headerline-breadcrumb-enable nil)
  ;; (setq lsp-headerline-breadcrumb-icons-enable nil)
  ;; (require 'lsp-icons)
  ;; (require 'lsp-clients)

  )


;; lsp-ui gives us the blue documentation boxes and the sidebar info
(use-package lsp-ui
  :straight t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-enable t
        ;; lsp-ui-flycheck-enable
        ;; lsp-ui-flycheck-list-position 'right
        ;; lsp-ui-flycheck-live-reporting t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25)
  (setq lsp-ui-sideline-ignore-duplicate t)
  ;; (add-hook 'lsp-mode-hook 'lsp-ui-mode)

  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  )

(use-package dap-mode
  :straight t ;;:after lsp-mode
  :defer t
  :hook (lsp-mode . dap-mode)
  :config
  ;;(dap-mode t)
  (dap-ui-mode t)
  (require 'dap-ruby)
  (require 'dap-php)
  ;; (require 'dap-java)
  (require 'dap-cpptools) ;; c/cpp
  ;; (require 'dap-lldb) ;; c/cpp
  ;; Enabling only some features
  (setq dap-auto-configure-features '(sessions locals controls tooltip))

  )

;; (use-package lsp-ivy :straight t :defer t :after lsp)
;; (use-package lsp-treemacs :straight t :defer t :after lsp)

#+end_src

*** eglot

#+begin_src emacs-lisp

(when (not (locate-library "eglot"))
  (use-package eglot
	:straight t
	:after company))

#+end_src

*** C/C++

#+begin_src emacs-lisp

;;C/C++

(use-package company-c-headers
  :after company
  :defer t
  :straight t
  )

#+end_src

*** rust

#+begin_src emacs-lisp

(use-package rust-mode
  :straight t
  :defer t
  ;; :hook (rust-mode . racer-mode)
  ;;       (racer-mode . eldoc-mode)
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  (setq rust-format-on-save t))

(use-package cargo
  :straight t
  :defer t
  ;; :after rust-mode
  :hook (rust-mode . cargo-minor-mode)
  :config
  (setq compilation-scroll-output t))

#+end_src

*** ruby

#+begin_src emacs-lisp

;;ruby

(use-package inf-ruby
  :straight t
  ;; :init  (setq inf-ruby-default-implementation "pry")
  :defer t)

;; (use-package seeing-is-believing
;;   :straight t
;;   :defer t
;;   :hook ((ruby-mode . seeing-is-believing)
;;          (enh-ruby-mode . seeing-is-believing))
;;   :config (setq seeing-is-believing-max-length 90
;;                 ;; seeing-is-believing-max-results 10
;;                 seeing-is-believing-timeout 10.5
;;                 seeing-is-believing-alignment 'file)
;;   )

#+end_src

*** php

#+begin_src emacs-lisp

;;php

(use-package php-mode
  :straight t
  :defer t
  :mode "\\.php\\'"
  ;;:config (require 'php-extras)
  )

#+end_src

*** lua

#+begin_src emacs-lisp

;;lua

(use-package lua-mode
  :straight t
  :defer t)

;; (use-package company-lua
;;   :straight t
;;   :defer t
;;   :after init company-mode
;;   :hook
;;   (company-mode . (lambda () (push 'company-lua company-backends))))

#+end_src

*** ocaml

#+begin_src emacs-lisp

(use-package tuareg
  :mode ("\\.ml[ily]?$" . tuareg-mode)
  :straight t
  :defer t)

#+end_src
*** crystal

#+begin_src emacs-lisp

(use-package crystal-mode
  :mode ("\\.cr$" . crystal-mode)
  :straight (emacs-crystal-mode :type git :host github :repo "yilkalargaw/emacs-crystal-mode")
  ;; :straight t
  :defer t)

#+end_src

*** clojure

#+begin_src emacs-lisp

(use-package cider
  :straight t
  :defer t)

#+end_src

*** zig

#+begin_src emacs-lisp

(use-package zig-mode
  :straight t
  :defer t)

#+end_src

*** d

#+begin_src emacs-lisp

(use-package d-mode
  :straight t
  :defer t)

#+end_src

*** nim

#+begin_src emacs-lisp

(use-package nim-mode
  :straight t
  :defer t)

#+end_src

*** raku

#+begin_src emacs-lisp

(use-package raku-mode
  :straight t
  :defer t)

#+end_src

*** csv

#+begin_src emacs-lisp

;;csv

(use-package csv-mode
  :straight t
  :defer t)

#+end_src

*** yaml,toml and json

#+begin_src emacs-lisp

;;yaml,toml and json

(use-package yaml-mode
  :straight t
  :defer t)
(use-package toml-mode
  :straight t
  :defer t)
;; (use-package json-mode
;;   :straight t
;;   :defer t)

#+end_src

*** rfc-mode

#+begin_src emacs-lisp

(use-package rfc-mode
  :straight t
  :defer t)

#+end_src

*** go

#+begin_src emacs-lisp

;;go

(use-package go-mode
  :straight t
  :defer t)

;; (use-package company-go
;;   :straight t
;;   :defer t
;;   :hook (go-mode . (lambda ()
;;                      (set (make-local-variable 'company-backends) '(company-go))
;;                      (company-mode))))

;; (use-package go-dlv
;;   :straight t
;;   :defer t)

#+end_src

*** web
**** html, css

#+begin_src emacs-lisp

(use-package emmet-mode
  :straight t
  :hook (sgml-mode css-mode web-mode))


(use-package web-mode
  :straight t
  :defer t
  :after init
  :mode ("\\.html\\'"
         "\\.css?\\'"
         "\\.phtml\\'"
         "\\.erb\\'"
         "\\.html?\\'"
         "\\.djhtml\\'"
         "\\.jinja\\'"
         )
  :config
  (setq web-mode-markup-indent-offset 2)
                                        ;  (setq web-mode-engines-alist
                                        ;        '(("django" . "focus/.*\\.html\\'")
                                        ;          ("ctemplate" . "realtimecrm/.*\\.html\\'")))
  (setq web-mode-enable-auto-pairing nil)
  )

;; (use-package impatient-mode
;;   :straight t
;;   :defer t
;;   :hook ((web-mode . impatient-mode)
;;          (sgml-mode . impatient-mode)))



;; (use-package company-web
;;   :defer t
;;   :straight t
;;   ;; :hook (('web-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
;;   ;;     ('mhtml-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
;;   ;;     ('html-mode . (lambda () (add-to-list 'company-backends 'company-web-html))))
;;   )

#+end_src

**** javascript

#+begin_src emacs-lisp
;;javascript

;; (use-package js2-mode
;;   :straight t
;;   :defer t
;;   :mode "\\.js\\'"
;;   :interpreter "node")

(use-package js2-mode
  :straight t
  :interpreter (("node" . js2-mode))
  :mode "\\.\\(js\\|json\\)$"
  :config
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-basic-offset 2
        js2-highlight-level 3
        js2-mode-show-parse-errors nil
        js2-mode-show-strict-warnings nil))



#+end_src

*** COMMENT java

#+begin_src emacs-lisp

(use-package lsp-java
  :mode ("\\.java$")
  :straight t
  :config
  ;; Enable dap-java
  (require 'dap-java)

  ;; Support Lombok in our projects, among other things
  (setq lsp-java-vmargs
        (list "-noverify"
              "-Xmx2G"
              "-XX:+UseG1GC"
              "-XX:+UseStringDeduplication"
              ;; (concat "-javaagent:" jmi/lombok-jar)
              ;; (concat "-Xbootclasspath/a:" jmi/lombok-jar)
              )
        lsp-file-watch-ignored
        '(".idea" ".ensime_cache" ".eunit" "node_modules"
          ".git" ".hg" ".fslckout" "_FOSSIL_"
          ".bzr" "_darcs" ".tox" ".svn" ".stack-work"
          "build")

        lsp-java-import-order '["" "java" "javax" "#"]
        ;; Don't organize imports on save
        lsp-java-save-action-organize-imports nil

        ;; Formatter profile
        ;; lsp-java-format-settings-url
        ;; (concat "file://" jmi/java-format-settings-file)
        )

  :demand t
  :defer t
  :after (lsp lsp-mode dap-mode))

(use-package dap-java
  :ensure nil
  :defer t
  :after (lsp-java)

  ;; The :bind here makes use-package fail to lead the dap-java block!
  ;; :bind
  ;; (("C-c R" . dap-java-run-test-class)
  ;;  ("C-c d" . dap-java-debug-test-method)
  ;;  ("C-c r" . dap-java-run-test-method)
  ;;  )

  :config
  ;; (global-set-key (kbd "<f7>") 'dap-step-in)
  ;; (global-set-key (kbd "<f8>") 'dap-next)
  ;; (global-set-key (kbd "<f9>") 'dap-continue)
  )

#+end_src

*** tree-sitter

#+begin_src emacs-lisp

(use-package tree-sitter
  :straight t
  :defer 0.3
  :when (bound-and-true-p module-file-suffix)
  :hook ;; (prog-mode . tree-sitter-mode)
        (lisp-interaction-mode . (lambda () (tree-sitter-mode -1)))
  :hook (tree-sitter-after-on . tree-sitter-hl-mode)
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  ;; (defadvice! doom-tree-sitter-fail-gracefully-a (orig-fn &rest args)
  ;;   "Don't break with errors when current major mode lacks tree-sitter support."
  ;;   :around #'tree-sitter-mode
  ;;   (condition-case e
  ;;       (apply orig-fn args)
  ;;     (error
  ;;      (unless (string-match-p (concat "^Cannot find shared library\\|"
  ;;                                      "^No language registered\\|"
  ;;                                      "cannot open shared object file")
  ;;                              (error-message-string e))
  ;;        (signal (car e) (cadr e))))))
  )

(use-package tree-sitter-langs
  :straight t
  :defer t
  :when (bound-and-true-p module-file-suffix)
  :after tree-sitter
)

#+end_src

** dired related

#+begin_src emacs-lisp

  ;; (use-package peep-dired
  ;;   :straight t
  ;;   :defer t
  ;;   :after dired
  ;;   :bind (:map dired-mode-map
  ;;               ("E" . peep-dired)))

(use-package dired-narrow
  :straight t
  :defer t
  :after dired
  :bind (:map dired-mode-map
              ("C-c C-n" .'dired-narrow)
              ("C-c C-f" .'dired-narrow-fuzzy)
              ("C-c M-n" .'dired-narrow-regexp)
              )
  )

(use-package dired-subtree
  :defer t
  :straight t
  :after dired ;; treemacs-icons-dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<backtab>" . dired-subtree-cycle)
              )
  )

;; (use-package dired-quick-sort
;;   :straight t
;;   :defer t
;;   :hook (dired-mode)
;;   :config
;;   (dired-quick-sort-setup)
;;   ;; (all-the-icons-dired-mode t)
;;   )

(use-package diredfl
  :straight t
  :defer t
  :hook
  (dired-mode . diredfl-mode))

(use-package dired-rsync
  :straight t
  :defer t
  :after dired
  :bind (:map dired-mode-map
              ("C-c C-r" . #'dired-rsync)))

#+end_src

** org related
*** org-bullets

#+begin_src emacs-lisp

;; org-bullets
(use-package org-bullets
  :straight t
  :defer t
  :hook (org-mode . org-bullets-mode))

#+end_src

*** ox-pandoc

#+begin_src emacs-lisp

;;ox-pandoc
(use-package ox-pandoc
  :straight t
  :defer t
  :hook (org-mode . (lambda () (when (executable-find "pandoc") (require 'ox-pandoc)))))

#+end_src

*** htmlize

#+begin_src emacs-lisp

(use-package htmlize
  :straight t
  :defer t
  :hook (org))

#+end_src

*** COMMENT hyperbole

#+begin_src emacs-lisp

(use-package hyperbole
  :straight t
  :defer 1)

#+end_src


* start server

#+begin_src emacs-lisp

(run-with-idle-timer 0.6 nil (lambda () (require 'server)
                               (unless (server-running-p)
                                 (server-start))))


;; (require 'server)
;; (unless (server-running-p)
;;   (server-start))

#+end_src


* load-theme

#+begin_src emacs-lisp

(defconst theme-directory (expand-file-name "themes" user-emacs-directory))

(unless (file-directory-p theme-directory)
  (make-directory theme-directory))

(add-to-list 'custom-theme-load-path
			 (expand-file-name "themes" user-emacs-directory))


(let ((basedir theme-directory))
  (dolist (f (directory-files basedir))
    (if (and (not (or (equal f ".") (equal f "..")))
             (file-directory-p (concat basedir f)))
        (add-to-list 'custom-theme-load-path (concat basedir f)))))


(add-hook 'after-init-time-hook
          (if (require 'base16-theme nil 'noerror)
              (load-theme 'base16-brewer t)
			(load-theme 'wombat t)
            ;; (load-theme 'manoj-dark t)
            ;; (load-theme 'modus-vivendi t)
            ))

;; (add-hook 'after-init-hook (lambda () (load-theme 'xresources t)))
;; (add-hook 'emacs-startup-hook (lambda () (load-theme 'xresources t)))

#+end_src


* initial scratch-buffer settings

#+begin_src emacs-lisp

(add-hook 'after-init-time-hook (progn
                 (switch-to-buffer "*scratch*")
                 (lisp-interaction-mode)))

#+end_src


* load custom faces

#+begin_src emacs-lisp

(let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
               (when (file-exists-p dafile) (load-file dafile)))

#+end_src


* set custom variables

#+begin_src emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(indicate-empty-lines t)
 ;; '(safe-local-variable-values
 ;;   ((eval add-hook 'after-save-hook
 ;;       (lambda nil
 ;;         (org-babel-tangle)
 ;;         (message "tangled-document")))))
 )

#+end_src


* provide init and finish

#+begin_src emacs-lisp

(provide 'init))

;;; init.el ends here

#+end_src
