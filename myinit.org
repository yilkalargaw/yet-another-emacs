#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General

* window(frame) look and feel settings

#+BEGIN_SRC emacs-lisp

(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94) ; chars
              (height . 52) ; lines
              ))

      (setq default-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94)
              (height . 52)
              ))

(set-frame-position (selected-frame) 0 15)

))


(add-hook 'after-make-frame-functions
          (lambda (frame)
              (select-frame frame)
              (if (display-graphic-p)
                  (progn
                    (set-frame-size frame 94 52)
                    (set-frame-position frame 0 15)
;;                  (set-frame-font "Liberation Mono-9.5" nil t)
;;                  (set-face-attribute 'default nil :height 93 )
                    ))))


(setq inhibit-startup-message t)
(show-paren-mode t)
(global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(toggle-indicate-empty-lines t)

(add-to-list 'default-frame-alist '(font . "Liberation Mono-9.5" ))

#+END_SRC

* initial setup

#+BEGIN_SRC emacs-lisp

;;pacage-list
(setq package-list
    '(
      ;;packages
      use-package exec-path-from-shell telephone-line key-chord use-package-chords
      beacon symbol-overlay hydra ibuffer ivy counsel swiper ivy-hydra nlinum
      undo-tree which-key magit git-gutter git-timemachine forge monky yasnippet
      yasnippet-snippets flycheck flyspell expand-region avy ace-window ag
      smart-hungry-delete ws-butler company multiple-cursors smartparens
      rainbow-delimiters all-the-icons neotree company-c-headers irony company-irony
      flycheck-irony irony-eldoc

      ;;themes
      ample-theme dracula-theme color-theme-sanityinc-tomorrow darktooth-theme
      color-theme-sanityinc-solarized soothe-theme seti-theme spacemacs-theme
      sublime-themes flatland-theme flatui-dark-theme material-theme blackboard-theme
      solarized-theme cyberpunk-theme doom-themes  zenburn-theme org-beautify-theme
       ))

;; activate all the packages
 (package-initialize)

;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'use-package)

#+END_SRC

* themes

#+BEGIN_SRC emacs-lisp

;;themes
(use-package doom-themes
  :ensure t
  :defer t)

(use-package ample-theme
  :ensure t
  :defer t)

(use-package dracula-theme
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :ensure t
  :defer t)

(use-package soothe-theme
  :ensure t
  :defer t)

(use-package seti-theme
  :ensure t
  :defer t)

(use-package spacemacs-theme
  :ensure t
  :defer t)

(use-package solarized-theme
  :ensure t
  :defer t)

(use-package zenburn-theme
  :ensure t
  :defer t)

(use-package cyberpunk-theme
  :ensure t
  :defer t)

(use-package sublime-themes
  :ensure t
  :defer t)

(use-package flatland-theme
  :ensure t
  :defer t)

(use-package flatui-dark-theme
  :ensure t
  :defer t)

(use-package blackboard-theme
  :ensure t
  :defer t)

(use-package material-theme
  :ensure t
  :defer t)

(use-package darktooth-theme
  :ensure t
  :defer t)

(load-theme 'spacemacs-dark t)

#+END_SRC

* default directory

#+BEGIN_SRC emacs-lisp

;;default directory
(setq default-directory "~/")

#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp

;;backups

(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backups" t))
      )
;; (setq auto-save-file-name-transforms
;;       `((".*" ,"~/.emacs.d/backups" t)))

#+END_SRC

* clipboard

#+BEGIN_SRC emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+END_SRC

* yes,no

#+BEGIN_SRC emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

* exec path form shell

#+BEGIN_SRC emacs-lisp

;;exec-path-from-shell
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

#+END_SRC

* telephone-line

#+BEGIN_SRC emacs-lisp

;;telephone-lines
(use-package telephone-line
  :ensure t
  :defer t

  :config (progn (telephone-line-defsegment* telephone-line-god-mode-segment ()
                   (let ((tag (if god-local-mode
                                  "GOD" "EMACS")))
                     (if telephone-line-evil-use-short-tag
                         (seq-take tag 1)
                       tag)))

            (setq telephone-line-lhs
                     '((accent . (telephone-line-vc-segment
                                  telephone-line-erc-modified-channels-segment
                                  telephone-line-process-segment
                                  telephone-line-god-mode-segment))
                       (evil    . (telephone-line-buffer-segment
                                 ; telephone-line-minor-mode-segment
                                  ))))
               ;; (setq telephone-line-rhs
               ;;            '((nil    . (telephone-line-misc-info-segment))
               ;;              (accent . (telephone-line-major-mode-segment))
               ;;               ))
))


(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (if (not (display-graphic-p))
                (progn
                  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
                        telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
                        telephone-line-primary-left-separator 'telephone-line-abs-left
                        telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
                  (setq telephone-line-subseparator '())
                  (telephone-line-mode 1))
                (progn
                  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
                        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
                        telephone-line-primary-right-separator 'telephone-line-cubed-left
                        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
                  (setq telephone-line-subseparator-faces '())
                  (setq telephone-line-height 25)
                  (telephone-line-mode 1)))))


(if (not (display-graphic-p))
    (progn
      (setq telephone-line-primary-right-separator 'telephone-line-abs-left
            telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
            telephone-line-primary-left-separator 'telephone-line-abs-left
            telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
      (setq telephone-line-subseparator '())

      (telephone-line-mode 1))

  (progn
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-left
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
    (setq telephone-line-subseparator-faces '())
    (setq telephone-line-height 25)
    (telephone-line-mode 1)))

#+END_SRC

* indentation stuff

#+BEGIN_SRC emacs-lisp

;;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

#+END_SRC

* smooth-scrolling

#+BEGIN_SRC emacs-lisp

;;smooth-scrolling

;; (use-package smooth-scrolling
;;   :ensure t
;;   :config (setq smooth-scroll-margin 2)
;;   )
;; scroll one line at a time (less "jumpy" than defaults)

(setq mouse-wheel-scroll-amount '(10 ((shift) . 10))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC

* input method

#+BEGIN_SRC emacs-lisp

;;input-method

(defun myinput-settings ()
  "Settings based on input method."
  (cond ((string= current-input-method "ethiopic")
         (progn (setq ethio-primary-language 'amharic)
                (ethio-select-a-translation)))
        (t nil)))

(add-hook 'input-method-activate-hook #'myinput-settings)

#+END_SRC

* key-chords

#+BEGIN_SRC emacs-lisp

;;keychords
(use-package key-chord
  :ensure t)

#+END_SRC

* use-package-chords

#+BEGIN_SRC emacs-lisp

;;use-package-chords
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

#+END_SRC

* trailing white spaces

#+BEGIN_SRC emacs-lisp
;;settings for trailng whitespaces
;;(setq show-trailing-whitespace t)
;;(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'html-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'css-mode-hook (lambda () (setq show-trailing-whitespace t)))
;;(add-hook 'org-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'markdown-mode-hook (lambda () (setq show-trailing-whitespace t)))

#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp

;;beacon
(use-package beacon
  :ensure t
  :defer 3
  :config (beacon-mode 1))

#+END_SRC

* symbol-overlay

#+BEGIN_SRC emacs-lisp

;; symbol overlay
(use-package symbol-overlay
  :ensure t
  :defer t
  :hook (prog-mode . symbol-overlay-mode)
        (html-mode . symbol-overlay-mode)
        (web-mode . symbol-overlay-mode)
        (css-mode . symbol-overlay-mode)
        (yaml-mode . symbol-overlay-mode)
        (toml-mode . symbol-overlay-mode)
        (json-mode . symbol-overlay-mode)
  :config
        (progn (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")
               (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange))))
    ;; (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    ;; (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    ;; (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)
)

;; (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")

;; (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange)))

#+END_SRC

* hydra

#+BEGIN_SRC emacs-lisp

;;hydra
(use-package hydra
  :ensure t)

#+END_SRC

** hydra-zoom

#+BEGIN_SRC emacs-lisp

;; hydra-zoom
(defhydra hydra-zoom (global-map "<f10>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out")
  ("o" (text-scale-adjust 0) "reset")
)

#+END_SRC

* ibuffer

#+BEGIN_SRC emacs-lisp

;; ibuffer
(use-package ibuffer
  :ensure t
  :bind (("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ("C-." . hydra-ibuffer-main/body))
  :hook (ibuffer-mode . hydra-ibuffer-main/body)
  :init
  (defhydra hydra-ibuffer-main (:color pink :hint nil)
  "
 ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
  _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
 _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
  _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
"
  ("j" ibuffer-forward-line)
  ("RET" ibuffer-visit-buffer :color blue)
  ("k" ibuffer-backward-line)

  ("m" ibuffer-mark-forward)
  ("u" ibuffer-unmark-forward)
  ("*" hydra-ibuffer-mark/body :color blue)

  ("D" ibuffer-do-delete)
  ("S" ibuffer-do-save)
  ("a" hydra-ibuffer-action/body :color blue)

  ("g" ibuffer-update)
  ("s" hydra-ibuffer-sort/body :color blue)
  ("/" hydra-ibuffer-filter/body :color blue)

  ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
  ("q" quit-window "quit ibuffer" :color blue)
  ("." nil "toggle hydra" :color blue))

(defhydra hydra-ibuffer-mark (:color teal :columns 5
                              :after-exit (hydra-ibuffer-main/body))
  "Mark"
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-action (:color teal :columns 4
                                :after-exit
                                (if (eq major-mode 'ibuffer-mode)
                                    (hydra-ibuffer-main/body)))
  "Action"
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
  ("b" nil "back"))

(defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
  "Filter"
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  (">" ibuffer-filter-by-size-gt "size")
  ("<" ibuffer-filter-by-size-lt "size")
  ("/" ibuffer-filter-disable "disable")
  ("b" hydra-ibuffer-main/body "back" :color blue)))

#+END_SRC

* ivy,consel and swiper

#+BEGIN_SRC emacs-lisp

;;ivy,console and swiper

(use-package ivy :demand
  :ensure t
  :init (ivy-mode 1)
        (use-package flx
          :ensure t)

        (setq ivy-re-builders-alist
              '((swiper . ivy--regex-plus)
                (counsel-grep  . ivy--regex-plus)
                (counsel-git-grep . ivy--regex-plus)
                (t . ivy--regex-fuzzy)))

        (setq ivy-initial-inputs-alist nil)
        (setq ivy-format-function 'ivy-format-function-line)

        :config (setq ivy-use-virtual-buffers t
                      ivy-count-format "%d/%d ")
                (setq ivy-use-virtual-buffers t)
                (setq ivy-display-style 'fancy)

        :bind ("C-x b" . ivy-switch-buffer)
;;              ("C-x C-b" . ivy-switch-buffer)
              ("C-c C-r" . ivy-resume))

(use-package counsel
  :ensure t
  :defer t
  :bind(
        ("C-x C-f" . counsel-find-file)
        ("M-x" . counsel-M-x)
        ("H-f" . counsel-ag)
        ("C-c M-?" . counsel-ag)
        ("M-y" . counsel-yank-pop)
        ;; :map ivy-minibuffer-map
        ;; ("M-y" . ivy-next-line)
        :map ivy-minibuffer-map
              ("M-y" . ivy-next-line)))

(use-package swiper
  :ensure t
  :defer t
  :bind (("M-s s" . swiper)))

(use-package ivy-hydra
  :ensure t
  :after (ivy hydra))

#+END_SRC

* line-number

#+BEGIN_SRC emacs-lisp

;;line-number

(if (version< emacs-version "26.0")
    (linum-relative-global-mode)
    (progn  (setq display-line-numbers-type (quote relative))
            (global-display-line-numbers-mode)))

#+END_SRC

* nlinum-mode

#+BEGIN_SRC emacs-lisp

;;nlinum mode

(use-package nlinum
  :ensure t
  :config  (setq nlinum-highlight-current-line t)
           (setq nlinum-use-right-margin t)
  :defer t)

(add-hook 'after-init-hook 'global-nlinum-mode t)

#+END_SRC

* line-highlight
 
#+BEGIN_SRC emacs-lisp

;;line-highlight

(global-hl-line-mode)

#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp

;;undo-tree

(use-package undo-tree
  :diminish undo-tree-mode
  :defer 4
 ;:bind ("H-/" . undo-tree-visualize)
  :config (global-undo-tree-mode))

#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp

;;which mode

(use-package which-key
  :ensure t
  :defer 2
  :config (which-key-mode))

#+END_SRC

* git

** git-gutter

#+BEGIN_SRC emacs-lisp

(use-package git-gutter
  :ensure t
  :defer t)

#+END_SRC

** git-timemachine

#+BEGIN_SRC emacs-lisp

(use-package git-timemachine
  :ensure t
  :defer t)

#+END_SRC

*** hydra

#+BEGIN_SRC emacs-lisp

(defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                            :hint nil)
  "
Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
  ("j" git-gutter:next-hunk)
  ("k" git-gutter:previous-hunk)
  ("h" (progn (goto-char (point-min))
              (git-gutter:next-hunk 1)))
  ("l" (progn (goto-char (point-min))
              (git-gutter:previous-hunk 1)))
  ("s" git-gutter:stage-hunk)
  ("r" git-gutter:revert-hunk)
  ("p" git-gutter:popup-hunk)
  ("R" git-gutter:set-start-revision)
  ("q" nil :color blue)
  ("Q" (progn (git-gutter-mode -1)
              ;; git-gutter-fringe doesn't seem to
              ;; clear the markup right away
              (sit-for 0.1)
              (git-gutter:clear))
       :color blue))

#+END_SRC

** magit & forge

#+BEGIN_SRC emacs-lisp

;;magit

(use-package magit
  :ensure t
  :config (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  :defer t)

(global-set-key (kbd "C-C g m") 'magit-status)
(global-set-key (kbd "H-g") 'magit-status)


(use-package forge
  :ensure t
  :defer t
  :after magit)

;; (use-package magithub
;;   :after magit
;;   :ensure t
;;   :config (magithub-feature-autoinject t))

#+END_SRC

* monky

#+BEGIN_SRC emacs-lisp

;;monky

(use-package monky
  :ensure t
  :defer t)

#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp

;;yasnippet

(use-package yasnippet
  :ensure t
  :defer 2
  :diminish yas-minor-mode
  :init (use-package yasnippet-snippets
          :ensure t
          :defer t)
  :config (yas-global-mode 1))

;;(add-hook 'prog-mode-hook 'yas-minor-mode)

#+END_SRC

* flycheck

#+BEGIN_SRC emacs-lisp

;;flycheck

(use-package flycheck
:ensure t
:defer t
:hook (prog-mode-hook . flyspell-prog-mode)
:config (progn
        (setq flycheck-standard-error-navigation nil)
        (global-flycheck-mode t)))

;(add-hook 'prog-mode-hook 'flycheck-mode)

#+END_SRC

* flyspell

#+BEGIN_SRC emacs-lisp

(use-package flyspell
  :ensure t
  :defer t
  :hook ((prog-mode-hook . flyspell-prog-mode)
	 (text-mode-hook . flyspell-mode))
  :config
  ;; Sets flyspell correction to use two-finger mouse click
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  )

#+END_SRC

* expand-region

#+BEGIN_SRC emacs-lisp

;;expand-region

(use-package expand-region
  :ensure t
  :defer 3
  :bind (("C-=". er/expand-region)))

#+END_SRC

* avy

#+BEGIN_SRC emacs-lisp

;;avy

(use-package avy
  :ensure t
  :defer t
  :bind (("C-c v c" . avy-goto-char)
  ("C-c v 2" . avy-goto-char-2)
  ("C-c v w" . avy-goto-word-1)
  ("C-c v l" . avy-goto-line)
  :map isearch-mode-map
       ("C-'" . avy-isearch))
 )

(defhydra hydra-avy ( :hint nil)
  "
     ^Char^            ^other^
-------------------------------------
[_c_]   char         [_w_]   word
[_C_]   char-2       [_s_]   subword
[_t_]   char-timer   [_l_]   line
"
    ("c" avy-goto-char :exit t)
    ("C" avy-goto-char-2 :exit t)
    ("t" avy-goto-char-timer :exit t)
    ("w" avy-goto-word-1 :exit t)
    ("s" avy-goto-subword-1 :exit t)
    ("l" avy-goto-line :exit t))
(global-set-key (kbd "C-'") 'hydra-avy/body) ;;example-binding
(global-set-key (kbd "H-'") 'hydra-avy/body) ;;example-binding
(key-chord-define-global "vj"  'hydra-avy/body)

#+END_SRC

* ace-window

#+BEGIN_SRC emacs-lisp

;;ace-window

(use-package ace-window
  :ensure t
  :bind ("H-<f12>" . ace-window)
        ("C-c <f12>" . ace-window))

#+END_SRC

* ag

#+BEGIN_SRC emacs-lisp

;;ag

(use-package ag
  :ensure t
  :defer t)

#+END_SRC

* smart-hungry delete

#+BEGIN_SRC emacs-lisp

(use-package smart-hungry-delete
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :defer t
;;  :config (smart-hungry-delete-add-default-hooks)
)

#+END_SRC

* ws-butler

#+BEGIN_SRC emacs-lisp

(use-package ws-butler
  :ensure t
  :defer t
  :hook (prog-mode . ws-butler-mode))

#+END_SRC

* multiple-cursors

#+BEGIN_SRC emacs-lisp

;;multiple-cursors

(use-package multiple-cursors
  :ensure t
  :defer t
  :config (define-key mc/keymap (kbd "<return>") nil)
  :bind ;;("H-\\" . mc/mark-all-like-this)
        ("C-S-<mouse-1>" . mc/add-cursor-on-click))

#+END_SRC

** Hydra-multiple-cursors

#+BEGIN_SRC emacs-lisp

(defhydra hydra-multiple-cursors (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil))

(global-set-key (kbd "C-c m c") 'hydra-multiple-cursors/body) ;;example-binding
(global-set-key (kbd "C-;") 'hydra-multiple-cursors/body) ;;example-binding
(key-chord-define-global "qk"   'hydra-multiple-cursors/body)

#+END_SRC

* smartparens

#+BEGIN_SRC emacs-lisp

;;smartparens

(use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)
      (global-set-key
       (kbd "H-(")
       (defhydra hydra-learn-sp (:hint nil)
         "
  _B_ backward-sexp            -----
  _F_ forward-sexp               _s_ splice-sexp
  _L_ backward-down-sexp         _df_ splice-sexp-killing-forward
  _H_ backward-up-sexp           _db_ splice-sexp-killing-backward
^^------                         _da_ splice-sexp-killing-around
  _k_ down-sexp                -----
  _j_ up-sexp                    _C-s_ select-next-thing-exchange
-^^-----                         _C-p_ select-previous-thing
  _n_ next-sexp                  _C-n_ select-next-thing
  _p_ previous-sexp            -----
  _a_ beginning-of-sexp          _C-f_ forward-symbol
  _z_ end-of-sexp                _C-b_ backward-symbol
--^^-                          -----
  _t_ transpose-sexp             _c_ convolute-sexp
-^^--                            _g_ absorb-sexp
  _x_ delete-char                _q_ emit-sexp
  _dw_ kill-word               -----
  _dd_ kill-sexp                 _,b_ extract-before-sexp
-^^--                            _,a_ extract-after-sexp
  _S_ unwrap-sexp              -----
-^^--                            _AP_ add-to-previous-sexp
  _C-h_ forward-slurp-sexp       _AN_ add-to-next-sexp
  _C-l_ forward-barf-sexp      -----
  _C-S-h_ backward-slurp-sexp    _ join-sexp
  _C-S-l_ backward-barf-sexp     _|_ split-sexp
"
         ;; TODO: Use () and [] - + * | <space>
  ("B" sp-backward-sexp );; similiar to VIM b
  ("F" sp-forward-sexp );; similar to VIM f
  ;;
  ("L" sp-backward-down-sexp )
  ("H" sp-backward-up-sexp )
  ;;
  ("k" sp-down-sexp ) ; root - towards the root
  ("j" sp-up-sexp )
  ;;
  ("n" sp-next-sexp )
  ("p" sp-previous-sexp )
  ;; a..z
  ("a" sp-beginning-of-sexp )
  ("z" sp-end-of-sexp )
  ;;
  ("t" sp-transpose-sexp )
  ;;
  ("x" sp-delete-char )
  ("dw" sp-kill-word )
  ;;("ds" sp-kill-symbol ) ;; Prefer kill-sexp
  ("dd" sp-kill-sexp )
  ;;("yy" sp-copy-sexp ) ;; Don't like it. Pref visual selection
  ;;
  ("S" sp-unwrap-sexp ) ;; Strip!
  ;;("wh" sp-backward-unwrap-sexp ) ;; Too similar to above
  ;;
  ("C-h" sp-forward-slurp-sexp )
  ("C-l" sp-forward-barf-sexp )
  ("C-S-h" sp-backward-slurp-sexp )
  ("C-S-l" sp-backward-barf-sexp )
  ;;
  ;;("C-[" (bind (sp-wrap-with-pair "[")) ) ;;FIXME
  ;;("C-(" (bind (sp-wrap-with-pair "(")) )
  ;;
  ("s" sp-splice-sexp )
  ("df" sp-splice-sexp-killing-forward )
  ("db" sp-splice-sexp-killing-backward )
  ("da" sp-splice-sexp-killing-around )
  ;;
  ("C-s" sp-select-next-thing-exchange )
  ("C-p" sp-select-previous-thing )
  ("C-n" sp-select-next-thing )
  ;;
  ("C-f" sp-forward-symbol )
  ("C-b" sp-backward-symbol )
  ;;
  ;;("C-t" sp-prefix-tag-object)
  ;;("H-p" sp-prefix-pair-object)
  ("c" sp-convolute-sexp )
  ("g" sp-absorb-sexp )
  ("q" sp-emit-sexp )
  ;;
  (",b" sp-extract-before-sexp )
  (",a" sp-extract-after-sexp )
  ;;
  ("AP" sp-add-to-previous-sexp );; Difference to slurp?
  ("AN" sp-add-to-next-sexp )
  ;;
  ("_" sp-join-sexp ) ;;Good
  ("|" sp-split-sexp )))))



(add-hook 'prog-mode-hook #'smartparens-mode)
(add-hook 'markdown-mode-hook #'smartparens-mode)
(sp-local-pair 'web-mode  "<%" "%>" :wrap "C-%")

#+END_SRC

* rainbow-delimiters

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

* company

#+BEGIN_SRC emacs-lisp

;;company

(use-package company
  :ensure t
  :defer t
  :config (require 'company)
  (global-set-key (kbd "<backtab>") 'company-complete-common)
  (global-set-key (kbd "H-<SPC>") 'company-complete-common)
  (global-set-key (kbd "C-`") 'company-yasnippet)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))

(add-hook 'after-init-hook 'global-company-mode)

#+END_SRC
* eshell

#+BEGIN_SRC emacs-lisp

;;eshell

(add-hook 'eshell-mode-hook '(lambda ()
                               (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)))
(add-hook 'eshell-mode-hook '(lambda ()
                               (define-key eshell-mode-map (kbd "<backtab>") 'completion-at-point)))


(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
(add-hook 'eshell-mode-hook
          '(lambda()
             (local-set-key (kbd "H-l") 'eshell-clear-buffer)))


(add-hook 'eshell-mode-hook
          (defun my-eshell-mode-setup ()
            (remove-hook 'eshell-output-filter-functions
                         'eshell-postoutput-scroll-to-bottom)))

(add-hook 'eshell-mode-hook '(lambda ()
                               (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
                                 "ncftp" "pine" "tin" "trn" "elm" "vim"
                                 "htop")
                                 )
                               ;;(add-to-list 'eshell-visual-commands "vim")
))


#+END_SRC

* shell-mode

#+BEGIN_SRC emacs-lisp

;;shell-mode

(add-hook 'shell-mode-hook '(lambda ()
                               (define-key shell-mode-map (kbd "<tab>") 'completion-at-point)))
(add-hook 'shell-mode-hook '(lambda ()
                               (define-key shell-mode-map (kbd "<backtab>") 'completion-at-point)))

#+END_SRC

* term-mode

#+BEGIN_SRC emacs-lisp

;;(defun my-display-line-number (lambda () (display-line-numbers-mode -1)))

(add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'term-mode-hook (lambda () (nlinum-mode -1)))
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))

#+END_SRC

* comint-mode

#+BEGIN_SRC emacs-lisp

;;conmint-mode

(setq comint-scroll-show-maximum-output nil)
(setq comint-scroll-to-bottom-on-input nil)
(setq comint-scroll-to-bottom-on-output nil)

#+END_SRC

* all-the-icons

#+BEGIN_SRC emacs-lisp

(use-package all-the-icons-dired
  :ensure t
  :defer t
  :hook (dired-mode . all-the-icons-dired-mode)
)

(use-package all-the-icons-ivy
  :ensure t
  :hook (ivy-mode)
  :init
  (all-the-icons-ivy-setup))


#+END_SRC

* neotree

#+BEGIN_SRC emacs-lisp

;;neotree
(require 'all-the-icons)

(use-package neotree
  :ensure t
  :defer t
  :bind ("H-." . 'neotree-toggle)
        ("C-c n t" . 'neotree-toggle)
  :init (require 'all-the-icons)
         (setq neo-theme (or 'icons 'arrows))
                                        ;          (setq neo-theme 'icons)
         (setq neo-window-fixed-size nil))

(add-hook 'neotree-mode-hook 'my-neotree-hook)
(defun my-neotree-hook ()
  (nlinum-mode 0))

#+END_SRC

* C/C++

#+BEGIN_SRC emacs-lisp

;;C/C++

(use-package company-c-headers
  :ensure t)


(use-package irony
  :ensure t
  :defer t
  :init ;(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
  :hook (c++-mode . (lambda () irony-mode 1))
        (c-mode . (lambda () (irony-mode 1)))
        (objc-mode . (lambda () ('irony-mode 1)))
  :config (add-to-list 'company-backends 'company-irony)
          (add-to-list 'company-backends 'company-c-headers)
          (flycheck-irony-setup)
          (irony-eldoc)
         ;; (add-hook 'irony-mode-hook #'irony-eldoc)
)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(use-package company-irony
  :ensure t
  :defer t)


(use-package flycheck-irony
  :ensure t
  :defer t)

;; (eval-after-load 'flycheck
;;   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

(use-package irony-eldoc
  :ensure t
  :defer t)
;;(add-hook 'irony-mode-hook #'irony-eldoc)

#+END_SRC

