#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General

* window(frame) look and feel settings

#+BEGIN_SRC emacs-lisp

(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94) ; chars
              (height . 52) ; lines
              ))

      (setq default-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94)
              (height . 52)
              ))

(set-frame-position (selected-frame) 0 15)

))


(add-hook 'after-make-frame-functions
          (lambda (frame)
              (select-frame frame)
              (if (display-graphic-p)
                  (progn
                    (set-frame-size frame 94 52)
                    (set-frame-position frame 0 15)
;;                  (set-frame-font "Liberation Mono-9.5" nil t)
;;                  (set-face-attribute 'default nil :height 93 )
                    ))))


(setq inhibit-startup-message t)
(show-paren-mode t)
(global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(toggle-indicate-empty-lines t)

(add-to-list 'default-frame-alist '(font . "Liberation Mono-9.5" ))

#+END_SRC

* initial setup

#+BEGIN_SRC emacs-lisp

;;pacage-list
(setq package-list
    '(
      ;;packages
      use-package exec-path-from-shell telephone-line key-chord use-package-chords
      beacon symbol-overlay hydra

      ;;themes
      ample-theme dracula-theme color-theme-sanityinc-tomorrow darktooth-theme
      color-theme-sanityinc-solarized soothe-theme seti-theme spacemacs-theme
      sublime-themes flatland-theme flatui-dark-theme material-theme blackboard-theme
      solarized-theme cyberpunk-theme doom-themes  zenburn-theme org-beautify-theme
       ))

;; activate all the packages
 (package-initialize)

;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'use-package)

#+END_SRC

* themes

#+BEGIN_SRC emacs-lisp

;;themes
(use-package doom-themes
  :ensure t
  :defer t)

(use-package ample-theme
  :ensure t
  :defer t)

(use-package dracula-theme
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :ensure t
  :defer t)

(use-package soothe-theme
  :ensure t
  :defer t)

(use-package seti-theme
  :ensure t
  :defer t)

(use-package spacemacs-theme
  :ensure t
  :defer t)

(use-package solarized-theme
  :ensure t
  :defer t)

(use-package zenburn-theme
  :ensure t
  :defer t)

(use-package cyberpunk-theme
  :ensure t
  :defer t)

(use-package sublime-themes
  :ensure t
  :defer t)

(use-package flatland-theme
  :ensure t
  :defer t)

(use-package flatui-dark-theme
  :ensure t
  :defer t)

(use-package blackboard-theme
  :ensure t
  :defer t)

(use-package material-theme
  :ensure t
  :defer t)

(use-package darktooth-theme
  :ensure t
  :defer t)

(load-theme 'spacemacs-dark t)

#+END_SRC

* default directory

#+BEGIN_SRC emacs-lisp

;;default directory
(setq default-directory "~/")

#+END_SRC

* exec path form shell

#+BEGIN_SRC emacs-lisp

;;exec-path-from-shell
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

#+END_SRC

* telephone-line

#+BEGIN_SRC emacs-lisp

;;telephone-lines
(use-package telephone-line
  :ensure t
  :defer t

  :config (progn (telephone-line-defsegment* telephone-line-god-mode-segment ()
                   (let ((tag (if god-local-mode
                                  "GOD" "EMACS")))
                     (if telephone-line-evil-use-short-tag
                         (seq-take tag 1)
                       tag)))

            (setq telephone-line-lhs
                     '((accent . (telephone-line-vc-segment
                                  telephone-line-erc-modified-channels-segment
                                  telephone-line-process-segment
                                  telephone-line-god-mode-segment))
                       (evil    . (telephone-line-buffer-segment
                                 ; telephone-line-minor-mode-segment
                                  ))))
               ;; (setq telephone-line-rhs
               ;;            '((nil    . (telephone-line-misc-info-segment))
               ;;              (accent . (telephone-line-major-mode-segment))
               ;;               ))
))


(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (if (not (display-graphic-p))
                (progn
                  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
                        telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
                        telephone-line-primary-left-separator 'telephone-line-abs-left
                        telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
                  (setq telephone-line-subseparator '())
                  (telephone-line-mode 1))
                (progn
                  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
                        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
                        telephone-line-primary-right-separator 'telephone-line-cubed-left
                        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
                  (setq telephone-line-subseparator-faces '())
                  (setq telephone-line-height 25)
                  (telephone-line-mode 1)))))


(if (not (display-graphic-p))
    (progn
      (setq telephone-line-primary-right-separator 'telephone-line-abs-left
            telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
            telephone-line-primary-left-separator 'telephone-line-abs-left
            telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
      (setq telephone-line-subseparator '())

      (telephone-line-mode 1))

  (progn
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-left
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
    (setq telephone-line-subseparator-faces '())
    (setq telephone-line-height 25)
    (telephone-line-mode 1)))

#+END_SRC

* indentation stuff

#+BEGIN_SRC emacs-lisp

;;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

#+END_SRC

* key-chords

#+BEGIN_SRC emacs-lisp

;;keychords
(use-package key-chord
  :ensure t)

#+END_SRC

* use-package-chords

#+BEGIN_SRC emacs-lisp

;;use-package-chords
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

#+END_SRC

* trailing white spaces

#+BEGIN_SRC emacs-lisp
;;settings for trailng whitespaces
;;(setq show-trailing-whitespace t)
;;(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'html-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'css-mode-hook (lambda () (setq show-trailing-whitespace t)))
;;(add-hook 'org-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'markdown-mode-hook (lambda () (setq show-trailing-whitespace t)))

#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp

;;beacon
(use-package beacon
  :ensure t
  :defer 3
  :config (beacon-mode 1))

#+END_SRC

* symbol-overlay

#+BEGIN_SRC emacs-lisp

;; symbol overlay
(use-package symbol-overlay
  :ensure t
  :defer t
  :hook (prog-mode . symbol-overlay-mode)
        (html-mode . symbol-overlay-mode)
        (web-mode . symbol-overlay-mode)
        (css-mode . symbol-overlay-mode)
        (yaml-mode . symbol-overlay-mode)
        (toml-mode . symbol-overlay-mode)
        (json-mode . symbol-overlay-mode)
  :config
        (progn (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")
               (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange))))
    ;; (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    ;; (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    ;; (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)
)

;; (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")

;; (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange)))

#+END_SRC

* hydra

#+BEGIN_SRC emacs-lisp

;;hydra
(use-package hydra
  :ensure t)

#+END_SRC

** hydra-zoom

#+BEGIN_SRC emacs-lisp

;; hydra-zoom
(defhydra hydra-zoom (global-map "<f10>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out")
  ("o" (text-scale-adjust 0) "reset")
)

#+END_SRC

