#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General

* window(frame) look and feel settings

#+BEGIN_SRC emacs-lisp

(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94) ; chars
              (height . 52) ; lines
              ))

      (setq default-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94)
              (height . 52)
              ))

(set-frame-position (selected-frame) 0 15)

))


(add-hook 'after-make-frame-functions
          (lambda (frame)
              (select-frame frame)
              (if (display-graphic-p)
                  (progn
                    (set-frame-size frame 94 52)
                    (set-frame-position frame 0 15)
;;                  (set-frame-font "Liberation Mono-9.5" nil t)
;;                  (set-face-attribute 'default nil :height 93 )
                    ))))


(setq inhibit-startup-message t)
(show-paren-mode t)
(global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(toggle-indicate-empty-lines t)

(add-to-list 'default-frame-alist '(font . "Liberation Mono-9.5" ))

#+END_SRC

* initial setup

#+BEGIN_SRC emacs-lisp

;;pacage-list
(setq package-list
    '(
      ;;packages
      use-package exec-path-from-shell telephone-line key-chord use-package-chords
      beacon symbol-overlay hydra ibuffer ivy counsel swiper ivy-hydra nlinum
      undo-tree which-key magit git-gutter git-timemachine forge

      ;;themes
      ample-theme dracula-theme color-theme-sanityinc-tomorrow darktooth-theme
      color-theme-sanityinc-solarized soothe-theme seti-theme spacemacs-theme
      sublime-themes flatland-theme flatui-dark-theme material-theme blackboard-theme
      solarized-theme cyberpunk-theme doom-themes  zenburn-theme org-beautify-theme
       ))

;; activate all the packages
 (package-initialize)

;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'use-package)

#+END_SRC

* themes

#+BEGIN_SRC emacs-lisp

;;themes
(use-package doom-themes
  :ensure t
  :defer t)

(use-package ample-theme
  :ensure t
  :defer t)

(use-package dracula-theme
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :ensure t
  :defer t)

(use-package soothe-theme
  :ensure t
  :defer t)

(use-package seti-theme
  :ensure t
  :defer t)

(use-package spacemacs-theme
  :ensure t
  :defer t)

(use-package solarized-theme
  :ensure t
  :defer t)

(use-package zenburn-theme
  :ensure t
  :defer t)

(use-package cyberpunk-theme
  :ensure t
  :defer t)

(use-package sublime-themes
  :ensure t
  :defer t)

(use-package flatland-theme
  :ensure t
  :defer t)

(use-package flatui-dark-theme
  :ensure t
  :defer t)

(use-package blackboard-theme
  :ensure t
  :defer t)

(use-package material-theme
  :ensure t
  :defer t)

(use-package darktooth-theme
  :ensure t
  :defer t)

(load-theme 'spacemacs-dark t)

#+END_SRC

* default directory

#+BEGIN_SRC emacs-lisp

;;default directory
(setq default-directory "~/")

#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp

;;backups

(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backups" t))
      )
;; (setq auto-save-file-name-transforms
;;       `((".*" ,"~/.emacs.d/backups" t)))

#+END_SRC

* clipboard

#+BEGIN_SRC emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+END_SRC

* yes,no

#+BEGIN_SRC emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

* exec path form shell

#+BEGIN_SRC emacs-lisp

;;exec-path-from-shell
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

#+END_SRC

* telephone-line

#+BEGIN_SRC emacs-lisp

;;telephone-lines
(use-package telephone-line
  :ensure t
  :defer t

  :config (progn (telephone-line-defsegment* telephone-line-god-mode-segment ()
                   (let ((tag (if god-local-mode
                                  "GOD" "EMACS")))
                     (if telephone-line-evil-use-short-tag
                         (seq-take tag 1)
                       tag)))

            (setq telephone-line-lhs
                     '((accent . (telephone-line-vc-segment
                                  telephone-line-erc-modified-channels-segment
                                  telephone-line-process-segment
                                  telephone-line-god-mode-segment))
                       (evil    . (telephone-line-buffer-segment
                                 ; telephone-line-minor-mode-segment
                                  ))))
               ;; (setq telephone-line-rhs
               ;;            '((nil    . (telephone-line-misc-info-segment))
               ;;              (accent . (telephone-line-major-mode-segment))
               ;;               ))
))


(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (if (not (display-graphic-p))
                (progn
                  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
                        telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
                        telephone-line-primary-left-separator 'telephone-line-abs-left
                        telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
                  (setq telephone-line-subseparator '())
                  (telephone-line-mode 1))
                (progn
                  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
                        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
                        telephone-line-primary-right-separator 'telephone-line-cubed-left
                        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
                  (setq telephone-line-subseparator-faces '())
                  (setq telephone-line-height 25)
                  (telephone-line-mode 1)))))


(if (not (display-graphic-p))
    (progn
      (setq telephone-line-primary-right-separator 'telephone-line-abs-left
            telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
            telephone-line-primary-left-separator 'telephone-line-abs-left
            telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
      (setq telephone-line-subseparator '())

      (telephone-line-mode 1))

  (progn
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-left
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
    (setq telephone-line-subseparator-faces '())
    (setq telephone-line-height 25)
    (telephone-line-mode 1)))

#+END_SRC

* indentation stuff

#+BEGIN_SRC emacs-lisp

;;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

#+END_SRC

* key-chords

#+BEGIN_SRC emacs-lisp

;;keychords
(use-package key-chord
  :ensure t)

#+END_SRC

* use-package-chords

#+BEGIN_SRC emacs-lisp

;;use-package-chords
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

#+END_SRC

* trailing white spaces

#+BEGIN_SRC emacs-lisp
;;settings for trailng whitespaces
;;(setq show-trailing-whitespace t)
;;(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'html-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'css-mode-hook (lambda () (setq show-trailing-whitespace t)))
;;(add-hook 'org-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'markdown-mode-hook (lambda () (setq show-trailing-whitespace t)))

#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp

;;beacon
(use-package beacon
  :ensure t
  :defer 3
  :config (beacon-mode 1))

#+END_SRC

* symbol-overlay

#+BEGIN_SRC emacs-lisp

;; symbol overlay
(use-package symbol-overlay
  :ensure t
  :defer t
  :hook (prog-mode . symbol-overlay-mode)
        (html-mode . symbol-overlay-mode)
        (web-mode . symbol-overlay-mode)
        (css-mode . symbol-overlay-mode)
        (yaml-mode . symbol-overlay-mode)
        (toml-mode . symbol-overlay-mode)
        (json-mode . symbol-overlay-mode)
  :config
        (progn (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")
               (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange))))
    ;; (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    ;; (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    ;; (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)
)

;; (defface shackra-orange '((t (:foreground "white" :background "#98fbb8"))) "")

;; (add-to-list 'symbol-overlay-faces '(symbol-overlay-default-face . (shakra-orange)))

#+END_SRC

* hydra

#+BEGIN_SRC emacs-lisp

;;hydra
(use-package hydra
  :ensure t)

#+END_SRC

** hydra-zoom

#+BEGIN_SRC emacs-lisp

;; hydra-zoom
(defhydra hydra-zoom (global-map "<f10>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out")
  ("o" (text-scale-adjust 0) "reset")
)

#+END_SRC

* ibuffer

#+BEGIN_SRC emacs-lisp

;; ibuffer
(use-package ibuffer
  :ensure t
  :bind (("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ("C-." . hydra-ibuffer-main/body))
  :hook (ibuffer-mode . hydra-ibuffer-main/body)
  :init
  (defhydra hydra-ibuffer-main (:color pink :hint nil)
  "
 ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
  _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
 _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
  _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
"
  ("j" ibuffer-forward-line)
  ("RET" ibuffer-visit-buffer :color blue)
  ("k" ibuffer-backward-line)

  ("m" ibuffer-mark-forward)
  ("u" ibuffer-unmark-forward)
  ("*" hydra-ibuffer-mark/body :color blue)

  ("D" ibuffer-do-delete)
  ("S" ibuffer-do-save)
  ("a" hydra-ibuffer-action/body :color blue)

  ("g" ibuffer-update)
  ("s" hydra-ibuffer-sort/body :color blue)
  ("/" hydra-ibuffer-filter/body :color blue)

  ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
  ("q" quit-window "quit ibuffer" :color blue)
  ("." nil "toggle hydra" :color blue))

(defhydra hydra-ibuffer-mark (:color teal :columns 5
                              :after-exit (hydra-ibuffer-main/body))
  "Mark"
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-action (:color teal :columns 4
                                :after-exit
                                (if (eq major-mode 'ibuffer-mode)
                                    (hydra-ibuffer-main/body)))
  "Action"
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
  ("b" nil "back"))

(defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
  "Filter"
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  (">" ibuffer-filter-by-size-gt "size")
  ("<" ibuffer-filter-by-size-lt "size")
  ("/" ibuffer-filter-disable "disable")
  ("b" hydra-ibuffer-main/body "back" :color blue)))

#+END_SRC

* ivy,consel and swiper

#+BEGIN_SRC emacs-lisp

;;ivy,console and swiper

(use-package ivy :demand
  :ensure t
  :init (ivy-mode 1)
        (use-package flx
          :ensure t)

        (setq ivy-re-builders-alist
              '((swiper . ivy--regex-plus)
                (counsel-grep  . ivy--regex-plus)
                (counsel-git-grep . ivy--regex-plus)
                (t . ivy--regex-fuzzy)))

        (setq ivy-initial-inputs-alist nil)
        (setq ivy-format-function 'ivy-format-function-line)

        :config (setq ivy-use-virtual-buffers t
                      ivy-count-format "%d/%d ")
                (setq ivy-use-virtual-buffers t)
                (setq ivy-display-style 'fancy)

        :bind ("C-x b" . ivy-switch-buffer)
;;              ("C-x C-b" . ivy-switch-buffer)
              ("C-c C-r" . ivy-resume))

(use-package counsel
  :ensure t
  :defer t
  :bind(
        ("C-x C-f" . counsel-find-file)
        ("M-x" . counsel-M-x)
        ("H-f" . counsel-ag)
        ("C-c M-?" . counsel-ag)
        ("M-y" . counsel-yank-pop)
        ;; :map ivy-minibuffer-map
        ;; ("M-y" . ivy-next-line)
        :map ivy-minibuffer-map
              ("M-y" . ivy-next-line)))

(use-package swiper
  :ensure t
  :defer t
  :bind (("M-s s" . swiper)))

(use-package ivy-hydra
  :ensure t
  :after (ivy hydra))

#+END_SRC

* line-number

#+BEGIN_SRC emacs-lisp

;;line-number

(if (version< emacs-version "26.0")
    (linum-relative-global-mode)
    (progn  (setq display-line-numbers-type (quote relative))
            (global-display-line-numbers-mode)))

#+END_SRC

* nlinum-mode

#+BEGIN_SRC emacs-lisp

;;nlinum mode

(use-package nlinum
  :ensure t
  :config  (setq nlinum-highlight-current-line t)
           (setq nlinum-use-right-margin t)
  :defer t)

(add-hook 'after-init-hook 'global-nlinum-mode t)

#+END_SRC

* line-highlight
 
#+BEGIN_SRC emacs-lisp

;;line-highlight

(global-hl-line-mode)

#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp

;;undo-tree

(use-package undo-tree
  :diminish undo-tree-mode
  :defer 4
 ;:bind ("H-/" . undo-tree-visualize)
  :config (global-undo-tree-mode))

#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp

;;which mode

(use-package which-key
  :ensure t
  :defer 2
  :config (which-key-mode))

#+END_SRC

* git

** git-gutter

#+BEGIN_SRC emacs-lisp

(use-package git-gutter
  :ensure t
  :defer t)

#+END_SRC

** git-timemachine

#+BEGIN_SRC emacs-lisp

(use-package git-timemachine
  :ensure t
  :defer t)

#+END_SRC

*** hydra

#+BEGIN_SRC emacs-lisp

(defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                            :hint nil)
  "
Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
  ("j" git-gutter:next-hunk)
  ("k" git-gutter:previous-hunk)
  ("h" (progn (goto-char (point-min))
              (git-gutter:next-hunk 1)))
  ("l" (progn (goto-char (point-min))
              (git-gutter:previous-hunk 1)))
  ("s" git-gutter:stage-hunk)
  ("r" git-gutter:revert-hunk)
  ("p" git-gutter:popup-hunk)
  ("R" git-gutter:set-start-revision)
  ("q" nil :color blue)
  ("Q" (progn (git-gutter-mode -1)
              ;; git-gutter-fringe doesn't seem to
              ;; clear the markup right away
              (sit-for 0.1)
              (git-gutter:clear))
       :color blue))

#+END_SRC

** magit & forge

#+BEGIN_SRC emacs-lisp

;;magit

(use-package magit
  :ensure t
  :config (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  :defer t)

(global-set-key (kbd "C-C g m") 'magit-status)
(global-set-key (kbd "H-g") 'magit-status)


(use-package forge
  :ensure t
  :defer t
  :after magit)

;; (use-package magithub
;;   :after magit
;;   :ensure t
;;   :config (magithub-feature-autoinject t))

#+END_SRC

