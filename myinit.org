#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+OPTIONS: toc:1          (only include two levels in TOC)
#+PROPERTY: header-args:emacs-lisp    :tangle (concat user-emacs-directory "init.el")
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+auto_tangle: t

* table of contents                                          :noexport:TOC_3:
- [[#mostly-related-to-initialization-process][mostly related to initialization process]]
  - [[#earlyinits][earlyinits]]
  - [[#initial-setup-straight-and-use-package][initial setup straight and use-package]]
  - [[#deferred-compilation][deferred compilation]]
  - [[#load-path-and-custom-files][load path and custom files]]
  - [[#other-init-settings-for-speed][other init settings for speed]]
  - [[#suppress-some-ad-handle-definition-warnings][suppress some ad-handle-definition warnings]]
  - [[#more-garbage-collection-related-settings][more garbage collection related settings]]
- [[#some-constants-and-settings-that-need-to-be-configured-initially][some constants and settings that need to be configured initially]]
  - [[#constants][constants]]
  - [[#libraries][libraries]]
  - [[#gnutls-and-security][gnutls and security]]
  - [[#encryption-related-additional][encryption related additional]]
  - [[#lexical-binding][lexical binding]]
- [[#windowframe-look-and-feel-setting][window(frame) look and feel setting]]
- [[#packages-needed-to-properly-configure-other-packages][packages needed to properly configure other packages]]
  - [[#auto-tangle][auto-tangle]]
  - [[#keychords][keychords]]
  - [[#toc-org][toc-org]]
  - [[#diminish-and-delight][diminish and delight]]
- [[#basic-emacs-editor-preferences][basic emacs editor preferences]]
  - [[#set-utf-8-as-default-coding-system][set utf-8 as default coding system]]
  - [[#autorevert][autorevert]]
  - [[#backup-and-auto-save-list][backup and auto-save-list]]
  - [[#clipboard][clipboard]]
  - [[#yesno][yes,no]]
  - [[#enable-some-disabled-commands][enable some disabled commands]]
  - [[#input-method][input method]]
  - [[#indentation-stuff][indentation stuff]]
  - [[#sentences-end-with-a-single-space][Sentences end with a single space]]
  - [[#line-spacing][line-spacing]]
  - [[#line-number][line-number]]
  - [[#line-highlight][line-highlight]]
  - [[#show-parens][show-parens]]
  - [[#scrolling][scrolling]]
    - [[#horizontal-scrolling][horizontal scrolling]]
    - [[#smooth-scrolling][smooth-scrolling]]
  - [[#marking][marking]]
  - [[#isearch][isearch]]
  - [[#explicitly-set-shell][explicitly set shell]]
- [[#exec-path-form-shell][exec path form shell]]
- [[#hydra][hydra]]
- [[#emacs-built-in-packages][emacs built in packages]]
  - [[#imenu][imenu]]
  - [[#ibuffer][ibuffer]]
  - [[#comint-mode][comint-mode]]
  - [[#shell-mode][shell-mode]]
  - [[#eshell][eshell]]
  - [[#term-mode][term-mode]]
  - [[#eww--shr][eww & shr]]
  - [[#flymake][flymake]]
  - [[#flyspell][flyspell]]
  - [[#ediff][ediff]]
  - [[#tramp][tramp]]
  - [[#whitespace-mode][whitespace-mode]]
- [[#minibuffer-completion-frameworks][minibuffer completion frameworks]]
  - [[#selectrum-consult-marginelia-embark][selectrum, consult, marginelia, embark]]
- [[#packages-i-use][packages I use]]
  - [[#undo-tree][undo-tree]]
  - [[#git][git]]
    - [[#git-gutter][git-gutter]]
    - [[#git-timemachine][git-timemachine]]
    - [[#magit--forge][magit & forge]]
    - [[#monky][monky]]
  - [[#yasnippet][yasnippet]]
  - [[#helpful][helpful]]
  - [[#which-key][which-key]]
  - [[#avy][avy]]
  - [[#ace-link][ace-link]]
  - [[#ace-window][ace-window]]
  - [[#expand-region][expand-region]]
  - [[#ag][ag]]
  - [[#rg][rg]]
  - [[#smart-hungry-delete][smart-hungry delete]]
  - [[#ws-butler][ws-butler]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#phi-search][phi-search]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#modal-editing-modes][modal editing modes]]
    - [[#objed][objed]]
  - [[#restclient][restclient]]
  - [[#highlight-indent-guides][highlight-indent-guides]]
  - [[#novel][nov.el]]
  - [[#pomidor][pomidor]]
  - [[#keyfreq][keyfreq]]
  - [[#company][company]]
  - [[#highligt-number-literals][highligt number literals]]
  - [[#vterm][vterm]]
  - [[#highlight-indent-guides-1][highlight-indent-guides]]
  - [[#default-text-scale][default text-scale]]
  - [[#minions][minions]]
  - [[#projectile][projectile]]
  - [[#smartparens][smartparens]]
  - [[#elpher][elpher]]
  - [[#typing][typing]]
    - [[#speed-type][speed-type]]
    - [[#typing-of-emacs][typing-of-emacs]]
  - [[#devdocs-browser][devdocs browser]]
  - [[#pdf-tools][pdf-tools]]
- [[#org][org]]
  - [[#basic-org][basic org]]
  - [[#org-bullets][org-bullets]]
  - [[#ox-pandoc][ox-pandoc]]
  - [[#htmlize][htmlize]]
- [[#dired][dired]]
- [[#themes-and-theming][themes and theming]]
  - [[#mode-line][mode-line]]
    - [[#telephone-line][telephone-line]]
  - [[#all-the-icons][all-the-icons]]
- [[#programming-and-typesetting][programming and typesetting]]
  - [[#lsp-mode][lsp-mode]]
  - [[#cc][C/C++]]
  - [[#rust][rust]]
  - [[#ruby][ruby]]
  - [[#php][php]]
  - [[#lua][lua]]
  - [[#ocaml][ocaml]]
  - [[#crystal][crystal]]
  - [[#clojure][clojure]]
  - [[#zig][zig]]
  - [[#d][d]]
  - [[#nim][nim]]
  - [[#raku][raku]]
  - [[#csv][csv]]
  - [[#yamltoml-and-json][yaml,toml and json]]
  - [[#rfc-mode][rfc-mode]]
  - [[#go][go]]
  - [[#web][web]]
    - [[#html-css][html, css]]
    - [[#javascript][javascript]]
  - [[#tree-sitter][tree-sitter]]
- [[#start-server][start server]]
- [[#scratch-page-settings][scratch-page settings]]
- [[#set-custom-variables][set custom variables]]
- [[#provide-init][provide init]]

* mostly related to initialization process
** earlyinits

#+begin_src emacs-lisp
;;; package --- Summary
;;; Commentary:
;;; Code:

;;(package-initialize)

(let ((file-name-handler-alist nil))
  (require 'package)

  (when (version< emacs-version "27.0")
    (load-file (concat user-emacs-directory "early-init.el")))

#+end_src

** initial setup straight and use-package

#+begin_src emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

#+end_src

** deferred compilation

#+begin_src emacs-lisp

(if (not (version< emacs-version "27.0"))
    (progn
      (if (fboundp 'native-comp-available-p) (setq comp-deferred-compilation t))
      (setq warning-suppress-types '((flycheck syntax-checker) (comp))))
  )

#+end_src

** load path and custom files

#+begin_src emacs-lisp

;; Set custom settings to load in own file
(setq custom-file (make-temp-file "emacs-custom"))


;; ;; ;; directories for custom themes and elsip-scripts
;; (let ((default-directory  (concat user-emacs-directory "lisp")))
;;   (normal-top-level-add-to-load-path '("."))
;;   (normal-top-level-add-subdirs-to-load-path))

;; (let ((basedir (concat user-emacs-directory "themes")))
;;   (dolist (f (directory-files basedir))
;;     (if (and (not (or (equal f ".") (equal f "..")))
;;              (file-directory-p (concat basedir f)))
;;         (add-to-list 'custom-theme-load-path (concat basedir f)))))

#+end_src

** other init settings for speed

#+begin_src emacs-lisp

(setq inhibit-default-init 1)
(setq initial-major-mode 'fundamental-mode)
;; (kill-buffer "*scratch*")

#+end_src

** suppress some ad-handle-definition warnings

#+begin_src emacs-lisp

(setq ad-redefinition-action 'accept)

#+end_src

** more garbage collection related settings

#+begin_src emacs-lisp

(defun yae-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun yae-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold yae-gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'yae-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'yae-restore-garbage-collection-h)

(use-package gcmh
  :straight (gmch :type git :host gitlab :repo "koral/gcmh")
  :config (gcmh-mode t))

#+end_src


* some constants and settings that need to be configured initially
** constants

#+begin_src emacs-lisp

(defconst EMACS24+   (> emacs-major-version 23))
(defconst EMACS25+   (> emacs-major-version 24))
(defconst EMACS26+   (> emacs-major-version 25))
(defconst EMACS27+   (> emacs-major-version 26))
(defconst EMACS28+   (> emacs-major-version 27))
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
(defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix)))

#+end_src

** libraries

#+begin_src emacs-lisp

(use-package dash
  :straight t)

(use-package f
  :straight t)

(require 's)

(require 'color)

(require 'cl-lib)


(use-package async ;; :defer t
  :straight t)

#+end_src

** gnutls and security

#+begin_src emacs-lisp

;;; Security

;; Emacs is essentially one huge security vulnerability, what with all the
;; dependencies it pulls in from all corners of the globe. Let's try to be at
;; least a little more discerning.
(setq gnutls-verify-error (not (getenv-internal "INSECURE"))
      gnutls-algorithm-priority
      (when (boundp 'libgnutls-version)
        (concat "SECURE128:+SECURE192:-VERS-ALL"
                (if (and (not IS-WINDOWS)
                         (not (version< emacs-version "26.3"))
                         (>= libgnutls-version 30605))
                    ":+VERS-TLS1.3")
                ":+VERS-TLS1.2"))
      ;; `gnutls-min-prime-bits' is set based on recommendations from
      ;; https://www.keylength.com/en/4/
      gnutls-min-prime-bits 3072
      tls-checktrust gnutls-verify-error
      ;; Emacs is built with `gnutls' by default, so `tls-program' would not be
      ;; used in that case. Otherwise, people have reasons to not go with
      ;; `gnutls', we use `openssl' instead. For more details, see
      ;; https://redd.it/8sykl1
      tls-program '("openssl s_client -connect %h:%p -CAfile %t -nbio -no_ssl3 -no_tls1 -no_tls1_1 -ign_eof"
                    "gnutls-cli -p %p --dh-bits=3072 --ocsp --x509cafile=%t \
--strict-tofu --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' %h"
                    ;; compatibility fallbacks
                    "gnutls-cli -p %p %h"))

;; Emacs stores `authinfo' in $HOME and in plain-text. Let's not do that, mkay?
;; This file stores usernames, passwords, and other such treasures for the
;; aspiring malicious third party.
(setq auth-sources (list (concat user-emacs-directory "authinfo.gpg")
                         "~/.authinfo.gpg"))

;;gnutls
(add-hook 'after-init-time-hook (setq gnutls-min-prime-bits 4096))

#+end_src

** encryption related additional

#+begin_src emacs-lisp

(setq epg-gpg-program "gpg2")
(setq auth-sources '("~/.authinfo.gpg"))

#+end_src

** lexical binding

#+begin_src emacs-lisp

(setq-default lexical-binding t)

#+end_src


* window(frame) look and feel setting

#+begin_src emacs-lisp

(set-window-margins nil 2)
(setq inhibit-startup-message t)
;; (global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(setq initial-scratch-message nil)
(setq battery-mode-line-format " [%b%p%% } ")
(display-battery-mode t)
(display-time-mode t)
(setq frame-resize-pixelwise t)
(setq redisplay-skip-fontification-on-input t)
(setq idle-update-delay 1.0)
(setq compilation-scroll-output t)

;; (set-default-font "JetBrains Mono-9") ;;; set default font
;; (setq default-frame-alist '((font . "Jetbrains Mono 9"))) ;;; set default font for emacs --daemon / emacsclient
(setq default-frame-alist '((font . "JetBrainsMono Nerd Font 9"))) ;;; set default font for emacs --daemon / emacsclient
(set-fontset-font t nil "Dejavu Sans Mono" nil 'append)
(set-fontset-font t 'ethiopic "Noto Sans Ethiopic")
;; (set-fontset-font t 'thai "Leelawadee UI" nil 'append)

;; (setq w32-enable-synthesized-fonts t) ;;The w32-enable-synthesized-fonts variable is obsolete starting from Emacs 24.4, as Emacs no longer has this limitation.
;; (set-face-font 'italic "-*-Courier New-normal-i-*-*-11-*-*-*-c-*-iso8859-1")
;; (set-face-font 'bold-italic "-*-Courier New-bold-i-*-*-11-*-*-*-c-*-iso8859-1")

#+end_src


* packages needed to properly configure other packages
** auto-tangle

#+begin_src emacs-lisp

(use-package org-auto-tangle
  ;; :straight (org-auto-tangle :type git :host github :repo "yilkalargaw/org-auto-tangle" :build (:not native-compile))
  :straight t
  :defer t
  :hook (org-mode . org-auto-tangle-mode))

#+end_src

** keychords

#+begin_src emacs-lisp

(use-package key-chord
  :straight t
  :defer t
  :after use-package)

(use-package use-package-chords
  :straight t
  :defer t              ;; remove the defer when I actually use it.
  :after use-package
  :config (key-chord-mode 1))

#+end_src

** toc-org

#+begin_src emacs-lisp

(use-package toc-org
  :straight t
  :defer t
  :hook (org-mode . toc-org-mode))

#+end_src

** diminish and delight

#+begin_src emacs-lisp

(use-package diminish
  :straight t
  :after use-package)

(use-package delight
  :after use-package
  :straight t)

#+end_src

** COMMENT general.el

#+begin_src emacs-lisp

(use-package general :straight t
  :config
  (general-define-key
   "C-h" nil ))

#+end_src


* basic emacs editor preferences
** set utf-8 as default coding system

#+begin_src emacs-lisp

(set-language-environment "UTF-8")

#+end_src

** autorevert

#+begin_src emacs-lisp

;; Automatically reload files was modified by external program
(use-package autorevert
  :straight (:type built-in)
  :diminish
  :hook (after-init . global-auto-revert-mode))

#+end_src

** backup and auto-save-list

#+begin_src emacs-lisp

;;backups

(setq ;; backup-directory-alist '(((concat user-emacs-directory "backups")))
 backup-by-copying t    ; Don't delink hardlinks
 version-control t      ; Use version numbers on backups
 delete-old-versions t  ; Automatically delete excess backups
 kept-new-versions 20   ; how many of the newest versions to keep
 kept-old-versions 5    ; and how many of the old
 ;;auto-save-file-name-transforms `((concat user-emacs-directory "backups") t)
 auto-save-file-name-transforms
 `((".*" ,(concat user-emacs-directory "auto-save-list/") t))
 backup-directory-alist
 `((".*" . ,(concat user-emacs-directory "backups")))
 )

#+end_src

** clipboard

#+begin_src emacs-lisp

;;clipboard

(setq select-enable-clipboard t)

#+end_src

** yes,no

#+begin_src emacs-lisp

;;yes,no

(fset 'yes-or-no-p 'y-or-n-p)

#+end_src

** enable some disabled commands

#+begin_src emacs-lisp

;; enable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;; enabled change region case commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

#+end_src

** input method

#+begin_src emacs-lisp

;;input-method

(defun myinput-settings ()
  "Settings based on input method."
  (cond ((string= current-input-method "ethiopic")
         (progn (setq ethio-primary-language 'amharic)
                (ethio-select-a-translation)))
        (t nil)))

(add-hook 'input-method-activate-hook #'myinput-settings)

#+end_src

** indentation stuff

#+begin_src emacs-lisp

;; ;; to setup tabs
;; (setq c-basic-indent 2)
;; (setq tab-width 4)
;; (setq indent-tabs-mode nil)

(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'c-basic-indent 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq indent-tabs-mode nil)
(setq-default tab-width 4)

;; make tab key do indent first then completion.
(setq-default tab-always-indent 'complete)

#+end_src

** Sentences end with a single space

#+begin_src emacs-lisp

(setq sentence-end-double-space nil)

#+end_src

** line-spacing

#+begin_src emacs-lisp

;; (setq-default line-spacing 0.2)
;; (add-hook 'minibuffer-setup-hook (lambda () (setq line-spacing nil)))

#+end_src

** line-number

#+begin_src emacs-lisp

;;line-numbers

(use-package display-line-numbers
  :straight (:type built-in)
  :defer 0.1
  ;; :init (global-display-line-numbers-mode t)
  :config
  (setq display-line-numbers-type 'relative
        display-line-numbers-grow-only t
        display-line-numbers-width-start t
        ;; display-line-numbers-width 3
        )
  ;;             ;; (setq display-line-numbers-current-absolute nil)
  (global-display-line-numbers-mode t)
  )

#+end_src

** line-highlight

#+begin_src emacs-lisp

;;line-highlight

;;(add-hook 'after-init-hook 'global-hl-line-mode t)
(use-package hl-line
  ;; Highlights the current line
  :hook ((prog-mode text-mode conf-mode special-mode org-mode lisp-interaction) . (lambda () (hl-line-mode t)))
  ;; :after (init)
  :defer 0.5
  :straight (:type built-in)
  :config
  ;; Not having to render the hl-line overlay in multiple buffers offers a tiny
  ;; performance boost. I also don't need to see it in other buffers.
  (setq hl-line-sticky-flag nil
        global-hl-line-sticky-flag nil))

#+end_src

** show-parens

#+begin_src emacs-lisp

(show-paren-mode t)

#+end_src

** scrolling
*** horizontal scrolling

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'html-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'web-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'org-mode (lambda () (setq truncate-lines nil)))
;; (add-hook 'eww-after-render-hook (lambda () (setq truncate-lines t)))

(setq hscroll-margin 0)

(global-set-key (kbd "<mouse-7>") #'(lambda ()
                                      (interactive)
                                      (scroll-left 4)))

(global-set-key (kbd "<mouse-6>") #'(lambda ()
                                      (interactive)
                                      (scroll-right 4)))

#+end_src

*** smooth-scrolling

#+begin_src emacs-lisp

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
      mouse-wheel-progressive-speed t ;; accelerate scrolling
      mouse-wheel-follow-mouse 't ;; scroll window under mouse
      scroll-step 1) ;; keyboard scroll one line at a time
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)

(setq-default scroll-up-aggressively 0.01
              scroll-down-aggressively 0.01)

;; ;; ;; nice scrolling
;; (setq scroll-margin 0
;;       scroll-conservatively 100000
;;       ;; scroll-preserve-screen-position 1
;;       )

(setq fast-but-imprecise-scrolling t)

#+end_src

** marking

#+begin_src emacs-lisp

(transient-mark-mode 1)

(delete-selection-mode 1)

(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
 Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))

(defun jump-to-mark ()
  "Jumps to the local mark, respecting the `mark-ring' order.
This is the same as using \\[set-mark-command] with the prefix argument."
  (interactive)
  (set-mark-command 1))

(defun exchange-point-and-mark-no-activate ()
  "Identical to \\[exchange-point-and-mark] but will not activate the region."
  (interactive)
  (exchange-point-and-mark)
  (deactivate-mark nil))

#+end_src

** isearch

#+begin_src emacs-lisp

(setq-default
 ;; Match count next to the minibuffer prompt
 isearch-lazy-count t
 ;; Don't be stingy with history; default is to keep just 16 entries
 search-ring-max 200
 regexp-search-ring-max 200)

;; swiper like fuzzy search
;; (setq-default
;;  isearch-regexp-lax-whitespace t
;;  search-whitespace-regexp ".*?")

;; (defun move-end-of-line-maybe-ending-isearch (arg)
;; "End search and move to end of line, but only if already at the end of the minibuffer."
;;   (interactive "p")
;;   (if (eobp)
;;       (isearch-mb--after-exit
;;        (lambda ()
;;          (move-end-of-line arg)
;;          (isearch-done)))
;;     (move-end-of-line arg)))

;; (define-key isearch-mb-minibuffer-map (kbd "C-e") 'move-end-of-line-maybe-ending-isearch)

#+end_src

** explicitly set shell

#+begin_src emacs-lisp

(setq explicit-shell-file-name "/bin/bash")

#+end_src


* exec path form shell

#+begin_src emacs-lisp

;;exec-path-from-shell


(use-package exec-path-from-shell
  :straight t
  :config
  (exec-path-from-shell-initialize))

#+end_src


* hydra

#+begin_src emacs-lisp

;;hydra
(use-package hydra
  :defer 0.4
  ;; :hook (after-init . (lambda () (require 'hydra)))
  ;; :init (add-hook 'after-init-time-hook (require 'hydra))
  :straight t
  ;; :defines (ibuffer-mode-map dired-mode-map projectile-mode-map smartparens-mode-map)
  :config
  (load-file (concat user-emacs-directory "hydras.el"))
  ;; (add-hook 'origami-mode-hook (lambda () (define-key prog-mode-map (kbd "η o") 'hydra-folding/body)))
  ;; (add-hook 'ibuffer-mode-hook (lambda () (define-key ibuffer-mode-map (kbd "η .") 'hydra-ibuffer-main/body)))
  ;; (add-hook 'dired-mode-hook (lambda () (define-key dired-mode-map (kbd "η .") 'hydra-dired/body)))
  ;; (add-hook 'projectile-mode-hook (lambda () (define-key projectile-mode-map (kbd "η p") 'hydra-projectile/body)))
  ;; :general
  ;; ("C-c C-m" 'hydra-global-zoom/body)
  :bind ("C-c h" . hydra-map)
  )

#+end_src


* emacs built in packages
** imenu

#+begin_src emacs-lisp

(use-package imenu
  :straight (:type built-in)
  :defer t
  :init
  (set-default 'imenu-auto-rescan t))

#+end_src

** ibuffer

#+begin_src emacs-lisp

;; ibuffer
(use-package ibuffer
  :straight (:type built-in)
  :defer t
  :bind (("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ;; ("η-." . hydra-ibuffer-main/body)
         ("C-." . hydra-ibuffer-main/body)
         )
  :hook (ibuffer-mode . hydra-ibuffer-main/body)

  )

#+end_src

** comint-mode

#+begin_src emacs-lisp

;;conmint-mode
(use-package comint
  :defer t
  :hook ((comint-mode . (lambda () (display-line-numbers-mode -1)))
         (comint-mode . (lambda () (setq line-spacing 0)))
         (comint-mode . (lambda () (setq show-trailing-whitespace nil))))
  :init (setq comint-scroll-show-maximum-output nil)
  (setq comint-scroll-to-bottom-on-input nil)
  (setq comint-scroll-to-bottom-on-output nil)
  )
#+end_src

** shell-mode

#+begin_src emacs-lisp

;;shell-mode

(use-package shell
  :defer t
  :straight (:type built-in)
  :hook ((shell-mode . (lambda () (setq line-spacing 0)))
         (shell-mode . (lambda ()
                         (define-key shell-mode-map (kbd "<tab>") 'completion-at-point)))
         (shell-mode . (lambda ()
                         (define-key shell-mode-map (kbd "<backtab>") 'completion-at-point)))
         ))

#+end_src

** eshell

#+begin_src emacs-lisp

;;eshell

(use-package eshell
  :defer t
  :straight (:type built-in)
  :hook ((eshell-mode . (lambda () (setq line-spacing 0)))
         (eshell-mode . (lambda () (display-line-numbers-mode -1)))
         (eshell-mode . (lambda () (setq show-trailing-whitespace nil)))
         (eshell-mode . (lambda () (remove-hook 'eshell-output-filter-functions
                                                'eshell-postoutput-scroll-to-bottom)))
         (eshell-mode . (lambda ()
                          (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
                                                         "ncftp" "pine" "tin" "trn" "elm" "vim" "kak" "nano" "tmux" "alpine" "mutt"
                                                         "htop" "irb" "python" "python3" "python2" "csc" "sbcl" "guile" "guile2" "node"
                                                         "joe" "jstar" "jmacs" "jpico" "ne" "micro" "nnn" "lf" "ranger")
                                ))))
  :config
  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
  )

#+end_src
 
** term-mode

#+begin_src emacs-lisp

;;(defun my-display-line-number (lambda () (display-line-numbers-mode -1)))
(use-package term
  :defer t
  :hook ;; (term-mode . (lambda () (nlinum-mode -1)))
  (term-mode . (lambda () (display-line-numbers-mode -1)))
  (term-mode . (lambda () (setq line-spacing 0)))
  ;; (term-mode . (lambda () (objed-local-mode -1)))
  (term-mode . (lambda () (setq show-trailing-whitespace nil))))

;; (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
;; (add-hook 'term-mode-hook (lambda () (nlinum-mode -1)))
;; (add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))
;; (add-hook 'term-mode-hook (lambda () (objed-mode -1)))

;;   (defun oleh-term-exec-hook ()
;;   (let* ((buff (current-buffer))
;;          (proc (get-buffer-process buff)))
;;     (set-process-sentinel
;;      proc
;;      `(lambda (process event)
;;         (if (string= event "finished\n")
;;             (kill-buffer ,buff))))))

;; (add-hook 'term-exec-hook 'oleh-term-exec-hook)

(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

#+end_src

** eww & shr

#+begin_src emacs-lisp

(use-package eww
  :straight (:type built-in)
  :hook (eww-mode . visual-line-mode)
  (eww-mode . (lambda () (display-line-numbers-mode -1)))
  )

;; (setq shr-inhibit-images 1)
;; (setq shr-width 80)

#+end_src

** flymake

#+begin_src emacs-lisp

;;flymake

(use-package flymake
  :straight (:type built-in)
  :defer 0.2
  :hook (prog-mode . (lambda () (flymake-mode t)))
  :init
  (setq flymake-fringe-indicator-position 'right-fringe)
  :config (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake)
  (setq flymake-suppress-zero-counters t)
  ;; (setq-default flymake-no-changes-timeout 0.2)
  )

#+end_src

** flyspell

#+begin_src emacs-lisp

(use-package flyspell
  :defer 0.3
  :straight (:type built-in)
  :hook ((prog-mode . (lambda () (when (or (executable-find "aspell") (executable-find "hunspell") (flyspell-prog-mode t)))))
         (text-mode . (lambda () (when (or (executable-find "aspell") (executable-find "hunspell") (flyspell-mode t))))))
  :config
  (cond
   ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")))
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-extra-args '("-d en_US")))
   )

  ;; Sets flyspell correction to use two-finger mouse click
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
  )

;; (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)

#+end_src

** ediff

#+begin_src emacs-lisp

(use-package ediff
  :straight (:type built-in)
  :defer t
  :hook(;; show org ediffs unfolded
        (ediff-prepare-buffer . outline-show-all)
        ;; restore window layout when done
        (ediff-quit . winner-undo))
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-merge-split-window-function 'split-window-horizontally))

#+end_src

** tramp

#+begin_src emacs-lisp

(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
(setq tramp-verbose 1)

#+end_src

** whitespace-mode
#+begin_src emacs-lisp
(use-package whitespace
  :defer t
  :straight (:type built-in)
  :config
   ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://xahlee.info/emacs/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          )))
  
#+end_src

** COMMENT outline

#+begin_src emacs-lisp

(use-package outline-mode
  :straight (:type built-in)
  :hook (prog-mode . outline-minor-mode))

#+end_src

** COMMENT hideshow

#+begin_src emacs-lisp

(use-package hideshow
  :straight (:type built-in)
  :hook (prog-mode . hs-minor-mode))

#+end_src


* minibuffer completion frameworks
** selectrum, consult, marginelia, embark

#+begin_src emacs-lisp

(use-package orderless
  :straight t
  :custom (completion-styles '(orderless))
  :config (setq-local orderless-matching-styles '(orderless-literal)
                      orderless-style-dispatchers nil))

(use-package selectrum
  :straight t
  :config
  (selectrum-mode +1))

(use-package consult
  :straight t
  :after selectrum ;; projectile
  ;; :defines consult-buffer-sources
  ;; :config
  ;; (projectile-load-known-projects)
  ;; (setq my/consult-source-projectile-projects
  ;;        `(:name "Projectile projects"
  ;;                :narrow   ?P
  ;;                :category project
  ;;                :action   ,#'projectile-switch-project-by-name
  ;;                :items    ,projectile-known-projects))
  ;; (add-to-list 'consult-buffer-sources my/consult-source-projectile-projects 'append)
  :bind ("M-s s" . consult-line)
        ("M-s <SPC>" . consult-imenu)
  )

(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :straight t

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

;; prescient for frequency based completion (thinking about trying it)

#+end_src


* packages I use
** undo-tree

#+begin_src emacs-lisp

;;undo-tree

(use-package undo-tree
  :straight t
  :defer 0.2
  :diminish undo-tree-mode
  ;; :hook (after-init . global-undo-tree-mode)
  :config
  (global-undo-tree-mode t)
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-visualizer-diff t))

#+end_src

** git

*** git-gutter

#+begin_src emacs-lisp

(use-package git-gutter
  :straight t
  :defer t
  :hook ((org-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode)
         (markdown-mode . git-gutter-mode))
  )

#+end_src

*** git-timemachine

#+begin_src emacs-lisp

(use-package git-timemachine
  :straight t
  :defer t)

#+end_src

*** magit & forge

#+begin_src emacs-lisp

;;magit

(use-package magit
  :straight t
  :config (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  :defer t
  :after projectile)

;; (global-set-key (kbd "C-C g m") 'magit-status)
;; (global-set-key (kbd "γ g") 'magit-status)


(use-package forge
  :straight t
  :defer t
  :after magit)


#+end_src

*** monky

#+begin_src emacs-lisp

;;monky

(use-package monky
  :straight t
  :defer t)

#+end_src

** yasnippet

#+begin_src emacs-lisp

;;yasnippet

(use-package yasnippet
  :straight t
  :defer 0.4
  ;; :hook (yae-first-input .  yas-global-mode)
  ;; :init (add-hook 'after-init-time-hook  (yas-global-mode))
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  ;; :straight (yasnippet-snippets :build (:not native-compile))
  :straight t
  :defer t
  :after (yasnippet))

#+end_src

** helpful

#+begin_src emacs-lisp

(use-package helpful
  :straight t
  :defer t
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** which-key

#+begin_src emacs-lisp

;;which mode

(use-package which-key
  :straight t
  ;; :defer t
  ;; :after init
  :config ;; (which-key-enable-god-mode-support)
  ;; Allow C-h to trigger which-key before it is done automatically
  (setq which-key-show-early-on-C-h t)
  ;; make sure which-key doesn't show normally but refreshes quickly after it is
  ;; triggered.
  ;; (setq which-key-idle-delay 10000)
  ;; (setq which-key-idle-secondary-delay 0.05)
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)

  (which-key-mode)
  )

;; (add-hook 'after-init-time-hook (progn (require 'which-key) (which-key-mode)))

#+end_src

** avy

#+begin_src emacs-lisp

;;avy

(use-package avy
  :straight t
  :defer t
  :bind (
         ;; ("γ a c" . avy-goto-char)
         ;; ("γ a 2" . avy-goto-char-2)
         ;; ("γ a w" . avy-goto-word-1)
         ;; ("γ a l" . avy-goto-line)
         :map isearch-mode-map
         ("C-'" . avy-isearch))
  )

#+end_src

** ace-link

#+begin_src emacs-lisp

(use-package ace-link
  :straight t
  :defer t
  :after (:any elbank helpful info eww man woman)
  ;; :hook (elbank-mode helpful-mode info-mode eww-mode woman-mode man-mode info-mode)
  :init
  (ace-link-setup-default))

#+end_src

** ace-window

#+begin_src emacs-lisp

;;ace-window

(use-package ace-window
  :straight t
  :defer t
  ;; :bind ("γ w" . ace-window)
  ;;       ;; ("C-c <f12>" . ace-window)
  )

#+end_src

** expand-region

#+begin_src emacs-lisp

(use-package expand-region
  :straight t
  :defer t
  :bind ("C-=" . er/expand-region))

#+end_src

** ag

#+begin_src emacs-lisp

;;ag

(use-package ag
  :straight t
  :defer t)

#+end_src

** rg

#+begin_src emacs-lisp

(use-package rg
  :straight t
  :defer t)

#+end_src

** smart-hungry delete

#+begin_src emacs-lisp

(use-package smart-hungry-delete
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :defer t
  :straight t
  :after init
  ;;  :config (smart-hungry-delete-add-default-hooks)
  )

#+end_src

** ws-butler

#+begin_src emacs-lisp

(use-package ws-butler
  :straight t
  :defer t
  :hook (prog-mode . ws-butler-mode))

#+end_src

** multiple-cursors

#+begin_src emacs-lisp

;;multiple-cursors

(use-package multiple-cursors
  :straight t
  :defer t
  :config (define-key mc/keymap (kbd "<return>") nil)
  :bind ;;("H-\\" . mc/mark-all-like-this)
  ("C-S-<mouse-1>" . mc/add-cursor-on-click))

#+end_src

** phi-search

#+begin_src emacs-lisp

(use-package phi-search
  :straight t
  :defer t
  :bind (:map mc/keymap
              ("C-s" . phi-search)
              ("C-r" . phi-search-backward)))

#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :straight t
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** modal editing modes
*** objed

 #+begin_src emacs-lisp

 (use-package objed
   :straight t
   ;; :defer t
   :defer 0.5
   ;; :hook (after-init . objed-mode)
   :bind
   ("M-o" . objed-local-mode)
   (:map objed-map
         ;; ("<SPC>" . 'objed-char-object)
         ("C-f" . 'objed-right-char)
         ("C-b" . 'objed-left-char)
         ("," . 'objed-identifier-object)
         ("." . 'objed-sentence-object)
         ("b" . 'objed-word-object)

         ("F" . nil)
         ("B" . nil)
         ("S" . nil)
         ("R" . nil)
         ("L" . nil)
         ("." . nil)
         ;; ("N" . nil)
         ;; ("P" . nil)
         ;; ("b" . nil)
         ("B" . nil)

         ("<SPC>" . 'objed-object-map)
         ("c" . 'objed-user-map)
         ("r" . 'objed-toggle-side)
         ("l" . 'objed-next-specialized)
         ("h" . 'objed-previous-specialized)
         ;; ("l" . 'objed-next)
         ;; ("h" . 'objed-previous)
         ("L" . 'objed-move-object-forward)
         ("H" . 'objed-move-object-backward)

         ("f" . 'objed-next-specialized)
         ("s" . 'objed-previous-specialized)
         ;; ("f" . 'objed-next)
         ;; ("s" . 'objed-previous)
         ("F" . 'objed-move-object-forward)
         ("S" . 'objed-move-object-backward)

         ("J" . 'objed-move-line-forward)
         ("i" . 'objed-kill)
         ("I" . 'objed-del-insert)
         ("K" . 'objed-move-line-backward)
         ;; ("K" . nil)
         ("j" . 'objed-next-line)
         ("k" . 'objed-previous-line)
         ("G" . 'objed-del-insert)
         ("<H-SPC>" . 'objed-quit)

         ;; :map objed-user-map
         ;; ("f" . 'move-to-char)
         ;; ("g" . 'move-upto-char)

         :map objed-object-map
         ("," . 'objed-identifier-object)

         ;;        ;; :map objed-mode-map
         ;;        ;; ("<M-SPC>" . 'my-objed-activate)
         )

   ;; :init (objed-mode)

   :config
   ;; (objed-mode)
   ;; (setq objed--which-key-avail-p t
   ;;       objed--avy-avail-p t)
   ;; (setq objed-use-avy-if-available 1)
   ;; (define-key objed-mode-map (kbd "M-SPC") (objed-activate 'char))

   (defun objed--goto-next-specialized (&optional arg)
     "Move to the next object.

 With postitive prefix argument ARG move to the nth next object."
     (let ((arg (or arg 1))
           (obj nil))
       (if (equal objed--object 'line)
           (objed-next-line)
         (progn
           (dotimes (_ arg obj)
             (when (setq obj  (objed--get-next))
               (objed--update-current-object obj)
               (cond ((or (equal objed--object 'word)
                          (equal objed--object 'sexp))
                      (goto-char (objed--end obj)))
                     (t (objed--goto-char (objed--beg obj))))))))))

   (defun objed-next-specialized (&optional arg)
     "Move to ARG next object of current type."
     (interactive "p")
     ;; on init skip current
     (when (and (region-active-p)
                (eq last-command 'objed-extend))
       (exchange-point-and-mark))
     (let ((pos (point)))
       (objed--goto-next-specialized (or arg 1))
       (when (eq pos (point))
         (error "No next %s" objed--object))))


   (defun objed--goto-previous-specialized (&optional arg)
     "Move to the previous object.

 With postitive prefix argument ARG move to the nth previous object."
     (let ((arg (or arg 1))
           (obj nil))
       (if (equal objed--object 'line)
           (objed-previous-line)
         (progn
           (dotimes (_ arg obj)
             (when (setq obj (objed--get-prev))
               (objed--update-current-object obj)
               (objed--goto-char (objed--beg obj))))))))

   (defun objed-previous-specialized (&optional arg)
     "Move to ARG previous object of current type."
     (interactive "p")
     ;; on init skip current
     (when (and (region-active-p)
                (eq last-command 'objed-extend))
       (exchange-point-and-mark))
     (let ((pos (point)))
       (objed--goto-previous-specialized (or arg 1))
       (when (eq pos (point))
         (error "No next %s" objed--object))))

   ;; ;;   ;; :config
   ;; ;; (load (concat user-emacs-directory "lisp/objed-goto-next-specialized.el"))

   )

 ;; (add-hook 'after-init-time-hook (progn (require 'objed) (objed-mode)))

 #+end_src

*** COMMENT god-mode

 #+begin_src emacs-lisp

 (use-package god-mode
   :straight t
   :defer t
   :bind
   ("M-o" . god-local-mode)
   (:map god-local-mode-map
         ("z" . repeat)
         ("i" . god-local-mode)
         ("." . repeat)
         )
   :config
   (setq god-mod-alist '((nil . "C-") ("g" . "M-") ("G" . "C-M-") ("h" . "M-") ("H" . "C-M-")))
  )

 #+end_src

*** COMMENT meow

 #+begin_src emacs-lisp
 (use-package meow
   :straight t
   :defer t)
 #+end_src

*** COMMENT kakoune

 #+begin_src emacs-lisp

 (use-package kakoune
   ;; Having a non-chord way to escape is important, since key-chords don't work in macros
   :straight t
   :bind ("C-z" . ryo-modal-mode)
   :hook (after-init . my/kakoune-setup)
   :config
   (defun ryo-enter () "Enter normal mode" (interactive) (ryo-modal-mode 1))
   (defun my/kakoune-setup ()
       "Call kakoune-setup-keybinds and then add some personal config."
       (kakoune-setup-keybinds)
       (setq ryo-modal-cursor-type 'box)
       (add-hook 'prog-mode-hook #'ryo-enter)
       (define-key ryo-modal-mode-map (kbd "SPC h") 'help-command)
       ;; Access all C-x bindings easily
       (define-key ryo-modal-mode-map (kbd "z") ctl-x-map)
       (ryo-modal-keys
        ("," save-buffer)
        ("P" counsel-yank-pop)
        ("m" mc/mark-next-like-this)
        ("M" mc/skip-to-next-like-this)
        ("n" mc/mark-previous-like-this)
        ("N" mc/skip-to-previous-like-this)
        ("M-m" mc/edit-lines)
        ("*" mc/mark-all-like-this)
        ("v" er/expand-region)
        ("C-v" set-rectangular-region-anchor)
        ("M-s" mc/split-region)
        (";" (("q" delete-window)
              ("v" split-window-horizontally)
              ("s" split-window-vertically)))
        ("C-h" windmove-left)
        ("C-j" windmove-down)
        ("C-k" windmove-up)
        ("C-l" windmove-right)
        ("C-u" scroll-down-command :first '(deactivate-mark))
        ("C-d" scroll-up-command :first '(deactivate-mark)))))

 #+end_src

** restclient

#+begin_src emacs-lisp

;;restclient

(use-package restclient
  :straight t
  :defer t)


;; (use-package company-restclient
;;   :straight t
;;   :after (restclient)
;;   :config
;;   (add-to-list 'company-backends 'company-restclient))

#+end_src

** highlight-indent-guides

#+begin_src emacs-lisp

(use-package highlight-indent-guides
  :straight t
  :defer t
  :config (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-delay 0.1)
  (setq highlight-indent-guides-method 'column)
  )

#+end_src

** nov.el

#+begin_src emacs-lisp

(use-package nov
  :straight t
  :defer t
  :mode ("\\.epub\\'" . nov-mode))

(add-hook 'nov-mode-hook (lambda () (display-line-numbers-mode -1)))
;; (add-hook 'nov-mode-hook (lambda () (nlinum-mode -1)))


#+end_src

** COMMENT origami

#+begin_src emacs-lisp

(use-package origami
  :straight t
  :defer t
  :hook (prog-mode . origami-mode)
  )

#+end_src

** pomidor

#+begin_src emacs-lisp

(use-package pomidor
  :straight t
  :defer t
  :bind (("<S-f6>" . pomidor))
  :config (setq pomidor-sound-tick nil
                pomidor-sound-tack nil)
  :hook (pomidor-mode . (lambda ()
                          (display-line-numbers-mode -1) ; Emacs 26.1+
                          (setq left-fringe-width 0 right-fringe-width 0)
                          (setq left-margin-width 2 right-margin-width 0)
                          ;; force fringe update
                          (set-window-buffer nil (current-buffer))
                          ;;minutes
                          (setq pomidor-seconds (* 25 60)) ; 25 minutes for the work period
                          (setq pomidor-break-seconds (* 5 60)) ; 5 minutes break time
                          ))
  )

#+end_src

** keyfreq

#+begin_src emacs-lisp

(use-package keyfreq
  :straight t
  :defer t
  :after init
  :config (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

#+end_src

** company

#+begin_src emacs-lisp

;;company

(use-package company
  :straight t
  :defer 0.8
  ;; :hook (prog-mode . global-company-mode)
  :bind
  ("C-i" . company-indent-or-complete-common)
  ;; ("C-M-i" . counsel-company)
  :config ;; (require 'company)
  (global-company-mode 1)
  )

#+end_src

** COMMENT corfu & cape & kind-icons

#+begin_src emacs-lisp
;; Enable Corfu completion UI
;; See the Corfu README for more configuration tips.
(use-package corfu
  :defer 0.8
  :straight t
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :init
  (corfu-global-mode))

;; Add extensions
(use-package cape
  :straight t
  ;; Bind dedicated completion commands
  :bind (("C-i" . completion-at-point) ;; capf
         ;; ("C-c p t" . complete-tag)        ;; etags
         ;; ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ;; ("C-c p f" . cape-file)
         ;; ("C-c p k" . cape-keyword)
         ;; ("C-c p s" . cape-symbol)
         ;; ("C-c p a" . cape-abbrev)
         ;; ("C-c p i" . cape-ispell)
         ;; ("C-c p l" . cape-line)
         ;; ("C-c p w" . cape-dict)
         )
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)

(use-package kind-icon
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+end_src

** highligt number literals

#+begin_src emacs-lisp

;; Many major modes do no highlighting of number literals, so we do it for them
(use-package highlight-numbers
  :straight t
  :defer t
  :hook ((prog-mode conf-mode) . highlight-numbers-mode)
  :config (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))

#+end_src

** vterm

#+begin_src emacs-lisp

(use-package vterm
  :straight t
  :defer t
  :when (bound-and-true-p module-file-suffix)
  :hook ((vterm-mode . (lambda () (global-hl-line-mode -1)))
         (vterm-mode . (lambda () (display-line-numbers-mode -1)))
         ;; (vterm-mode . (lambda () (nlinum-mode -1)))
         (vterm-mode . (lambda () (setq show-trailing-whitespace nil)))
         (vterm-mode . (lambda () (setq line-spacing 0)))
         ;; (vterm-mode . (lambda () (objed-local-mode -1)))
         )
  :init (setq vterm-shell "/usr/bin/bash"))

;; (use-package vterm
;;   :commands (vterm)
;;   :straight t
;;   :init
;;   (unless (file-exists-p (concat (file-name-directory (locate-library "vterm"))
;;                                  "vterm-module.so"))
;;     (message "Set vterm to install.")
;;     (setq vterm-install t)))

                                        ;
#+end_src

** highlight-indent-guides

#+begin_src emacs-lisp

(use-package highlight-indent-guides
  :straight t
  :defer t
  :config (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-delay 0.1)
  (setq highlight-indent-guides-method 'column)
  )

#+end_src

** default text-scale

#+begin_src emacs-lisp

(use-package default-text-scale
  :defer 1
  :straight t
  :config
  (default-text-scale-mode))

#+end_src

** minions

#+begin_src emacs-lisp

(use-package minions
  :straight t
  :defer 0.1
  :config
  (setq minions-mode-line-lighter "[+]")
  (minions-mode 1))

#+end_src

** projectile

#+begin_src emacs-lisp

;; projectile

(use-package projectile
  :straight t
  ;; :defer t
  :defer 0.3
  :after init ;; hydra
  :init (setq projectile-mode-line-prefix ""
              projectile-sort-order 'recentf
              projectile-use-git-grep t)
  :hook (prog-mode . projectile-mode)
  :config
  (projectile-global-mode)
  ;; (setq projectile-completion-system 'ivy)
  )

#+end_src

** COMMENT ctrlf

#+begin_src emacs-lisp

  (use-package ctrlf
    :straight t
    :init (ctrlf-mode +1))

#+end_src

** smartparens

#+begin_src emacs-lisp

(use-package smartparens
  :straight t
  :defer 0.6
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t))

#+end_src

** COMMENT isearch-mb

#+begin_src emacs-lisp

(use-package isearch-mb
  :straight t
  :defer 0.5
  :config (isearch-mb-mode))

#+end_src

** elpher

#+begin_src emacs-lisp
  (use-package elpher
    :straight t
    :defer t)  
#+end_src

** typing
*** speed-type

#+begin_src emacs-lisp

(use-package speed-type
  :straight t
  :defer t)

#+end_src

*** typing-of-emacs

#+begin_src emacs-lisp

(use-package typing
  :straight t
  :defer t)

#+end_src

** devdocs browser

#+begin_src emacs-lisp

(use-package devdocs-browser
  :straight t
  :defer t)
  
#+end_src

** pdf-tools

#+begin_src emacs-lisp

(use-package pdf-tools
  :straight t
  :defer t
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :if (display-graphic-p)
  :config
  ;; (pdf-tools-install :no-query)
  (pdf-loader-install)
  (require 'pdf-occur)
  :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  (pdf-view-mode . (lambda () (setq pdf-view-midnight-colors `(,(face-foreground 'default) . ,(face-background 'default)))
                     (pdf-view-midnight-minor-mode 1)))

  )

#+end_src

* org

** basic org
#+begin_src emacs-lisp

(use-package org
  :straight (:type built-in)
  ;; :straight t
  :defer t
  :mode (("\\.org\\'" . org-mode)
         ("\\.org$" . org-mode))
  :config
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0)
  )

#+end_src

** org-bullets

#+begin_src emacs-lisp

;; org-bullets
(use-package org-bullets
  :straight t
  :defer t
  :hook (org-mode . org-bullets-mode))

#+end_src

** ox-pandoc

#+begin_src emacs-lisp

;;ox-pandoc
(use-package ox-pandoc
  :straight t
  :defer t
  :hook (org-mode . (lambda () (when (executable-find "pandoc") (require 'ox-pandoc)))))

#+end_src

** htmlize

#+begin_src emacs-lisp

(use-package htmlize
  :straight t
  :defer t
  :hook (org))
  
#+end_src


* dired

#+begin_src emacs-lisp

(use-package dired
  :straight (:type built-in)
  :defer t
  :hook (dired-mode . (lambda () (dired-hide-details-mode t)))
  :config
  (require 'dired-aux)
  (require 'dired-x)
  ;; (require 'dired-narrow)
  ;; (require 'dired-subtree)
  (setq dired-listing-switches "--group-directories-first -lah")
  (put 'dired-find-alternate-file 'disabled nil)
  (define-key dired-mode-map (kbd "C-<return>") 'dired-find-file)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "M-<return>") 'dired-find-file-other-window)
  ;; allow dired to delete or copy dir
  (setq dired-recursive-copies (quote always)) ; “always” means no asking
  (setq dired-recursive-deletes (quote top)) ; “top” means ask once
  (setq dired-dwim-target t)

  (defun dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
          (progn
            (set (make-local-variable 'dired-dotfiles-show-p) nil)
            (message "h")
            (dired-mark-files-regexp "^\\\.")
            (dired-do-kill-lines))
        (progn (revert-buffer) ; otherwise just revert to re-show
               (set (make-local-variable 'dired-dotfiles-show-p) t)))))

  (define-key dired-mode-map (kbd "H-l")
              (lambda () (interactive) (dired-dotfiles-toggle)))

  (define-key dired-mode-map (kbd "^")
              (lambda () (interactive) (find-alternate-file "..")))

  (setq wdired-allow-to-change-permissions t)


  ;; (use-package peep-dired
  ;;   :straight t
  ;;   :defer t
  ;;   :after dired
  ;;   :bind (:map dired-mode-map
  ;;               ("E" . peep-dired)))

  ;; (defadvice dired-subtree-toggle (after dired-icons-refreash ())
  ;;   "Insert an empty line when moving up from the top line."
  ;;   (revert-buffer))

  ;; (ad-activate 'dired-subtree-toggle)

  ;; (defadvice dired-subtree-cycle (after dired-icons-refreash ())
  ;;   "Insert an empty line when moving up from the top line."
  ;;   (revert-buffer))

  ;; (ad-activate 'dired-subtree-cycle)


  )


(use-package dired-narrow
  :straight t
  :defer t
  :after dired
  :bind (:map dired-mode-map
              ("C-c C-n" .'dired-narrow)
              ("C-c C-f" .'dired-narrow-fuzzy)
              ("C-c M-n" .'dired-narrow-regexp)
              )
  )

(use-package dired-subtree
  :defer t
  :straight t
  :after dired ;; treemacs-icons-dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<backtab>" . dired-subtree-cycle)
              )
  )

(use-package dired-quick-sort
  :straight t
  :defer t
  :hook (dired-mode)
  :config
  (dired-quick-sort-setup)
  ;; (all-the-icons-dired-mode t)
  )

(use-package diredfl
  :straight t
  :defer t
  :hook
  (dired-mode . diredfl-mode))

(use-package dired-rsync
  :straight t
  :defer t
  :after dired
  :bind (:map dired-mode-map
              ("C-c C-r" . #'dired-rsync)))

#+end_src


* themes and theming

#+begin_src emacs-lisp

;;themes

(use-package doom-themes
  :straight t
  :defer t)

(use-package nord-theme
  :straight t
  :defer t)

(use-package ample-theme
  :straight t
  :defer t)

(use-package dracula-theme
  :straight t
  :defer t)

(use-package color-theme-sanityinc-tomorrow
  :straight t
  :defer t)

(use-package color-theme-sanityinc-solarized
  :straight t
  :defer t)

(use-package soothe-theme
  :straight t
  :defer t)

(use-package seti-theme
  :straight t
  :defer t)

(use-package spacemacs-theme
  :straight t
  :defer t)

(use-package solarized-theme
  :straight t
  :defer t)

(use-package zenburn-theme
  :straight t
  :defer t)

(use-package cyberpunk-theme
  :straight t
  :defer t)

(use-package sublime-themes
  :straight t
  :defer t)

(use-package flatland-theme
  :straight t
  :defer t)

(use-package flatui-dark-theme
  :straight t
  :defer t)

(use-package blackboard-theme
  :straight t
  :defer t)

(use-package material-theme
  :straight t
  :defer t)

(use-package moe-theme
  :straight t
  :defer t)

(use-package darktooth-theme
  :straight t
  :defer t)

(use-package danneskjold-theme
  :straight t
  :defer t)

(use-package acme-theme
  :straight t
  :defer t)

(use-package modus-themes
  :straight t
  :defer t
  )

(use-package base16-theme
  :straight t
  :defer t
  )

(use-package gotham-theme
  :straight t
  :defer t
  )

(use-package vscode-dark-plus-theme
  :straight t
  :defer t)

(use-package kaolin-themes
  :straight t
  :defer t)

;; (use-package solaire-mode
;;   :straight t
;;   :hook (((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
;;   (minibuffer-setup . solaire-mode-in-minibuffer))
;;   :init (solaire-global-mode 1))

(add-hook 'after-init-time-hook
          (progn
            (defadvice load-theme (after custom-faces-after-load-theme())
              "Insert an empty line when moving up from the top line."
              (let ((dafile (concat user-emacs-directory "custom_faces.el")))
                (if (file-exists-p dafile) (load-file dafile))
                ;; (save-excursion
                ;;  (if (and solaire-mode (fboundp 'dashboard-refresh-buffer)) (dashboard-refresh-buffer)))
                ))


            (ad-activate 'load-theme)

            (defadvice disable-theme (after custom-faces-after-disable-theme())
              "Insert an empty line when moving up from the top line."
              (let ((dafile (concat user-emacs-directory "custom_faces.el")))
                (if (file-exists-p dafile) (load-file dafile))
                ;; (save-excursion
                ;;  (if (and solaire-mode (fboundp 'dashboard-refresh-buffer)) (dashboard-refresh-buffer)))
                ))


            (ad-activate 'disable-theme)

            )
          )

(add-hook 'after-init-time-hook
          (progn
            (setq base16-theme-256-color-source 'base16-shell)
            (setq base16-distinct-fringe-background nil)
            ;; (setq base16-highlight-mode-line 'box)
            (load-theme 'base16-brewer t)
            ;; (load-file (concat user-emacs-directory "custom_faces.el"))
            ))

(add-hook 'after-init-time-hook
          (load-file (concat user-emacs-directory "custom_faces.el")))

;; (load-theme 'manoj-dark t)


#+end_src

** mode-line

*** COMMENT doom-modeline
#+begin_src emacs-lisp

(use-package doom-modeline
  :straight t
  :defer 0.1
  ;; :hook (after-init . doom-modeline-mode)
  :config
  ;; Mode-line
  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 15)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 2)

  ;; How to detect the project root.
  ;; The default priority of detection is `ffip' > `projectile' > `project'.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'project)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Whether display icons in mode-line. Respects `all-the-icons-color-icons'.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  ;; Whether display the icon for `major-mode'. Respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; Respects `doom-modeline-major-mode-icon'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; Respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  ;; (setq doom-modeline-unicode-fallback nil)

  ;; Whether display the minor modes in mode-line.
  (setq doom-modeline-minor-modes (featurep 'minions))

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format nil)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the perspective name. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; Whether display the `lsp' state. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e t)

  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to dispaly as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
  (doom-modeline-mode t)
  )

;; (add-hook 'after-init-time-hook (progn
;;                                   (require 'doom-modeline)
;;                                   (doom-modeline-mode)))

#+end_src

*** COMMENT smart-modeline

#+begin_src emacs-lisp

(use-package smart-mode-line
  :straight t
  :defer 0.1
  :config (sml/setup)
  (setq sml/theme 'respectful))

#+end_src

*** COMMENT spaceline

#+begin_src emacs-lisp

(use-package spaceline
  :straight t
  :defer 0.1
  :config
  (require 'spaceline-config)
  (setq powerline-arrow-shape 'curve)   ;; give your mode-line curves
  (spaceline-spacemacs-theme))

#+end_src

*** COMMENT mood-line

#+begin_src emacs-lisp
(use-package mood-line
  :straight t
  :defer 0.1
  :after minions
  :config
  (defun mood-line-segment-major-mode ()
    "Displays the current major mode in the mode-line."
    (concat (format-mode-line minions-mode-line-modes 'mood-line-major-mode) "  "))
  (mood-line-mode)
  )
#+end_src

*** telephone-line

#+begin_src emacs-lisp

(use-package telephone-line
  :straight t
  :defer 0.1
  :config
  (telephone-line-defsegment telephone-line-minions-mode-segment ()
    (propertize "[+]"
                'display '(raise 0.0)
                'help-echo "Minor-modes"
                'mouse-face '(:box 1)
                'local-map (make-mode-line-mouse-map
                            'mouse-1 (lambda ()
                                       (interactive)
                                       (minions-minor-modes-menu)))))

  (setq
   telephone-line-rhs
   '((nil . (telephone-line-misc-info-segment))
     (accent . (telephone-line-major-mode-segment))
     (nil . (telephone-line-minions-mode-segment))
     (evil . (telephone-line-airline-position-segment))
     ))
  
  (setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-projectile-segment
                     telephone-line-buffer-segment))))
  
  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-left
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
  (setq telephone-line-height 24
        telephone-line-evil-use-short-tag t)
  (telephone-line-mode 1)
  (setq telephone-line-height 20)
  )

#+end_src

*** COMMENT moody

#+begin_src emacs-lisp
(use-package moody
  :straight t
  :defer 0.1
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (moody-replace-eldoc-minibuffer-message-function))  
#+end_src

** all-the-icons

#+begin_src emacs-lisp

(use-package all-the-icons
  :straight t
  :defer t
  ;; :init (unless (font-installed-p "all-the-icons")
  ;;       (all-the-icons-install-fonts t))
  )

(use-package all-the-icons-completion
  :straight t
  :defer 0.1
  :config (all-the-icons-completion-mode)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

(use-package all-the-icons-dired
  :straight t
  :defer t
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** COMMENT emacs-mini-frame

#+begin_src emacs-lisp

(use-package emacs-mini-frame
  :straight (emacs-mini-frame :type git :host github :repo "muffinmad/emacs-mini-frame")
  :defer t
  :after selectrum)

#+end_src


* programming and typesetting
** lsp-mode

#+begin_src emacs-lisp

(use-package lsp-mode
  :straight t
  :defer 2
  ;; :init (setq lsp-keymap-prefix "γ l")
  :hook ((ruby-mode . lsp)
         (enh-ruby-mode . lsp)
         (php-mode . lsp)
         ;; (java-mode . lsp)
         (html-mode .lsp)
         (js-mode . lsp)
         ;; (js2-mode . lsp)
         (web-mode . lsp)
         (css-mode . lsp)
         ;; (crystal-mode . lsp)
         (python-mode  . lsp)
         (rust-mode . lsp)
         ;; (go-mode . lsp)
         (c-mode . lsp)
         (c++-mode .lsp)
         ;; (lua-mode . lsp)
         (bash . lsp)
         )
  :config
  (setq lsp-keymap-prefix "γ l")
  ;; change nil to 't to enable logging of packets between emacs and the LS
  ;; this was invaluable for debugging communication with the MS Python Language Server
  ;; and comparing this with what vs.code is doing

  (setq lsp-print-io nil)
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-file-watchers nil)
  ;; (setq lsp-headerline-breadcrumb-enable nil)
  ;; (setq lsp-headerline-breadcrumb-icons-enable nil)
  ;; (require 'lsp-icons)
  ;; (require 'lsp-clients)

  )


;; lsp-ui gives us the blue documentation boxes and the sidebar info
(use-package lsp-ui
  :straight t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-enable t
        ;; lsp-ui-flycheck-enable 
        ;; lsp-ui-flycheck-list-position 'right
        ;; lsp-ui-flycheck-live-reporting t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25)
  (setq lsp-ui-sideline-ignore-duplicate t)
  ;; (add-hook 'lsp-mode-hook 'lsp-ui-mode)

  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  )

(use-package dap-mode
  :straight t ;;:after lsp-mode
  :defer t
  :hook (lsp-mode . dap-mode)
  :config
  ;;(dap-mode t)
  (dap-ui-mode t)
  (require 'dap-ruby)
  (require 'dap-php)
  ;; (require 'dap-java)
  (require 'dap-cpptools) ;; c/cpp
  ;; (require 'dap-lldb) ;; c/cpp
  ;; Enabling only some features
  (setq dap-auto-configure-features '(sessions locals controls tooltip))

  )

;; (use-package lsp-ivy :straight t :defer t :after lsp)
;; (use-package lsp-treemacs :straight t :defer t :after lsp)

#+end_src

** C/C++

#+begin_src emacs-lisp

;;C/C++

(use-package company-c-headers
  :after company
  :defer t
  :straight t
  )

#+end_src

** rust

#+begin_src emacs-lisp

(use-package rust-mode
  :straight t
  :defer t
  ;; :hook (rust-mode . racer-mode)
  ;;       (racer-mode . eldoc-mode)
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  (setq rust-format-on-save t))

(use-package cargo
  :straight t
  :defer t
  ;; :after rust-mode
  :hook (rust-mode . cargo-minor-mode)
  :config
  (setq compilation-scroll-output t))

#+end_src

** ruby

#+begin_src emacs-lisp

;;ruby

(use-package inf-ruby
  :straight t
  ;; :init  (setq inf-ruby-default-implementation "pry")
  :defer t)

;; (use-package seeing-is-believing
;;   :straight t
;;   :defer t
;;   :hook ((ruby-mode . seeing-is-believing)
;;          (enh-ruby-mode . seeing-is-believing))
;;   :config (setq seeing-is-believing-max-length 90
;;                 ;; seeing-is-believing-max-results 10
;;                 seeing-is-believing-timeout 10.5
;;                 seeing-is-believing-alignment 'file)
;;   )

#+end_src

** php

#+begin_src emacs-lisp

;;php

(use-package php-mode
  :straight t
  :defer t
  :mode "\\.php\\'"
  ;;:config (require 'php-extras)
  )

#+end_src

** lua

#+begin_src emacs-lisp

;;lua

(use-package lua-mode
  :straight t
  :defer t)

;; (use-package company-lua
;;   :straight t
;;   :defer t
;;   :after init company-mode
;;   :hook
;;   (company-mode . (lambda () (push 'company-lua company-backends))))

#+end_src

** ocaml

#+begin_src emacs-lisp

(use-package tuareg
  :mode ("\\.ml[ily]?$" . tuareg-mode)
  :straight t
  :defer t)

#+end_src
** crystal

#+begin_src emacs-lisp

(use-package crystal-mode
  :mode ("\\.cr$" . crystal-mode)
  :straight t
  :defer t)

#+end_src

** clojure

#+begin_src emacs-lisp

(use-package cider
  :straight t
  :defer t)

#+end_src

** zig

#+begin_src emacs-lisp

(use-package zig-mode
  :straight t
  :defer t)

#+end_src

** d

#+begin_src emacs-lisp

(use-package d-mode
  :straight t
  :defer t)

#+end_src

** nim

#+begin_src emacs-lisp

(use-package nim-mode
  :straight t
  :defer t)

#+end_src

** raku

#+begin_src emacs-lisp

(use-package raku-mode
  :straight t
  :defer t)

#+end_src

** csv

#+begin_src emacs-lisp

;;csv

(use-package csv-mode
  :straight t
  :defer t)

#+end_src

** yaml,toml and json

#+begin_src emacs-lisp

;;yaml,toml and json

(use-package yaml-mode
  :straight t
  :defer t)
(use-package toml-mode
  :straight t
  :defer t)
;; (use-package json-mode
;;   :straight t
;;   :defer t)

#+end_src

** rfc-mode

#+begin_src emacs-lisp

(use-package rfc-mode
  :straight t
  :defer t)

#+end_src

** go

#+begin_src emacs-lisp

;;go

(use-package go-mode
  :straight t
  :defer t)

;; (use-package company-go
;;   :straight t
;;   :defer t
;;   :hook (go-mode . (lambda ()
;;                      (set (make-local-variable 'company-backends) '(company-go))
;;                      (company-mode))))

;; (use-package go-dlv
;;   :straight t
;;   :defer t)

#+end_src

** web
*** html, css

#+begin_src emacs-lisp

(use-package emmet-mode
  :straight t
  :hook (sgml-mode css-mode web-mode))


(use-package web-mode
  :straight t
  :defer t
  :after init
  :mode ("\\.html\\'"
         "\\.css?\\'"
         "\\.phtml\\'"
         "\\.erb\\'"
         "\\.html?\\'"
         "\\.djhtml\\'"
         "\\.jinja\\'"
         )
  :config
  (setq web-mode-markup-indent-offset 2)
                                        ;  (setq web-mode-engines-alist
                                        ;        '(("django" . "focus/.*\\.html\\'")
                                        ;          ("ctemplate" . "realtimecrm/.*\\.html\\'")))
  (setq web-mode-enable-auto-pairing nil)
  )

;; (use-package impatient-mode
;;   :straight t
;;   :defer t
;;   :hook ((web-mode . impatient-mode)
;;          (sgml-mode . impatient-mode)))



;; (use-package company-web
;;   :defer t
;;   :straight t
;;   ;; :hook (('web-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
;;   ;;     ('mhtml-mode . (lambda () (add-to-list 'company-backends 'company-web-html)))
;;   ;;     ('html-mode . (lambda () (add-to-list 'company-backends 'company-web-html))))
;;   )

#+end_src

*** javascript

#+begin_src emacs-lisp
;;javascript

;; (use-package js2-mode
;;   :straight t
;;   :defer t
;;   :mode "\\.js\\'"
;;   :interpreter "node")

(use-package js2-mode
  :straight t
  :interpreter (("node" . js2-mode))
  :mode "\\.\\(js\\|json\\)$"
  :config
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-basic-offset 2
        js2-highlight-level 3
        js2-mode-show-parse-errors nil
        js2-mode-show-strict-warnings nil))



#+end_src

** COMMENT java

#+begin_src emacs-lisp

(use-package lsp-java
  :mode ("\\.java$")
  :straight t
  :config
  ;; Enable dap-java
  (require 'dap-java)

  ;; Support Lombok in our projects, among other things
  (setq lsp-java-vmargs
        (list "-noverify"
              "-Xmx2G"
              "-XX:+UseG1GC"
              "-XX:+UseStringDeduplication"
              ;; (concat "-javaagent:" jmi/lombok-jar)
              ;; (concat "-Xbootclasspath/a:" jmi/lombok-jar)
              )
        lsp-file-watch-ignored
        '(".idea" ".ensime_cache" ".eunit" "node_modules"
          ".git" ".hg" ".fslckout" "_FOSSIL_"
          ".bzr" "_darcs" ".tox" ".svn" ".stack-work"
          "build")

        lsp-java-import-order '["" "java" "javax" "#"]
        ;; Don't organize imports on save
        lsp-java-save-action-organize-imports nil

        ;; Formatter profile
        ;; lsp-java-format-settings-url
        ;; (concat "file://" jmi/java-format-settings-file)
        )

  :demand t
  :defer t
  :after (lsp lsp-mode dap-mode))

(use-package dap-java
  :ensure nil
  :defer t
  :after (lsp-java)

  ;; The :bind here makes use-package fail to lead the dap-java block!
  ;; :bind
  ;; (("C-c R" . dap-java-run-test-class)
  ;;  ("C-c d" . dap-java-debug-test-method)
  ;;  ("C-c r" . dap-java-run-test-method)
  ;;  )

  :config
  ;; (global-set-key (kbd "<f7>") 'dap-step-in)
  ;; (global-set-key (kbd "<f8>") 'dap-next)
  ;; (global-set-key (kbd "<f9>") 'dap-continue)
  )

#+end_src

** tree-sitter

#+begin_src emacs-lisp

(use-package tree-sitter
  :straight t
  :defer 0.3
  :when (bound-and-true-p module-file-suffix)
  :hook ;; (prog-mode . tree-sitter-mode)
        (lisp-interaction-mode . (lambda () (tree-sitter-mode -1)))
  :hook (tree-sitter-after-on . tree-sitter-hl-mode)
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  ;; (defadvice! doom-tree-sitter-fail-gracefully-a (orig-fn &rest args)
  ;;   "Don't break with errors when current major mode lacks tree-sitter support."
  ;;   :around #'tree-sitter-mode
  ;;   (condition-case e
  ;;       (apply orig-fn args)
  ;;     (error
  ;;      (unless (string-match-p (concat "^Cannot find shared library\\|"
  ;;                                      "^No language registered\\|"
  ;;                                      "cannot open shared object file")
  ;;                              (error-message-string e))
  ;;        (signal (car e) (cadr e))))))
  )

(use-package tree-sitter-langs
  :straight t
  :defer t
  :when (bound-and-true-p module-file-suffix)
)

#+end_src


* COMMENT eaf

#+begin_src emacs-lisp

(use-package eaf
  :if (eq system-type 'gnu/linux)
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (require 'eaf-browser)
  (require 'eaf-pdf-viewer)

  ;; (require 'eaf-airshare)
  ;; ;; (require 'eaf-browser)
  ;; (require 'eaf-camera)
  ;; (require 'eaf-demo)
  ;; (require 'eaf-file-browser)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-file-sender)
  ;; (require 'eaf-image-viewer)
  ;; (require 'eaf-jupyter)
  ;; (require 'eaf-markdown-previewer)
  ;; (require 'eaf-mermaid)
  ;; (require 'eaf-mindmap)
  ;; (require 'eaf-music-player)
  ;; (require 'eaf-org-previewer)
  ;; ;; (require 'eaf-pdf-viewer)
  ;; (require 'eaf-system-monitor)
  ;; (require 'eaf-terminal)
  ;; (require 'eaf-video-player)
  ;; (require 'eaf-vue-demo)
  ;; (require 'eaf-netease-cloud-music)
  ;; (require 'eaf-rss-reader)
  
  ;; (add-hook! 'eaf-mode-hook 'xah-fly-keys-off)

  ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)

  (defun eaf-open-google ()
    "Open Google using EAF."
    (interactive)
    (eaf-open-browser "https://www.google.com"))
  
   (defun eaf-open-ddg ()
    "Open Google using EAF."
    (interactive)
    (eaf-open-browser "https://www.duckduckgo.com")))

#+end_src


* start server

#+begin_src emacs-lisp

(use-package server
  :straight (:type built-in)
  :defer 0.6
  :config ;; (after-init . (lambda ()
  (unless (server-running-p)
    (server-start))) ;; ))


;; (require 'server)
;; (unless (server-running-p)
;;   (server-start))

#+end_src


* scratch-page settings

#+begin_src emacs-lisp

(use-package scratch-setup
  :straight (:type built-in)
  :defer 0.2
  :init
  (switch-to-buffer "*scratch*")
  (lisp-interaction-mode))

;; (add-hook 'after-init-time-hook (progn
;;                                (switch-to-buffer "*scratch*")
;;                                (lisp-interaction-mode)))

(use-package scratch
  ;; :ensure t
  :straight t
  :defer t)

#+end_src


* COMMENT load custom faces

#+begin_src emacs-lisp

;; (load-file (concat user-emacs-directory "custom_faces.el"))

#+end_src


* set custom variables

#+begin_src emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(indicate-empty-lines t)
 ;; '(safe-local-variable-values
 ;;   ((eval add-hook 'after-save-hook
 ;;       (lambda nil
 ;;         (org-babel-tangle)
 ;;         (message "tangled-document")))))
 )

#+end_src


* provide init

#+begin_src emacs-lisp

(provide 'init))

;;; init.el ends here

#+end_src
